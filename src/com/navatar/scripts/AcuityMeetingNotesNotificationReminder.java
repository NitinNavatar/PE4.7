
package com.navatar.scripts;

import static com.navatar.generic.CommonLib.*;
import static com.navatar.generic.CommonVariables.*;
import static com.navatar.generic.SmokeCommonVariables.adminPassword;

import java.util.*;
import java.util.stream.Collectors;

import org.openqa.selenium.WebElement;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.navatar.generic.BaseLib;
import com.navatar.generic.CommonLib;
import com.navatar.generic.EmailLib;
import com.navatar.generic.ExcelUtils;
import com.navatar.generic.EnumConstants.*;
import com.navatar.pageObjects.BasePageBusinessLayer;
import com.navatar.pageObjects.ContactsPageBusinessLayer;
import com.navatar.pageObjects.CustomObjPageBusinessLayer;
import com.navatar.pageObjects.DealPageBusinessLayer;
import com.navatar.pageObjects.FundRaisingPageBusinessLayer;
import com.navatar.pageObjects.FundsPageBusinessLayer;
import com.navatar.pageObjects.HomePageBusineesLayer;

import com.navatar.pageObjects.LoginPageBusinessLayer;

import com.navatar.pageObjects.NavigationPageBusineesLayer;
import com.navatar.pageObjects.OutlookPageBusinessLayer;
import com.navatar.pageObjects.SetupPageBusinessLayer;
import com.navatar.pageObjects.TaskPageBusinessLayer;
import com.navatar.pageObjects.ThemePageBusinessLayer;
import com.relevantcodes.extentreports.LogStatus;

public class AcuityMeetingNotesNotificationReminder extends BaseLib {

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc001_1_CreateCRMUser1(String projectName) {
		SetupPageBusinessLayer setup = new SetupPageBusinessLayer(driver);
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		String parentWindow = null;
		String[] splitedUserLastName = removeNumbersFromString(crmUser1LastName);
		String UserLastName = splitedUserLastName[0] + lp.generateRandomNumber();
		String emailId = lp.generateRandomEmailId(gmailUserName);
		String profile = "PE Standard User";

		lp.CRMLogin(superAdminUserName, adminPassword, appName);
		boolean flag = false;
		for (int i = 0; i < 3; i++) {
			try {
				if (home.clickOnSetUpLink()) {
					flag = true;
					parentWindow = switchOnWindow(driver);
					if (parentWindow == null) {
						sa.assertTrue(false,
								"No new window is open after click on setup link in lighting mode so cannot create CRM User1");
						log(LogStatus.SKIP,
								"No new window is open after click on setup link in lighting mode so cannot create CRM User1",
								YesNo.Yes);
						exit("No new window is open after click on setup link in lighting mode so cannot create CRM User1");
					}
					if (setup.createPEUser(crmUser1FirstName, UserLastName, emailId, crmUserLience, profile, "")) {
						log(LogStatus.INFO,
								"CRM User is created Successfully: " + crmUser1FirstName + " " + UserLastName,
								YesNo.No);
						ExcelUtils.writeData(testCasesFilePath, emailId, "Users", excelLabel.Variable_Name, "User1",
								excelLabel.User_Email);
						ExcelUtils.writeData(testCasesFilePath, UserLastName, "Users", excelLabel.Variable_Name,
								"User1", excelLabel.User_Last_Name);
						flag = true;
						break;

					}
					driver.close();
					driver.switchTo().window(parentWindow);

				}
			} catch (Exception e) {
				log(LogStatus.INFO, "could not find setup link, trying again..", YesNo.No);
			}

		}
		if (flag) {

			if (!environment.equalsIgnoreCase(Environment.Sandbox.toString())) {
				switchToDefaultContent(driver);
				CommonLib.ThreadSleep(5000);
				if (setup.installedPackages(crmUser1FirstName, UserLastName)) {
					appLog.info("PE Package is installed Successfully in CRM User: " + crmUser1FirstName + " "
							+ UserLastName);

				} else {
					appLog.error(
							"Not able to install PE package in CRM User1: " + crmUser1FirstName + " " + UserLastName);
					sa.assertTrue(false,
							"Not able to install PE package in CRM User1: " + crmUser1FirstName + " " + UserLastName);
					log(LogStatus.ERROR,
							"Not able to install PE package in CRM User1: " + crmUser1FirstName + " " + UserLastName,
							YesNo.Yes);
				}
			}
		} else {

			log(LogStatus.ERROR, "could not click on setup link, test case fail", YesNo.Yes);
			sa.assertTrue(false, "could not click on setup link, test case fail");

		}
		lp.CRMlogout();
		closeBrowser();

		config(ExcelUtils.readDataFromPropertyFile("Browser"));
		lp = new LoginPageBusinessLayer(driver);
		String passwordResetLink = null;
		try {
			passwordResetLink = new EmailLib().getResetPasswordLink("passwordreset",
					ExcelUtils.readDataFromPropertyFile("gmailUserName"),
					ExcelUtils.readDataFromPropertyFile("gmailPassword"));
		} catch (InterruptedException e2) {
			e2.printStackTrace();
		}
		appLog.info("ResetLinkIs: " + passwordResetLink);
		driver.get(passwordResetLink);
		if (lp.setNewPassword()) {
			appLog.info("Password is set successfully for CRM User1: " + crmUser1FirstName + " " + UserLastName);
		} else {
			appLog.info("Password is not set for CRM User1: " + crmUser1FirstName + " " + UserLastName);
			sa.assertTrue(false, "Password is not set for CRM User1: " + crmUser1FirstName + " " + UserLastName);
			log(LogStatus.ERROR, "Password is not set for CRM User1: " + crmUser1FirstName + " " + UserLastName,
					YesNo.Yes);
		}
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc001_2_CreateCRMUser2(String projectName) {
		SetupPageBusinessLayer setup = new SetupPageBusinessLayer(driver);
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		String parentWindow = null;
		String[] splitedUserLastName = removeNumbersFromString(crmUser2LastName);
		String UserLastName = splitedUserLastName[0] + lp.generateRandomNumber();
		String emailId = lp.generateRandomEmailId(gmailUserName);
		String profile = "PE Standard User";
		lp.CRMLogin(superAdminUserName, adminPassword, appName);
		boolean flag = false;
		for (int i = 0; i < 3; i++) {
			try {
				if (home.clickOnSetUpLink()) {
					flag = true;
					parentWindow = switchOnWindow(driver);
					if (parentWindow == null) {
						sa.assertTrue(false,
								"No new window is open after click on setup link in lighting mode so cannot create CRM User2");
						log(LogStatus.SKIP,
								"No new window is open after click on setup link in lighting mode so cannot create CRM User2",
								YesNo.Yes);
						exit("No new window is open after click on setup link in lighting mode so cannot create CRM User2");
					}
					if (setup.createPEUser(crmUser2FirstName, UserLastName, emailId, crmUserLience, profile, "")) {
						log(LogStatus.INFO,
								"CRM User is created Successfully: " + crmUser2FirstName + " " + UserLastName,
								YesNo.No);
						ExcelUtils.writeData(testCasesFilePath, emailId, "Users", excelLabel.Variable_Name, "User2",
								excelLabel.User_Email);
						ExcelUtils.writeData(testCasesFilePath, UserLastName, "Users", excelLabel.Variable_Name,
								"User2", excelLabel.User_Last_Name);
						flag = true;
						break;

					}
					driver.close();
					driver.switchTo().window(parentWindow);

				}
			} catch (Exception e) {
				log(LogStatus.INFO, "could not find setup link, trying again..", YesNo.No);
			}

		}
		if (flag) {

			if (!environment.equalsIgnoreCase(Environment.Sandbox.toString())) {
				switchToDefaultContent(driver);
				CommonLib.ThreadSleep(5000);
				if (setup.installedPackages(crmUser2FirstName, UserLastName)) {
					appLog.info("PE Package is installed Successfully in CRM User: " + crmUser2FirstName + " "
							+ UserLastName);

				} else {
					appLog.error(
							"Not able to install PE package in CRM User2: " + crmUser2FirstName + " " + UserLastName);
					sa.assertTrue(false,
							"Not able to install PE package in CRM User2: " + crmUser2FirstName + " " + UserLastName);
					log(LogStatus.ERROR,
							"Not able to install PE package in CRM User2: " + crmUser2FirstName + " " + UserLastName,
							YesNo.Yes);
				}
			}
		} else {

			log(LogStatus.ERROR, "could not click on setup link, test case fail", YesNo.Yes);
			sa.assertTrue(false, "could not click on setup link, test case fail");

		}
		lp.CRMlogout();
		closeBrowser();
		config(ExcelUtils.readDataFromPropertyFile("Browser"));
		lp = new LoginPageBusinessLayer(driver);
		String passwordResetLink = null;
		try {
			passwordResetLink = new EmailLib().getResetPasswordLink("passwordreset",
					ExcelUtils.readDataFromPropertyFile("gmailUserName"),
					ExcelUtils.readDataFromPropertyFile("gmailPassword"));
		} catch (InterruptedException e2) {
			e2.printStackTrace();
		}
		appLog.info("ResetLinkIs: " + passwordResetLink);
		driver.get(passwordResetLink);
		if (lp.setNewPassword()) {
			appLog.info("Password is set successfully for CRM User2: " + crmUser2FirstName + " " + UserLastName);
		} else {
			appLog.info("Password is not set for CRM User2: " + crmUser2FirstName + " " + UserLastName);
			sa.assertTrue(false, "Password is not set for CRM User2: " + crmUser2FirstName + " " + UserLastName);
			log(LogStatus.ERROR, "Password is not set for CRM User2: " + crmUser2FirstName + " " + UserLastName,
					YesNo.Yes);
		}
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc001_3_CreateCRMUser3(String projectName) {
		SetupPageBusinessLayer setup = new SetupPageBusinessLayer(driver);
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		String parentWindow = null;
		String[] splitedUserLastName = removeNumbersFromString(crmUser3LastName);
		String UserLastName = splitedUserLastName[0] + lp.generateRandomNumber();
		String emailId = lp.generateRandomEmailId(gmailUserName);
		String profile = "PE Standard User";
		lp.CRMLogin(superAdminUserName, adminPassword, appName);
		boolean flag = false;
		for (int i = 0; i < 3; i++) {
			try {
				if (home.clickOnSetUpLink()) {
					flag = true;
					parentWindow = switchOnWindow(driver);
					if (parentWindow == null) {
						sa.assertTrue(false,
								"No new window is open after click on setup link in lighting mode so cannot create CRM User3");
						log(LogStatus.SKIP,
								"No new window is open after click on setup link in lighting mode so cannot create CRM User3",
								YesNo.Yes);
						exit("No new window is open after click on setup link in lighting mode so cannot create CRM User3");
					}
					if (setup.createPEUser(crmUser3FirstName, UserLastName, emailId, crmUserLience, profile, "")) {
						log(LogStatus.INFO,
								"CRM User is created Successfully: " + crmUser3FirstName + " " + UserLastName,
								YesNo.No);
						ExcelUtils.writeData(testCasesFilePath, emailId, "Users", excelLabel.Variable_Name, "User3",
								excelLabel.User_Email);
						ExcelUtils.writeData(testCasesFilePath, UserLastName, "Users", excelLabel.Variable_Name,
								"User3", excelLabel.User_Last_Name);
						flag = true;
						break;

					}
					driver.close();
					driver.switchTo().window(parentWindow);

				}
			} catch (Exception e) {
				log(LogStatus.INFO, "could not find setup link, trying again..", YesNo.No);
			}

		}
		if (flag) {

			if (!environment.equalsIgnoreCase(Environment.Sandbox.toString())) {
				switchToDefaultContent(driver);
				CommonLib.ThreadSleep(5000);
				if (setup.installedPackages(crmUser3FirstName, UserLastName)) {
					appLog.info("PE Package is installed Successfully in CRM User: " + crmUser3FirstName + " "
							+ UserLastName);

				} else {
					appLog.error(
							"Not able to install PE package in CRM User3: " + crmUser3FirstName + " " + UserLastName);
					sa.assertTrue(false,
							"Not able to install PE package in CRM User3: " + crmUser3FirstName + " " + UserLastName);
					log(LogStatus.ERROR,
							"Not able to install PE package in CRM User3: " + crmUser3FirstName + " " + UserLastName,
							YesNo.Yes);
				}
			}
		} else {

			log(LogStatus.ERROR, "could not click on setup link, test case fail", YesNo.Yes);
			sa.assertTrue(false, "could not click on setup link, test case fail");

		}
		lp.CRMlogout();
		closeBrowser();
		config(ExcelUtils.readDataFromPropertyFile("Browser"));
		lp = new LoginPageBusinessLayer(driver);
		String passwordResetLink = null;
		try {
			passwordResetLink = new EmailLib().getResetPasswordLink("passwordreset",
					ExcelUtils.readDataFromPropertyFile("gmailUserName"),
					ExcelUtils.readDataFromPropertyFile("gmailPassword"));
		} catch (InterruptedException e2) {
			e2.printStackTrace();
		}
		appLog.info("ResetLinkIs: " + passwordResetLink);
		driver.get(passwordResetLink);
		if (lp.setNewPassword()) {
			appLog.info("Password is set successfully for CRM User3: " + crmUser3FirstName + " " + UserLastName);
		} else {
			appLog.info("Password is not set for CRM User3: " + crmUser3FirstName + " " + UserLastName);
			sa.assertTrue(false, "Password is not set for CRM User3: " + crmUser3FirstName + " " + UserLastName);
			log(LogStatus.ERROR, "Password is not set for CRM User3: " + crmUser3FirstName + " " + UserLastName,
					YesNo.Yes);
		}
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc001_4_CreateCRMUser4(String projectName) {
		SetupPageBusinessLayer setup = new SetupPageBusinessLayer(driver);
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		String parentWindow = null;
		String[] splitedUserLastName = removeNumbersFromString(crmUser4LastName);
		String UserLastName = splitedUserLastName[0] + lp.generateRandomNumber();
		String emailId = lp.generateRandomEmailId(gmailUserName);
		String profile = "PE Standard User";
		lp.CRMLogin(superAdminUserName, adminPassword, appName);
		boolean flag = false;
		for (int i = 0; i < 3; i++) {
			try {
				if (home.clickOnSetUpLink()) {
					flag = true;
					parentWindow = switchOnWindow(driver);
					if (parentWindow == null) {
						sa.assertTrue(false,
								"No new window is open after click on setup link in lighting mode so cannot create CRM User4");
						log(LogStatus.SKIP,
								"No new window is open after click on setup link in lighting mode so cannot create CRM User4",
								YesNo.Yes);
						exit("No new window is open after click on setup link in lighting mode so cannot create CRM User4");
					}
					if (setup.createPEUser(crmUser4FirstName, UserLastName, emailId, crmUserLience, profile, "")) {
						log(LogStatus.INFO,
								"CRM User is created Successfully: " + crmUser4FirstName + " " + UserLastName,
								YesNo.No);
						ExcelUtils.writeData(testCasesFilePath, emailId, "Users", excelLabel.Variable_Name, "User4",
								excelLabel.User_Email);
						ExcelUtils.writeData(testCasesFilePath, UserLastName, "Users", excelLabel.Variable_Name,
								"User4", excelLabel.User_Last_Name);
						flag = true;
						break;

					}
					driver.close();
					driver.switchTo().window(parentWindow);

				}
			} catch (Exception e) {
				log(LogStatus.INFO, "could not find setup link, trying again..", YesNo.No);
			}

		}
		if (flag) {

			if (!environment.equalsIgnoreCase(Environment.Sandbox.toString())) {
				switchToDefaultContent(driver);
				CommonLib.ThreadSleep(5000);
				if (setup.installedPackages(crmUser4FirstName, UserLastName)) {
					appLog.info("PE Package is installed Successfully in CRM User: " + crmUser4FirstName + " "
							+ UserLastName);

				} else {
					appLog.error(
							"Not able to install PE package in CRM User4: " + crmUser4FirstName + " " + UserLastName);
					sa.assertTrue(false,
							"Not able to install PE package in CRM User4: " + crmUser4FirstName + " " + UserLastName);
					log(LogStatus.ERROR,
							"Not able to install PE package in CRM User4: " + crmUser4FirstName + " " + UserLastName,
							YesNo.Yes);
				}
			}
		} else {

			log(LogStatus.ERROR, "could not click on setup link, test case fail", YesNo.Yes);
			sa.assertTrue(false, "could not click on setup link, test case fail");

		}
		lp.CRMlogout();
		closeBrowser();
		config(ExcelUtils.readDataFromPropertyFile("Browser"));
		lp = new LoginPageBusinessLayer(driver);
		String passwordResetLink = null;
		try {
			passwordResetLink = new EmailLib().getResetPasswordLink("passwordreset",
					ExcelUtils.readDataFromPropertyFile("gmailUserName"),
					ExcelUtils.readDataFromPropertyFile("gmailPassword"));
		} catch (InterruptedException e2) {
			e2.printStackTrace();
		}
		appLog.info("ResetLinkIs: " + passwordResetLink);
		driver.get(passwordResetLink);
		if (lp.setNewPassword()) {
			appLog.info("Password is set successfully for CRM User4: " + crmUser4FirstName + " " + UserLastName);
		} else {
			appLog.info("Password is not set for CRM User4: " + crmUser4FirstName + " " + UserLastName);
			sa.assertTrue(false, "Password is not set for CRM User4: " + crmUser4FirstName + " " + UserLastName);
			log(LogStatus.ERROR, "Password is not set for CRM User4: " + crmUser4FirstName + " " + UserLastName,
					YesNo.Yes);
		}
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc001_CreateTheRecordsFromDataSheetAndVerifyInTheOrg(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);

		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fund = new FundsPageBusinessLayer(driver);
		DealPageBusinessLayer dp = new DealPageBusinessLayer(driver);
		FundRaisingPageBusinessLayer fr = new FundRaisingPageBusinessLayer(driver);
		ContactsPageBusinessLayer cp = new ContactsPageBusinessLayer(driver);
		ThemePageBusinessLayer theme = new ThemePageBusinessLayer(driver);

		String[] fundNames = AMNNR_FundNames1.split("<Break>", -1);
		String[] fundTypes = AMNNR_FundTypes1.split("<Break>", -1);
		String[] investmentCategories = AMNNR_FundInvestmentCategories1.split("<Break>", -1);
		String otherLabelFields = null;
		String otherLabelValues = null;

		String[] fundraisingNames = AMNNR_FundraisingNames1.split("<Break>", -1);
		String[] fundraisingsFundName = AMNNR_FundraisingFundName1.split("<Break>", -1);
		String[] fundraisingsInstitutionName = AMNNR_FundraisingInstitutionName1.split("<Break>", -1);
		String[] fundraisingsStageName = AMNNR_FundraisingStageName1.split("<Break>", -1);

		String dealRecordTypes = null;
		String[] dealName = AMNNR_DealName1.split("<Break>", -1);
		String[] dealCompany = AMNNR_DealCompany1.split("<Break>", -1);
		String[] dealStage = AMNNR_DealStage1.split("<Break>", -1);

		String tabName = AMNNR_CustomObjectTab1;
		String textBoxRecordLabel = AMNNR_CustomObjectField1;
		String[] textBoxRecordNames = AMNNR_CustomObjectRecord1.split("<Break>", -1);

		String themeTabName = "Themes";

		/*
		 * String[][] contacts = { { AP2NT_Con1FirstName, AP2NT_Con1LastName,
		 * AP2NT_Con1InstitutionName, AP2NT_Con1ContactEmail,
		 * AP2NT_Con1OtherLabelsNames, AP2NT_Con1OtherLabelsValues }, {
		 * AP2NT_Con2FirstName, AP2NT_Con2LastName, AP2NT_Con2InstitutionName,
		 * AP2NT_Con2ContactEmail, AP2NT_Con2OtherLabelsNames,
		 * AP2NT_Con2OtherLabelsValues } };
		 */

		String[][] contacts = { { AP2NT_Con1FirstName, AP2NT_Con1LastName, AP2NT_Con1InstitutionName,
				AP2NT_Con1ContactEmail, AP2NT_Con1OtherLabelsNames, AP2NT_Con1OtherLabelsValues } };

		String[] themeNameAndDescriptions = "Theme A<Break><Section>Theme B<Break><Section>Theme C<Break><Section>Theme D<Break><Section>Theme E<Break><Section>Theme F<Break><Section>Sumo Kind Theme<Break>"
				.split("<Section>", -1);

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		// contact
		for (String[] contact : contacts) {

			if (BP.clickOnTab(environment, mode, TabName.ContactTab)) {
				log(LogStatus.INFO, "Click on Tab : " + TabName.ContactTab, YesNo.No);

				String firstName = "";
				String lastName = "";
				String legalName = "";
				String email = "";
				String contactOtherLabelNames = "";
				String contactOtherLabelValues = "";
				firstName = contact[0];
				lastName = contact[1];
				legalName = contact[2];
				email = contact[3];
				contactOtherLabelNames = contact[4];
				contactOtherLabelValues = contact[5];
				log(LogStatus.INFO, "---------Now Going to Create " + TabName.ContactTab + " : " + firstName + " "
						+ lastName + "---------", YesNo.No);
				if (cp.createContact(projectName, firstName, lastName, legalName, email, "", contactOtherLabelNames,
						contactOtherLabelValues, CreationPage.ContactPage, null, null)) {
					log(LogStatus.INFO, "successfully Created Contact : " + firstName + " " + lastName, YesNo.No);
				} else {
					sa.assertTrue(false, "Not Able to Create Contact : " + firstName + " " + lastName);
					log(LogStatus.SKIP, "Not Able to Create Contact: " + firstName + " " + lastName, YesNo.Yes);
				}

			} else {
				sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.ContactTab);
				log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.ContactTab, YesNo.Yes);
			}

		}

		int fundStatus = 0;
		int fundLoopCount = 0;
		for (String fundName : fundNames) {

			log(LogStatus.INFO, "---------Now Going to Create Fund Named: " + fundName + "---------", YesNo.No);
			if (fund.clickOnTab(environment, mode, TabName.FundsTab)) {

				if (fund.createFund(projectName, fundName, fundTypes[fundLoopCount],
						investmentCategories[fundLoopCount], otherLabelFields, otherLabelValues)) {
					appLog.info("Fund is created Successfully: " + fundName);
					fundStatus++;

				} else {
					appLog.error("Not able to click on fund: " + fundName);
					sa.assertTrue(false, "Not able to click on fund: " + fundName);
					log(LogStatus.ERROR, "Not able to click on fund: " + fundName, YesNo.Yes);
				}
			} else {
				appLog.error("Not able to click on Fund tab so cannot create Fund: " + fundName);
				sa.assertTrue(false, "Not able to click on Fund tab so cannot create Fund: " + fundName);
			}
			ThreadSleep(2000);
			fundLoopCount++;

		}

		if (fundStatus == fundLoopCount) {
			int fundraisingLoopCount = 0;
			for (String fundraisingName : fundraisingNames) {
				log(LogStatus.INFO, "---------Now Going to Create Fundraising Named: " + fundraisingName + "---------",
						YesNo.No);
				if (BP.clickOnTab(environment, mode, TabName.FundraisingsTab)) {

					if (fr.createFundRaising(environment, "Lightning", fundraisingName,
							fundraisingsFundName[fundraisingLoopCount],
							fundraisingsInstitutionName[fundraisingLoopCount], null,
							fundraisingsStageName[fundraisingLoopCount], null, null, null, null, null)) {
						appLog.info("fundraising is created : " + fundraisingName);
					} else {
						appLog.error("Not able to create fundraising: " + fundraisingName);
						sa.assertTrue(false, "Not able to create fundraising: " + fundraisingName);
					}

				} else {
					appLog.error(
							"Not able to click on fundraising tab so cannot create fundraising: " + fundraisingName);
					sa.assertTrue(false,
							"Not able to click on fundraising tab so cannot create fundraising: " + fundraisingName);
				}
				ThreadSleep(2000);

				fundraisingLoopCount++;

			}

		} else {
			appLog.error("No Fund is created, So not able to Create Fundraising: " + fundraisingNames);
			sa.assertTrue(false, "No Fund is created, So not able to Create Fundraising: " + fundraisingNames);
		}

		log(LogStatus.INFO, "---------Now Going to Create " + tabObj4 + "---------", YesNo.No);
		for (int i = 0; i < dealName.length; i++) {
			if (lp.clickOnTab(projectName, tabObj4)) {
				log(LogStatus.INFO, "Click on Tab : " + tabObj4, YesNo.No);
				ThreadSleep(3000);
				if (dp.createDeal(dealRecordTypes, dealName[i], dealCompany[i], dealStage[i], null, null)) {
					log(LogStatus.INFO, dealName[i] + " deal has been created", YesNo.No);

				} else {
					log(LogStatus.ERROR, dealName[i] + " deal is not created", YesNo.No);
					sa.assertTrue(false, dealName[i] + " deal is not created");
				}
			} else {
				log(LogStatus.ERROR, "Not able to click on " + tabObj4 + " Tab", YesNo.No);
				sa.assertTrue(false, "Not able to click on " + tabObj4 + " Tab");
			}
		}

		for (String textBoxRecordName : textBoxRecordNames) {

			if (BP.createRecordForCustomObject(projectName, tabName, textBoxRecordLabel, textBoxRecordName)) {
				log(LogStatus.INFO, "Record: " + textBoxRecordName + " has been Created under: " + tabName, YesNo.No);
			} else {
				log(LogStatus.ERROR, "Record: " + textBoxRecordName + " has not been Created under: " + tabName,
						YesNo.No);
				sa.assertTrue(false, "Record: " + textBoxRecordName + " has not been Created under: " + tabName);
			}
		}

		for (String themeNameAndDescription : themeNameAndDescriptions) {

			String[] themeNameAndDescriptionList = themeNameAndDescription.split("<Break>", -1);

			String themeName = themeNameAndDescriptionList[0];
			String themeDescription = themeNameAndDescriptionList[1];
			if (theme.createTheme(projectName, themeTabName, themeName, themeDescription)) {
				log(LogStatus.INFO, "Record: " + themeName + " has been Created under: " + themeTabName, YesNo.No);
			} else {
				log(LogStatus.ERROR, "Record: " + themeName + " has not been Created under: " + themeTabName, YesNo.No);
				sa.assertTrue(false, "Record: " + themeName + " has not been Created under: " + themeTabName);
			}

		}
		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();

	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc002_VerifyTheUIOfMeetingNotesPopUpFromAddNoteButtonPlacedOnAcuityTabInteractionSection(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String task1SubjectName = "";
		String task1Notes = "";

		String getAdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT-08:00", "MMM d, yyyy",
				Integer.parseInt("0"));
		String priority = "Normal";
		String status = "Not Started";

		String taskSectionSubject = "";
		String taskSectionStatus = "Not Started";
		String taskSectionDueDateOnly = "";

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "-None-" } };

		String[][] task1TaskSection = { { AMNNR_TaskLabel1, taskSectionSubject },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName },
				{ AMNNR_TaskLabel5, taskSectionStatus }, { AMNNR_TaskLabel4, taskSectionDueDateOnly } };

		String recordPageButtonName = AMNNR_ActivityType59;

		String recordName = AMNNR_FirmLegalName1;
		String url = "";

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO, "---------Now Going to Verify UI of Task: " + task1SubjectName
				+ " in Activity Timeline Section---------", YesNo.No);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.clickOnRecordPageButtonForNewRecordCreation(recordPageButtonName, 30)) {
				log(LogStatus.INFO, "Clicked on Button: " + recordPageButtonName + " of Record Page: " + recordName,
						YesNo.No);
				url = getURL(driver, 10);
				BP.verifyUIOfTaskPopUp(url, task1BasicSection, task1AdvancedSection, task1TaskSection);

			} else {
				log(LogStatus.ERROR,
						"Not able to Click on Button: " + recordPageButtonName + " of Record Page: " + recordName,
						YesNo.No);
				sa.assertTrue(false,
						"Not able to Click on Button: " + recordPageButtonName + " of Record Page: " + recordName);
			}

		} else {
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc003_CreateATaskAndAddTheNotesFromEditCommentButtonOfTaskLayout(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject2;
		String task1Notes = AMNNR_Notes2;
		String relatedTo = AMNNR_RelatedTo2;
		String priority = AMNNR_AdvancePriority2;
		String status = AMNNR_AdvanceStatus2;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };
		String task1ButtonName = AMNNR_ActivityType1;
		String recordName = AMNNR_FirmLegalName1;
		String recordType = AMNNR_FirmRecordType1;
		String updatedCommentOfTask = AMNNR_Notes3;
		String[] relatedToVerify = AMNNR_ATRelatedTo1.split("<break>");
		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, updatedCommentOfTask }, { AMNNR_TaskLabel3, relatedTo } };

		String[][] task1UpdateBasicSection = { { AMNNR_TaskLabel2, updatedCommentOfTask } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Create Task: " + task1SubjectName + " in Activity Timeline Section---------",
				YesNo.No);
		CommonLib.refresh(driver);
		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Interaction Section---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, relatedToVerify, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}

					if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

						log(LogStatus.INFO,
								"-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
								YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null, null, null,
									null, false, null, null, null, null, null, null)) {
								log(LogStatus.PASS,
										"Activity timeline record has been Updated for Task: " + task1SubjectName,
										YesNo.No);

								if (lp.clickOnTab(projectName, tabObj1)) {

									log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

									if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
											recordType, recordName, 30)) {
										log(LogStatus.INFO,
												recordName + " record of record type " + recordType + " has been open",
												YesNo.No);
										ThreadSleep(4000);
										if (BP.clicktabOnPage("Acuity")) {
											log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

											CommonLib.refresh(driver);
											ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
													getAdvanceDueDate, IconType.Task, task1SubjectName,
													updatedCommentOfTask, true, false, relatedToVerify, null);
											if (updatedresult.isEmpty()) {
												log(LogStatus.PASS,
														"------" + task1SubjectName
																+ " record has been verified on intraction------",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------",
														YesNo.No);
												sa.assertTrue(false,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------");
											}

											String url2 = getURL(driver, 10);

											if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
													"Edit Note Button of: " + task1SubjectName,
													action.SCROLLANDBOOLEAN)) {
												log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

												ThreadSleep(1000);
												ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
														.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
																task1BasicSectionVerification, task1AdvancedSection,
																null);
												if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
													log(LogStatus.INFO,
															"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
															YesNo.No);

												} else {
													log(LogStatus.ERROR,
															"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																	+ NotesPopUpPrefilledNegativeResultUpdated,
															YesNo.No);
													sa.assertTrue(false,
															"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																	+ NotesPopUpPrefilledNegativeResultUpdated);
												}
											} else {
												log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
												sa.assertTrue(false, "Not able to click on Edit Note button");
											}

										} else {
											log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
											sa.assertTrue(false, "Not able to click on Acuity Tab");
										}

									} else {
										log(LogStatus.ERROR, "Not able to open " + recordName
												+ " record of record type " + recordType, YesNo.No);
										sa.assertTrue(false, "Not able to open " + recordName
												+ " record of record type " + recordType);
									}
								} else {
									log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
									sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
								}

							} else {
								log(LogStatus.FAIL,
										"Activity timeline record has not Updated for task: " + task1SubjectName,
										YesNo.No);
								sa.assertTrue(false,
										"Activity timeline record has not Updated for task: " + task1SubjectName);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subjec Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subjec Link Popup of Task: "
									+ task1SubjectName);
						}

						driver.close();
						driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					} else {

						log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
								YesNo.Yes);
						BaseLib.sa.assertTrue(false,
								"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

					}

				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc004_CreateATaskAndAddTheNotesAndVerifySuggestedTagPopUp(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
		String getAdvanceDueDate = AdvanceDueDate;
		String task1SubjectName = AMNNR_Subject4;
		String task1Notes = AMNNR_Notes4;
		String relatedTo = AMNNR_RelatedTo4;

		String priority = AMNNR_AdvancePriority4;
		String status = AMNNR_AdvanceStatus4;
		String task1ButtonName = AMNNR_ActivityType1;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String[] SuggestedTags = AMNNR_SuggestedTag4.split("<break>", -1);

		String[] relatedToArray = new String[SuggestedTags.length + relatedTo.split("<break>", -1).length];

		int relatedToLoop = 0;
		int suggestedLoop = 0;
		for (String related : relatedTo.split("<break>", -1)) {
			relatedToArray[relatedToLoop] = related;
			relatedToLoop++;
		}
		for (String suggestedTag : SuggestedTags) {
			relatedToArray[relatedToLoop + suggestedLoop] = suggestedTag.split("==", -1)[0];
			suggestedLoop++;

		}

		String recordName = AMNNR_FirmLegalName2;
		String recordType = AMNNR_FirmRecordType2;
		String updatedNotesOfTask = AMNNR_Notes5;
		String[] relatedToVerify = AMNNR_ATRelatedTo2.split("<break>");

		String[][] task1UpdateBasicSection = { { AMNNR_TaskLabel2, updatedNotesOfTask } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag5.split("<break>", -1);
		String[] updatedRelatedToVerify = AMNNR_ATRelatedTo3.split("<break>");

		String[] updatedRelatedToArray = new String[relatedToArray.length + updatedSuggestedTags.length];

		int updatedrelatedToLoop = 0;
		int updatedsuggestedLoop = 0;
		for (String related : relatedToArray) {
			updatedRelatedToArray[updatedrelatedToLoop] = related;
			updatedrelatedToLoop++;
		}
		for (String suggestedTag : updatedSuggestedTags) {
			updatedRelatedToArray[updatedrelatedToLoop + updatedsuggestedLoop] = suggestedTag;
			updatedsuggestedLoop++;

		}

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_TaskLabel3, AMNNR_SuggestedTag4 } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel5, status }, { AMNNR_TaskLabel6, priority } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Create Task: " + task1SubjectName + " in Activity Timeline Section---------",
				YesNo.No);

		CommonLib.refresh(driver);
		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimelineAlsoVerifyUIOfSuggestedTag(projectName, true, task1ButtonName,
					task1BasicSection, task1AdvancedSection, null, SuggestedTags)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Interaction Section---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, relatedToVerify, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

						ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
								task1SubjectName, task1BasicSection, task1AdvancedSection, IconType.Task,
								PageName.AcuityDetails);

						if (subjectLinkPopUpNegativeResult.isEmpty()) {
							log(LogStatus.PASS, "------" + task1SubjectName
									+ " record is able to open popup after click on it and verify its data" + "------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------",
									YesNo.Yes);
							sa.assertTrue(false,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------");

						}

						String url = getURL(driver, 10);

						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							ThreadSleep(10000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1SubjectName, task1Notes,
											relatedToArray);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);
								ThreadSleep(2000);
								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
											null, updatedSuggestedTags, null, false, null, null, null, null, null,
											null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);
										ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
												getAdvanceDueDate, IconType.Task, task1SubjectName, updatedNotesOfTask,
												true, false, updatedRelatedToVerify, null);
										if (updatedresult.isEmpty()) {
											log(LogStatus.PASS,
													"------" + task1SubjectName
															+ " record has been verified on intraction------",
													YesNo.No);

											ArrayList<String> subjectLinkPopUpNegativeResultUpdated = BP
													.verifySubjectLinkPopUpOnIntraction(driver, task1SubjectName,
															updatedTask1BasicSectionVerification,
															updatedTask1AdvancedSectionVerification, IconType.Task,
															PageName.AcuityDetails);

											if (subjectLinkPopUpNegativeResultUpdated.isEmpty()) {
												log(LogStatus.PASS, "------" + task1SubjectName
														+ " record is able to open popup after click on it and verify its data"
														+ "------", YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"------" + task1SubjectName
																+ " record link popup is not verified, Reason: "
																+ subjectLinkPopUpNegativeResultUpdated + "------",
														YesNo.Yes);
												sa.assertTrue(false,
														"------" + task1SubjectName
																+ " record link popup is not verified, Reason: "
																+ subjectLinkPopUpNegativeResultUpdated + "------");

											}

											String url2 = getURL(driver, 10);

											if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
													"Edit Note Button of: " + task1SubjectName,
													action.SCROLLANDBOOLEAN)) {
												log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

												ThreadSleep(10000);

												String expectedHeaderName = "Task";
												if (BP.notePopUpHeading(expectedHeaderName, 15) != null) {
													log(LogStatus.INFO,
															"PopUp Name has been verified to: " + expectedHeaderName,
															YesNo.No);
												}

												else {
													log(LogStatus.ERROR,
															"PopUp Name has been not been verified, Expected: "
																	+ expectedHeaderName,
															YesNo.No);
													sa.assertTrue(false,
															"PopUp Name has been not been verified, Expected: "
																	+ expectedHeaderName);
												}

												ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
														.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
																task1SubjectName, updatedNotesOfTask,
																updatedRelatedToArray);
												if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
													log(LogStatus.INFO,
															"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
															YesNo.No);

												} else {
													log(LogStatus.ERROR,
															"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason:"
																	+ NotesPopUpPrefilledNegativeResultUpdated,
															YesNo.No);
													sa.assertTrue(false,
															"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason:"
																	+ NotesPopUpPrefilledNegativeResultUpdated);
												}
											} else {
												log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
												sa.assertTrue(false, "Not able to click on Edit Note button");
											}

										} else {
											log(LogStatus.ERROR,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult + "------",
													YesNo.No);
											sa.assertTrue(false,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult + "------");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}
								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}
							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc005_CreateATaskWithoutMeetingNotesAndTagFromInteractionSectionByClickingOnEditNotesButton(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));
		String getAdvanceDueDate = AdvanceDueDate;
		String task1SubjectName = AMNNR_Subject6;
		String task1Notes = AMNNR_Notes6;
		String relatedTo = AMNNR_RelatedTo6;
		String[] relatedToArray = relatedTo.split("<break>", -1);
		String priority = AMNNR_AdvancePriority6;
		String status = AMNNR_AdvanceStatus6;
		String task1ButtonName = AMNNR_ActivityType1;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String recordName = AMNNR_Contact1;

		String updatedNotesOfTask = AMNNR_Notes7;
		String[] relatedToVerify = AMNNR_ATRelatedTo4.split("<break>");
		String[] updatedRelatedToVerify = AMNNR_ATRelatedTo5.split("<break>");

		String[][] task1UpdateBasicSection = { { AMNNR_TaskLabel2, updatedNotesOfTask } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag7.split("<break>", -1);

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Create Task: " + task1SubjectName + " in Activity Timeline Section---------",
				YesNo.No);

		CommonLib.refresh(driver);
		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Interaction Section---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab, recordName, 30)) {
				log(LogStatus.INFO, recordName + " record has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, relatedToVerify, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

						ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
								task1SubjectName, task1BasicSection, task1AdvancedSection, IconType.Task,
								PageName.AcuityDetails);

						if (subjectLinkPopUpNegativeResult.isEmpty()) {
							log(LogStatus.PASS, "------" + task1SubjectName
									+ " record is able to open popup after click on it and verify its data" + "------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------",
									YesNo.Yes);
							sa.assertTrue(false,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------");

						}

						String url = getURL(driver, 10);

						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							ThreadSleep(10000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1SubjectName, task1Notes,
											relatedToArray);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);
								sa.assertTrue(true,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
								refresh(driver);
								ThreadSleep(2000);
								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
											null, updatedSuggestedTags, null, false, null, null, null, null, null,
											null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);
										ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
												getAdvanceDueDate, IconType.Task, task1SubjectName, updatedNotesOfTask,
												true, false, updatedRelatedToVerify, null);
										if (updatedresult.isEmpty()) {
											log(LogStatus.PASS,
													"------" + task1SubjectName
															+ " record has been verified on intraction------",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult + "------",
													YesNo.No);
											sa.assertTrue(false,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult + "------");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}
								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}
							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value",
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value");
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record", YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record");
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj2, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj2);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc006_CreateATaskWithoutMeetingNotesAndAddTheNotesFromEditButton(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));
		String getAdvanceDueDate = AdvanceDueDate;
		String task1SubjectName = AMNNR_Subject8;
		String task1Notes = AMNNR_Notes8;
		String relatedTo = AMNNR_RelatedTo8;
		String priority = AMNNR_AdvancePriority8;
		String status = AMNNR_AdvanceStatus8;
		String task1ButtonName = AMNNR_ActivityType1;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String recordName = AMNNR_Contact2;

		String updatedNotesOfTask = AMNNR_Notes9;
		String[] relatedToVerify = AMNNR_ATRelatedTo6.split("<break>");
		String[] updatedRelatedToVerify = AMNNR_ATRelatedTo7.split("<break>");

		String[][] task1UpdateBasicSection = { { AMNNR_TaskLabel2, updatedNotesOfTask } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag9.split("<break>", -1);

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Create Task: " + task1SubjectName + " in Activity Timeline Section---------",
				YesNo.No);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Interaction Section---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab, recordName, 30)) {
				log(LogStatus.INFO, recordName + " record has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, relatedToVerify, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

						if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

							log(LogStatus.INFO,
									"-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
									YesNo.No);
							if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
									"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

								String url = getURL(driver, 10);

								ThreadSleep(10000);
								ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
										.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSection,
												task1AdvancedSection, null);
								if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
									log(LogStatus.INFO,
											"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
											YesNo.No);

									refresh(driver);
									ThreadSleep(2000);

									if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
											"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
										log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
										if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
												null, updatedSuggestedTags, null, false, null, null, null, null, null,
												null)) {
											log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

											CommonLib.refresh(driver);

											String url2 = getURL(driver, 10);

											if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
													"Edit Note Button of: " + task1SubjectName,
													action.SCROLLANDBOOLEAN)) {
												log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup",
														YesNo.No);

												ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
														.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
																task1UpdateBasicSection, task1AdvancedSection, null);
												if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
													log(LogStatus.INFO,
															"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
															YesNo.No);
													CommonLib.ThreadSleep(3000);

												} else {
													log(LogStatus.ERROR,
															"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																	+ NotesPopUpPrefilledNegativeResultUpdated,
															YesNo.No);
													sa.assertTrue(false,
															"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																	+ NotesPopUpPrefilledNegativeResultUpdated);

												}

											} else {
												log(LogStatus.ERROR,
														"Not able to click on Edit button on Subjec Link Popup of Task: "
																+ task1SubjectName,
														YesNo.No);
												sa.assertTrue(false,
														"Not able to click on Edit button on Subjec Link Popup of Task: "
																+ task1SubjectName);
											}

											if (lp.clickOnTab(projectName, tabObj2)) {

												log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

												if (BP.clickOnAlreadyCreated_Lighting(environment, mode,
														TabName.ContactTab, recordName, 30)) {
													log(LogStatus.INFO, recordName + " record has been open", YesNo.No);
													ThreadSleep(4000);
													if (BP.clicktabOnPage("Acuity")) {
														log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

														ArrayList<String> updatedresult = BP
																.verifyRecordOnInteractionCard(getAdvanceDueDate,
																		IconType.Task, task1SubjectName,
																		updatedNotesOfTask, true, false,
																		updatedRelatedToVerify, null);
														if (updatedresult.isEmpty()) {
															log(LogStatus.PASS, "------" + task1SubjectName
																	+ " record has been verified on intraction------",
																	YesNo.No);

														} else {
															log(LogStatus.ERROR, "------" + task1SubjectName
																	+ " record is not verified on intraction, Reason: "
																	+ updatedresult + "------", YesNo.No);
															sa.assertTrue(false, "------" + task1SubjectName
																	+ " record is not verified on intraction, Reason: "
																	+ updatedresult + "------");
														}

													} else {
														log(LogStatus.ERROR, "Not able to click on Acuity Tab",
																YesNo.No);
														sa.assertTrue(false, "Not able to click on Acuity Tab");
													}

												} else {
													log(LogStatus.ERROR, "Not able to open " + recordName + " record",
															YesNo.No);
													sa.assertTrue(false, "Not able to open " + recordName + " record");
												}
											} else {
												log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj2, YesNo.No);
												sa.assertTrue(false, "Not able to click on Tab : " + tabObj2);
											}

										} else {
											log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
											sa.assertTrue(false, "Activity timeline record has not Updated");
										}

									} else {
										log(LogStatus.ERROR,
												"Not able to click on Edit button on Subjec Link Popup of Task: "
														+ task1SubjectName,
												YesNo.No);
										sa.assertTrue(false,
												"Not able to click on Edit button on Subjec Link Popup of Task: "
														+ task1SubjectName);
									}

								} else {
									log(LogStatus.ERROR,
											"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
													+ NotesPopUpPrefilledNegativeResult,
											YesNo.No);
									sa.assertTrue(false,
											"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
													+ NotesPopUpPrefilledNegativeResult);
								}

							} else {
								log(LogStatus.ERROR, "Not able to click on Edit button on Subjec Link Popup of Task: "
										+ task1SubjectName, YesNo.No);
								sa.assertTrue(false, "Not able to click on Edit button on Subjec Link Popup of Task: "
										+ task1SubjectName);
							}

							driver.close();
							driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

						} else {

							log(LogStatus.ERROR,
									"-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
									YesNo.Yes);
							BaseLib.sa.assertTrue(false,
									"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record", YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record");
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj2, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj2);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc007_CreateATaskWithMeetingNotesAndAddTheNotesFromEditButtonOfTaskLayout(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("2"));
		String getAdvanceDueDate = AdvanceDueDate;
		String task1SubjectName = AMNNR_Subject10;
		String task1Notes = AMNNR_Notes10;
		String relatedTo = AMNNR_RelatedTo10;
		String priority = AMNNR_AdvancePriority10;
		String status = AMNNR_AdvanceStatus10;
		String task1ButtonName = AMNNR_ActivityType1;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };
		String[] suggestedTags = AMNNR_SuggestedTag10.split("<break>", -1);

		String RelatedToVerify = relatedTo + AMNNR_RelatedTo11;
		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, RelatedToVerify } };

		String recordName = AMNNR_Contact3;

		String updatedNotesOfTask = AMNNR_Notes11;
		String[] relatedToVerify = AMNNR_ATRelatedTo8.split("<break>");
		String[] updatedRelatedToVerify = AMNNR_ATRelatedTo9.split("<break>");

		String[][] task1UpdateBasicSection = { { AMNNR_TaskLabel2, updatedNotesOfTask } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag11.split("<break>", -1);

		String updatedRelatedToVerifyInNotes = RelatedToVerify + AMNNR_RelatedTo12;
		String[][] task1UpdatedBasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_TaskLabel3, updatedRelatedToVerifyInNotes } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Create Task: " + task1SubjectName + " in Activity Timeline Section---------",
				YesNo.No);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Interaction Section---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab, recordName, 30)) {
				log(LogStatus.INFO, recordName + " record has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, relatedToVerify, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

						if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

							log(LogStatus.INFO,
									"-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
									YesNo.No);
							if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
									"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

								String url = getURL(driver, 10);

								ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
										.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url,
												task1BasicSectionVerification, task1AdvancedSection, null);
								if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
									log(LogStatus.INFO,
											"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
											YesNo.No);

									refresh(driver);

									if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
											"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
										log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

										if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
												null, updatedSuggestedTags, null, false, null, null, null, null, null,
												null)) {
											log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

											CommonLib.refresh(driver);

											if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
													"Edit Note Button of: " + task1SubjectName,
													action.SCROLLANDBOOLEAN)) {
												log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup",
														YesNo.No);

												String url2 = getURL(driver, 10);

												ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
														.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
																task1UpdatedBasicSectionVerification,
																task1AdvancedSection, null);
												if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
													log(LogStatus.INFO,
															"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
															YesNo.No);

												} else {
													log(LogStatus.ERROR,
															"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																	+ NotesPopUpPrefilledNegativeResultUpdated,
															YesNo.No);
													sa.assertTrue(false,
															"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																	+ NotesPopUpPrefilledNegativeResultUpdated);

												}

											} else {
												log(LogStatus.ERROR,
														"Not able to click on Edit button on Subjec Link Popup of Task: "
																+ task1SubjectName,
														YesNo.No);
												sa.assertTrue(false,
														"Not able to click on Edit button on Subjec Link Popup of Task: "
																+ task1SubjectName);
											}

											if (lp.clickOnTab(projectName, tabObj2)) {

												log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

												if (BP.clickOnAlreadyCreated_Lighting(environment, mode,
														TabName.ContactTab, recordName, 30)) {
													log(LogStatus.INFO, recordName + " record has been open", YesNo.No);
													ThreadSleep(4000);
													if (BP.clicktabOnPage("Acuity")) {
														log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

														ArrayList<String> updatedresult = BP
																.verifyRecordOnInteractionCard(getAdvanceDueDate,
																		IconType.Task, task1SubjectName,
																		updatedNotesOfTask, true, false,
																		updatedRelatedToVerify, null);
														if (updatedresult.isEmpty()) {
															log(LogStatus.PASS, "------" + task1SubjectName
																	+ " record has been verified on intraction------",
																	YesNo.No);

														} else {
															log(LogStatus.ERROR, "------" + task1SubjectName
																	+ " record is not verified on intraction, Reason: "
																	+ updatedresult + "------", YesNo.No);
															sa.assertTrue(false, "------" + task1SubjectName
																	+ " record is not verified on intraction, Reason: "
																	+ updatedresult + "------");
														}

													} else {
														log(LogStatus.ERROR, "Not able to click on Acuity Tab",
																YesNo.No);
														sa.assertTrue(false, "Not able to click on Acuity Tab");
													}

												} else {
													log(LogStatus.ERROR, "Not able to open " + recordName + " record",
															YesNo.No);
													sa.assertTrue(false, "Not able to open " + recordName + " record");
												}
											} else {
												log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj2, YesNo.No);
												sa.assertTrue(false, "Not able to click on Tab : " + tabObj2);
											}

										} else {
											log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
											sa.assertTrue(false, "Activity timeline record has not Updated");
										}

									} else {
										log(LogStatus.ERROR,
												"Not able to click on Edit button on Subjec Link Popup of Task: "
														+ task1SubjectName,
												YesNo.No);
										sa.assertTrue(false,
												"Not able to click on Edit button on Subjec Link Popup of Task: "
														+ task1SubjectName);
									}

								} else {
									log(LogStatus.ERROR,
											"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
													+ NotesPopUpPrefilledNegativeResult,
											YesNo.No);
									sa.assertTrue(false,
											"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
													+ NotesPopUpPrefilledNegativeResult);
								}

							} else {
								log(LogStatus.ERROR, "Not able to click on Edit button on Subjec Link Popup of Task: "
										+ task1SubjectName, YesNo.No);
								sa.assertTrue(false, "Not able to click on Edit button on Subjec Link Popup of Task: "
										+ task1SubjectName);
							}

							driver.close();
							driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

						} else {

							log(LogStatus.ERROR,
									"-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
									YesNo.Yes);
							BaseLib.sa.assertTrue(false,
									"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record", YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record");
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}
		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc008_CreateATaskWithMeetingNotesAndUpdateTheNotesFromEditNoteButtonOnInteractionSectionOfAcuityTab(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));
		String getAdvanceDueDate = AdvanceDueDate;
		String task1SubjectName = AMNNR_Subject13;
		String task1Notes = AMNNR_Notes13;
		String relatedTo = AMNNR_RelatedTo13;

		String priority = AMNNR_AdvancePriority13;
		String status = AMNNR_AdvanceStatus13;
		String task1ButtonName = AMNNR_ActivityType1;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };
		String[] suggestedTags = null;

		String recordName = AMNNR_Contact4;

		String updatedNotesOfTask = AMNNR_Notes14;
		String[] relatedToVerify = AMNNR_ATRelatedTo10.split("<break>");
		String[] updatedRelatedToVerify = AMNNR_ATRelatedTo11.split("<break>");

		String updatedRelatedTo = relatedTo + AMNNR_RelatedTo14;
		String[][] task1UpdateBasicSection = { { AMNNR_TaskLabel2, updatedNotesOfTask } };
		String[][] task1UpdateBasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_TaskLabel3, updatedRelatedTo } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag14.split("<break>", -1);

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Create Task: " + task1SubjectName + " in Activity Timeline Section---------",
				YesNo.No);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Interaction Section---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab, recordName, 30)) {
				log(LogStatus.INFO, recordName + " record has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, relatedToVerify, null);
					if (result.isEmpty()) {

						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

						ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
								task1SubjectName, task1BasicSection, task1AdvancedSection, IconType.Task,
								PageName.AcuityDetails);

						if (subjectLinkPopUpNegativeResult.isEmpty()) {
							log(LogStatus.PASS, "------" + task1SubjectName
									+ " record is able to open popup after click on it and verify its data" + "------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------",
									YesNo.Yes);
							sa.assertTrue(false,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------");

						}

						String url = getURL(driver, 10);

						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							ThreadSleep(10000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSection,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);
								ThreadSleep(2000);
								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
											null, updatedSuggestedTags, null, false, null, null, null, null, null,
											null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);
										ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
												getAdvanceDueDate, IconType.Task, task1SubjectName, updatedNotesOfTask,
												true, false, updatedRelatedToVerify, null);
										if (updatedresult.isEmpty()) {
											log(LogStatus.PASS,
													"------" + task1SubjectName
															+ " record has been verified on intraction------",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult + "------",
													YesNo.No);
											sa.assertTrue(false,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult + "------");
										}

										String url2 = getURL(driver, 10);

										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											ThreadSleep(10000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															task1UpdateBasicSectionVerification, task1AdvancedSection,
															null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);
											}
										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}
								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}
							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record", YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record");
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc009_CreateATaskAndVerifyTaskHyperlinkUpdateTheTaskSubjectAndVerifyTheTaskHyperlink(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));
		String getAdvanceDueDate = AdvanceDueDate;
		String task1SubjectName = AMNNR_Subject15;
		String task1UpdatedSubjectName = AMNNR_Subject16;
		String task1Notes = AMNNR_Notes15;

		String relatedTo = AMNNR_RelatedTo15;

		String priority = AMNNR_AdvancePriority15;
		String status = AMNNR_AdvanceStatus15;
		String task1ButtonName = AMNNR_ActivityType1;
		String getAdvanceDueDateInTaskSection = "";

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String[][] tasksSectionVerificationData = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, "Not Started" },
				{ AMNNR_TaskLabel4, getAdvanceDueDateInTaskSection } };

		String[][] followUpTask1AdvancedSectionVerificationInNotesPopup = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, "Not Started" },
				{ AMNNR_TaskLabel6, priority } };

		String[][] task1UpdateBasicSectionVerification = { { AMNNR_TaskLabel1, task1UpdatedSubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, relatedTo } };

		String[][] updateFollowUpTask1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate } };

		String[] suggestedTags = null;

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;

		String[] relatedToVerify = AMNNR_ATRelatedTo12.split("<break>");

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO, "---------Now Going to Create Task: " + task1UpdatedSubjectName + " and followUp task: "
				+ task1SubjectName + " in Activity Timeline Section---------", YesNo.No);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();

			if (BP.createTasksWithVerificationOfFollowUpTaskSubjectNameAfterClickThenAgainUpdateTaskNameandVerifyFollowUpTaskSubjectName(
					projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection, suggestedTags,
					tasksSectionVerificationData, task1UpdatedSubjectName)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		log(LogStatus.INFO, "---------Now Going to Verify Task: " + task1UpdatedSubjectName + " and followUp task: "
				+ task1SubjectName + " in Interaction Section---------", YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					ArrayList<String> result2 = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1UpdatedSubjectName, task1Notes, true, false, relatedToVerify, null);
					if (result2.isEmpty()) {

						log(LogStatus.PASS,
								"------" + task1UpdatedSubjectName + " record has been verified on intraction------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR, "------" + task1UpdatedSubjectName
								+ " record is not verified on intraction, Reason: " + result2 + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1UpdatedSubjectName
								+ " record is not verified on intraction, Reason: " + result2 + "------");
					}

					CommonLib.refresh(driver);

					ThreadSleep(10000);
					if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

						log(LogStatus.INFO,
								"-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
								YesNo.No);
						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(5000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSection,
											followUpTask1AdvancedSectionVerificationInNotesPopup, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value for: "
												+ task1SubjectName,
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value for: "
												+ task1SubjectName + ", Reason: " + NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value for: "
												+ task1SubjectName + ", Reason: " + NotesPopUpPrefilledNegativeResult);

							}
							CommonLib.refresh(driver);

							if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
									"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

								if (BP.updateActivityTimelineRecordForMultipleFollowUpTasks(projectName, null,
										updateFollowUpTask1AdvancedSection, null, null, null, false, false)) {
									log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

								} else {
									log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
									sa.assertTrue(false, "Activity timeline record has not Updated");
								}

							} else {
								log(LogStatus.ERROR, "Not able to click on Edit button on Subjec Link Popup of Task: "
										+ task1SubjectName, YesNo.No);
								sa.assertTrue(false, "Not able to click on Edit button on Subjec Link Popup of Task: "
										+ task1SubjectName);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subjec Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subjec Link Popup of Task: "
									+ task1SubjectName);
						}

						driver.close();
						driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					} else {

						log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
								YesNo.Yes);
						BaseLib.sa.assertTrue(false,
								"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

					}

					if (lp.clickOnTab(projectName, tabObj1)) {

						log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

						if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType,
								recordName, 30)) {
							log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open",
									YesNo.No);
							ThreadSleep(4000);
							if (BP.clicktabOnPage("Acuity")) {
								log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

								String url2 = getURL(driver, 10);

								if (click(driver, BP.editButtonOnInteractionCard(task1UpdatedSubjectName, 20),
										"Edit Note Button of: " + task1UpdatedSubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

									ThreadSleep(10000);
									ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
											.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
													task1UpdateBasicSectionVerification, task1AdvancedSection, null);
									if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
										log(LogStatus.INFO,
												"Notes Popup has been verified and Notes popup is opening in same page with prefilled value for: "
														+ task1UpdatedSubjectName,
												YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value for: "
														+ task1UpdatedSubjectName + ", Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated,
												YesNo.No);
										sa.assertTrue(false,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value for: "
														+ task1UpdatedSubjectName + ", Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated);
									}
								} else {
									log(LogStatus.ERROR,
											"Not able to click on Edit Note button of " + task1UpdatedSubjectName,
											YesNo.No);
									sa.assertTrue(false,
											"Not able to click on Edit Note button of " + task1UpdatedSubjectName);
								}

							} else {
								log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
								sa.assertTrue(false, "Not able to click on Acuity Tab");
							}

						} else {
							log(LogStatus.ERROR,
									"Not able to open " + recordName + " record of record type " + recordType,
									YesNo.No);
							sa.assertTrue(false,
									"Not able to open " + recordName + " record of record type " + recordType);
						}
					} else {
						log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
						sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
					}

				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc010_CreateATaskWithMeetingNotesAndUpdateTheNotesForFollowUpTasksWhenCreatedMultipleFollowUpTasks(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("22"));

		ExcelUtils.writeData(AcuityDataSheetFilePath, AdvanceDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"AMNNR_Activity017", excelLabel.Advance_Due_Date);

		String getAdvanceDueDate = AdvanceDueDate;
		String task1SubjectName = AMNNR_Subject17;
		String task1Notes = AMNNR_Notes17;
		String relatedTo = AMNNR_RelatedTo17;

		String priority = AMNNR_AdvancePriority17;
		String status = AMNNR_AdvanceStatus17;
		String task1ButtonName = AMNNR_ActivityType1;
		String[] suggestedTags = "".split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;
		String task1UpdateTaskSection1Subject = AMNNR_Subject18;
		String task1UpdateTaskSection1DueDateOnly = AdvanceDueDate;
		String task1UpdateTaskSection2Subject = AMNNR_Subject19;
		String task1UpdateTaskSection2DueDateOnly = AdvanceDueDate;
		String task1UpdateTaskSection3Subject = AMNNR_Subject20;
		String task1UpdateTaskSection3DueDateOnly = AdvanceDueDate;

		String updatedNotesOfTask = AMNNR_Notes21;
		String[][] task1UpdateBasicSection = { { AMNNR_TaskLabel2, updatedNotesOfTask } };
		String[][] task1UpdateTaskSection1 = { { AMNNR_TaskLabel1, task1UpdateTaskSection1Subject },
				{ AMNNR_TaskLabel4, task1UpdateTaskSection1DueDateOnly } };
		String[][] task1UpdateTaskSection2 = { { AMNNR_TaskLabel1, task1UpdateTaskSection2Subject },
				{ AMNNR_TaskLabel4, task1UpdateTaskSection2DueDateOnly } };
		String[][] task1UpdateTaskSection3 = { { AMNNR_TaskLabel1, task1UpdateTaskSection3Subject },
				{ AMNNR_TaskLabel4, task1UpdateTaskSection3DueDateOnly } };
		String[][][] task1UpdateTaskSection = { task1UpdateTaskSection1, task1UpdateTaskSection2,
				task1UpdateTaskSection3 };

		String[] relatedToVerify = (crmUser1FirstName + " " + crmUser1LastName + AMNNR_ATRelatedTo13).split("<break>");
		String[] updatedRelatedToVerify = AMNNR_ATRelatedTo14.split("<break>", -1);

		String updatedRelatedTo = relatedTo + AMNNR_RelatedTo21;

		String[][] task1UpdateBasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_TaskLabel3, updatedRelatedTo } };

		String[][] followUptask1BasicSectionVerification = { { AMNNR_TaskLabel1, task1UpdateTaskSection1Subject },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_TaskLabel3, updatedRelatedTo } };
		String[][] followUptask2BasicSectionVerification = { { AMNNR_TaskLabel1, task1UpdateTaskSection2Subject },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_TaskLabel3, updatedRelatedTo } };
		String[][] followUptask3BasicSectionVerification = { { AMNNR_TaskLabel1, task1UpdateTaskSection3Subject },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_TaskLabel3, updatedRelatedTo } };

		String[][] followUptask1AdvanceSectionVerification = { { AMNNR_TaskLabel4, task1UpdateTaskSection1DueDateOnly },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, "Not Started" },
				{ AMNNR_TaskLabel6, priority } };

		String[][] followUptask2AdvanceSectionVerification = { { AMNNR_TaskLabel4, task1UpdateTaskSection2DueDateOnly },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, "Not Started" },
				{ AMNNR_TaskLabel6, priority } };

		String[][] followUptask3AdvanceSectionVerification = { { AMNNR_TaskLabel4, task1UpdateTaskSection3DueDateOnly },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, "Not Started" },
				{ AMNNR_TaskLabel6, priority } };

		String[] updatedSuggestedTags = AMNNR_SuggestedTag21.split("<break>", -1);

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Create Task: " + task1SubjectName + " in Activity Timeline Section---------",
				YesNo.No);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Interaction Section---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, relatedToVerify, null);
					if (result.isEmpty()) {

						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

						ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
								task1SubjectName, task1BasicSection, task1AdvancedSection, IconType.Task,
								PageName.AcuityDetails);

						if (subjectLinkPopUpNegativeResult.isEmpty()) {
							log(LogStatus.PASS, "------" + task1SubjectName
									+ " record is able to open popup after click on it and verify its data" + "------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------",
									YesNo.Yes);
							sa.assertTrue(false,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------");

						}

						String url = getURL(driver, 10);

						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							ThreadSleep(10000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSection,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);
								ThreadSleep(2000);
								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									if (BP.updateActivityTimelineRecordForMultipleFollowUpTasks(projectName,
											task1UpdateBasicSection, null, task1UpdateTaskSection, updatedSuggestedTags,
											null, false, false)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);
										ArrayList<String> updatedresult1 = BP.verifyRecordOnInteractionCard(
												getAdvanceDueDate, IconType.Task, task1SubjectName, updatedNotesOfTask,
												true, false, updatedRelatedToVerify, null);
										if (updatedresult1.isEmpty()) {
											log(LogStatus.PASS,
													"------" + task1SubjectName
															+ " record has been verified on intraction------",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult1 + "------",
													YesNo.No);
											sa.assertTrue(false,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult1 + "------");
										}

										ArrayList<String> updatedresult2 = BP.verifyRecordOnInteractionCard(
												task1UpdateTaskSection1DueDateOnly, null,
												task1UpdateTaskSection1Subject, updatedNotesOfTask, true, false,
												updatedRelatedToVerify, null);
										if (updatedresult2.isEmpty()) {
											log(LogStatus.PASS,
													"------" + task1UpdateTaskSection1Subject
															+ " record has been verified on intraction------",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1UpdateTaskSection1Subject
															+ " record is not verified on intraction, Reason: "
															+ updatedresult2 + "------",
													YesNo.No);
											sa.assertTrue(false,
													"------" + task1UpdateTaskSection1Subject
															+ " record is not verified on intraction, Reason: "
															+ updatedresult2 + "------");
										}

										ArrayList<String> updatedresult3 = BP.verifyRecordOnInteractionCard(
												task1UpdateTaskSection2DueDateOnly, IconType.Task,
												task1UpdateTaskSection2Subject, updatedNotesOfTask, true, false,
												updatedRelatedToVerify, null);
										if (updatedresult3.isEmpty()) {
											log(LogStatus.PASS,
													"------" + task1UpdateTaskSection2Subject
															+ " record has been verified on intraction------",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1UpdateTaskSection2Subject
															+ " record is not verified on intraction, Reason: "
															+ updatedresult3 + "------",
													YesNo.No);
											sa.assertTrue(false,
													"------" + task1UpdateTaskSection2Subject
															+ " record is not verified on intraction, Reason: "
															+ updatedresult3 + "------");
										}

										ArrayList<String> updatedresult4 = BP.verifyRecordOnInteractionCard(
												task1UpdateTaskSection3DueDateOnly, IconType.Task,
												task1UpdateTaskSection3Subject, updatedNotesOfTask, true, false,
												updatedRelatedToVerify, null);
										if (updatedresult4.isEmpty()) {
											log(LogStatus.PASS,
													"------" + task1UpdateTaskSection3Subject
															+ " record has been verified on intraction------",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1UpdateTaskSection3Subject
															+ " record is not verified on intraction, Reason: "
															+ updatedresult4 + "------",
													YesNo.No);
											sa.assertTrue(false,
													"------" + task1UpdateTaskSection3Subject
															+ " record is not verified on intraction, Reason: "
															+ updatedresult4 + "------");
										}

										String url2 = getURL(driver, 10);

										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											ThreadSleep(10000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated1 = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															task1UpdateBasicSectionVerification, task1AdvancedSection,
															null);
											if (NotesPopUpPrefilledNegativeResultUpdated1.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated1,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated1);
											}
										} else {
											log(LogStatus.ERROR,
													"Not able to click on Edit Note button " + task1SubjectName,
													YesNo.No);
											sa.assertTrue(false,
													"Not able to click on Edit Note button " + task1SubjectName);
										}

										CommonLib.refresh(driver);
										if (click(driver,
												BP.editButtonOnInteractionCard(task1UpdateTaskSection1Subject, 20),
												"Edit Note Button of: " + task1UpdateTaskSection1Subject,
												action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											ThreadSleep(10000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated2 = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															followUptask1BasicSectionVerification,
															followUptask1AdvanceSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated2.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated2,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated2);
											}
										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button :"
													+ task1UpdateTaskSection1Subject, YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button :"
													+ task1UpdateTaskSection1Subject);
										}

										CommonLib.refresh(driver);
										if (click(driver,
												BP.editButtonOnInteractionCard(task1UpdateTaskSection2Subject, 20),
												"Edit Note Button of: " + task1UpdateTaskSection2Subject,
												action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											ThreadSleep(10000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated3 = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															followUptask2BasicSectionVerification,
															followUptask2AdvanceSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated3.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated3,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated3);
											}
										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button "
													+ task1UpdateTaskSection2Subject, YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button "
													+ task1UpdateTaskSection2Subject);
										}

										CommonLib.refresh(driver);
										if (click(driver,
												BP.editButtonOnInteractionCard(task1UpdateTaskSection3Subject, 20),
												"Edit Note Button of: " + task1UpdateTaskSection3Subject,
												action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											ThreadSleep(10000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated4 = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															followUptask3BasicSectionVerification,
															followUptask3AdvanceSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated4.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated4,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated4);
											}
										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button "
													+ task1UpdateTaskSection3Subject, YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button "
													+ task1UpdateTaskSection3Subject);
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}
								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}
							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value",
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value");
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc011_ClickOnTheTaskSubjectFromInteractionSectionAndAddTheNotesByClickingOnTagButton(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);

		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String AdvanceDueDate = ExcelUtils.readData(AcuityDataSheetFilePath, "Activity Timeline",
				excelLabel.Variable_Name, "AMNNR_Activity017", excelLabel.Advance_Due_Date);
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject17;
		String task1Notes = AMNNR_Notes21;
		String relatedTo = AMNNR_RelatedTo17;

		String verificationRelatedTo = relatedTo + AMNNR_RelatedTo21;

		String priority = AMNNR_AdvancePriority17;
		String status = AMNNR_AdvanceStatus17;

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo14.split("<break>");
		String updatedRelatedTo = AMNNR_RelatedTo22;

		String[] updatedSuggestedTags = "".split("<break>", -1);

		String relatedToNotContains = crmUser2FirstName + " " + crmUser2LastName;
		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, relatedToNotContains } };

		String updatedRelatedToVerifyInNotes = verificationRelatedTo + "<break>" + updatedRelatedTo;

		String[][] task1UpdatedBasicSection = { { AMNNR_TaskLabel3, updatedRelatedTo } };
		String[][] task1UpdatedBasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, updatedRelatedToVerifyInNotes } };

		String[] updatedRelatedToVerify = AMNNR_ATRelatedTo15.split("<break>");

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

							log(LogStatus.INFO,
									"-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
									YesNo.No);
							if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
									"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
								String url = getURL(driver, 10);

								ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
										.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url,
												task1BasicSectionVerification, task1AdvancedSectionVerification, null);
								if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
									log(LogStatus.INFO,
											"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
											YesNo.No);

								} else {
									log(LogStatus.ERROR,
											"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
													+ NotesPopUpPrefilledNegativeResult,
											YesNo.No);
									sa.assertTrue(false,
											"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
													+ NotesPopUpPrefilledNegativeResult);
								}

								refresh(driver);

								if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

									ArrayList<String> verifyRelatedToNotContainsNegativeResults = BP
											.verifyRelatedToNotContains(relatedAssociationNotContains);
									if (verifyRelatedToNotContainsNegativeResults.isEmpty()) {
										log(LogStatus.INFO,
												"RelatedTo Association Not Contains some Records has been verified",
												YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"RelatedTo Association Not Contains some Records has not been verified, Reason: "
														+ verifyRelatedToNotContainsNegativeResults,
												YesNo.No);
										sa.assertTrue(false,
												"RelatedTo Association Not Contains some Records has not been verified, Reason: "
														+ verifyRelatedToNotContainsNegativeResults);
									}

								} else {
									log(LogStatus.ERROR,
											"Not able to click on Edit button on Subjec Link Popup of Task: "
													+ task1SubjectName,
											YesNo.No);
									sa.assertTrue(false,
											"Not able to click on Edit button on Subjec Link Popup of Task: "
													+ task1SubjectName);
								}
								refresh(driver);
								if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

									if (BP.updateActivityTimelineRecord(projectName, task1UpdatedBasicSection, null,
											null, updatedSuggestedTags, null, false, null, null, null, null, null,
											null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);

										if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup",
													YesNo.No);
											String url2 = getURL(driver, 10);

											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															task1UpdatedBasicSectionVerification,
															task1AdvancedSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);

											}

										} else {
											log(LogStatus.ERROR,
													"Not able to click on Edit button on Subjec Link Popup of Task: "
															+ task1SubjectName,
													YesNo.No);
											sa.assertTrue(false,
													"Not able to click on Edit button on Subjec Link Popup of Task: "
															+ task1SubjectName);
										}
										if (lp.clickOnTab(projectName, tabObj1)) {

											log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

											if (BP.clickOnAlreadyCreated_Lighting(environment, mode,
													TabName.InstituitonsTab, recordType, recordName, 30)) {
												log(LogStatus.INFO, recordName + " record of record type " + recordType
														+ " has been open", YesNo.No);
												ThreadSleep(4000);
												if (BP.clicktabOnPage("Acuity")) {
													log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

													ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
															getAdvanceDueDate, IconType.Task, task1SubjectName,
															task1Notes, true, false, updatedRelatedToVerify, null);
													if (updatedresult.isEmpty()) {
														log(LogStatus.PASS, "------" + task1SubjectName
																+ " record has been verified on intraction------",
																YesNo.No);

													} else {
														log(LogStatus.ERROR, "------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------", YesNo.No);
														sa.assertTrue(false, "------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------");
													}
												} else {
													log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
													sa.assertTrue(false, "Not able to click on Acuity Tab");
												}

											} else {
												log(LogStatus.ERROR, "Not able to open " + recordName
														+ " record of record type " + recordType, YesNo.No);
												sa.assertTrue(false, "Not able to open " + recordName
														+ " record of record type " + recordType);
											}
										} else {
											log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
											sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}

								} else {
									log(LogStatus.ERROR,
											"Not able to click on Edit button on Subjec Link Popup of Task: "
													+ task1SubjectName,
											YesNo.No);
									sa.assertTrue(false,
											"Not able to click on Edit button on Subjec Link Popup of Task: "
													+ task1SubjectName);
								}

							} else {
								log(LogStatus.ERROR, "Not able to click on Edit button on Subjec Link Popup of Task: "
										+ task1SubjectName, YesNo.No);
								sa.assertTrue(false, "Not able to click on Edit button on Subjec Link Popup of Task: "
										+ task1SubjectName);
							}

							driver.close();
							driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

						} else {

							log(LogStatus.ERROR,
									"-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
									YesNo.Yes);
							BaseLib.sa.assertTrue(false,
									"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc012_CreateATaskWithMeetingNotesAndUpdateTheSameWithRelatedRecordRemoveAndThenVerify(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("3"));

		ExcelUtils.writeData(AcuityDataSheetFilePath, AdvanceDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"AMNNR_Activity023", excelLabel.Advance_Due_Date);
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject23;
		String task1Notes = AMNNR_Notes23;
		String relatedTo = AMNNR_RelatedTo23;

		String priority = AMNNR_AdvancePriority23;
		String status = AMNNR_AdvanceStatus23;
		String task1ButtonName = AMNNR_ActivityType1;
		String[] suggestedTags = AMNNR_SuggestedTag23.split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String verificationRelatedTo = relatedTo + AMNNR_RelatedTo24;

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo16.split("<break>");

		String[] updatedRemoveRelatedAssociation = AMNNR_RelatedTo25.split("<break>", -1);

		String[] updatedSuggestedTags = null;

		String verificationUpdatedRelatedTo = AMNNR_RelatedTo26;

		String[][] task1UpdatedBasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, verificationUpdatedRelatedTo } };

		String[] updatedRelatedToVerifyInInteraction = AMNNR_ATRelatedTo17.split("<break>");

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO, "---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						String url = getURL(driver, 10);

						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							ThreadSleep(10000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);
								ThreadSleep(10000);

								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

									if (BP.updateActivityTimelineRecord(projectName, null, null, null,
											updatedSuggestedTags, updatedRemoveRelatedAssociation, false, null, null,
											null, null, null, null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);

										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											String url2 = getURL(driver, 10);

											ThreadSleep(10000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															task1UpdatedBasicSectionVerification,
															task1AdvancedSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);

											}

											CommonLib.refresh(driver);
											CommonLib.ThreadSleep(5000);
											ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
													getAdvanceDueDate, IconType.Task, task1SubjectName, task1Notes,
													true, false, updatedRelatedToVerifyInInteraction, null);
											if (updatedresult.isEmpty()) {
												log(LogStatus.PASS,
														"------" + task1SubjectName
																+ " record has been verified on intraction------",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------",
														YesNo.No);
												sa.assertTrue(false,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------");
											}

										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button for task: " + task1SubjectName,
									YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button for task: " + task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc013_CreateATaskAndTagContactsAccountsWhichAreNotCreatedInTheOrg(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("3"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject27;
		String task1Notes = AMNNR_Notes27;
		String relatedTo = AMNNR_RelatedTo27;

		String priority = AMNNR_AdvancePriority27;
		String status = AMNNR_AdvanceStatus27;
		String task1ButtonName = AMNNR_ActivityType1;
		String[] suggestedTags = AMNNR_SuggestedTag27.split("<break>", -1);
		String verificationRelatedTo = relatedTo + AMNNR_RelatedTo28;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo18.split("<break>");

		String relatedToNotContains = AMNNR_RelatedTo29;
		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, relatedToNotContains } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(10000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);

								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									ThreadSleep(10000);

									ArrayList<String> verifyRelatedToNotContainsNegativeResults = BP
											.verifyRelatedToNotContains(relatedAssociationNotContains);
									if (verifyRelatedToNotContainsNegativeResults.isEmpty()) {
										log(LogStatus.INFO,
												"RelatedTo Association Not Contains some Records has been verified",
												YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"RelatedTo Association Not Contains some Records has not been verified, Reason: "
														+ verifyRelatedToNotContainsNegativeResults,
												YesNo.No);
										sa.assertTrue(false,
												"RelatedTo Association Not Contains some Records has not been verified, Reason: "
														+ verifyRelatedToNotContainsNegativeResults);
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

								refresh(driver);
								ThreadSleep(10000);

								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

									String url2 = getURL(driver, 10);

									ThreadSleep(10000);
									ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
											.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
													task1BasicSectionVerification, task1AdvancedSectionVerification,
													null);
									if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
										log(LogStatus.INFO,
												"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
												YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated,
												YesNo.No);
										sa.assertTrue(false,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated);

									}

									CommonLib.refresh(driver);
									CommonLib.ThreadSleep(5000);
									ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
											getAdvanceDueDate, IconType.Task, task1SubjectName, task1Notes, true, false,
											RelatedToVerifyInInteraction, null);
									if (updatedresult.isEmpty()) {
										log(LogStatus.PASS, "------" + task1SubjectName
												+ " record has been verified on intraction------", YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"------" + task1SubjectName
														+ " record is not verified on intraction, Reason: "
														+ updatedresult + "------",
												YesNo.No);
										sa.assertTrue(false,
												"------" + task1SubjectName
														+ " record is not verified on intraction, Reason: "
														+ updatedresult + "------");
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc014_CreateATaskAndTagContact1to50InCommentSectionAndCheckInPopUpContact1To50ShouldGetDisplayWithoutAnyContactGetsMissout(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("3"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject30;
		String task1Notes = AMNNR_Notes30;
		String relatedTo = AMNNR_RelatedTo30;

		String priority = AMNNR_AdvancePriority30;
		String status = AMNNR_AdvanceStatus30;
		String task1ButtonName = AMNNR_ActivityType1;
		String[] suggestedTags = null;
		String verificationRelatedTo = relatedTo;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo19.split("<break>");

		String updatedNotesOfTask = AMNNR_Notes31;

		String[][] task1UpdateBasicSection = { { AMNNR_TaskLabel2, updatedNotesOfTask } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag31.split("<break>", -1);

		String[] updatedRelatedToVerifyInInteraction = AMNNR_ATRelatedTo20.split("<break>", -1);
		String[] updatedRelatedAssociationVerifyInInteraction = updatedSuggestedTags;

		String updatedRelatedToVerifyInNotes = (relatedTo + AMNNR_RelatedTo31);

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_TaskLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(10000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);

								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									ThreadSleep(10000);

									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
											null, updatedSuggestedTags, null, false, null, null, null, null, null,
											null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);

										ThreadSleep(10000);

										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											String url2 = getURL(driver, 10);

											ThreadSleep(10000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															updatedTask1BasicSectionVerification,
															updatedTask1AdvancedSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);

											}

											CommonLib.refresh(driver);
											CommonLib.ThreadSleep(5000);
											ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
													getAdvanceDueDate, null, task1SubjectName, updatedNotesOfTask, true,
													false, updatedRelatedToVerifyInInteraction,
													updatedRelatedAssociationVerifyInInteraction);
											if (updatedresult.isEmpty()) {
												log(LogStatus.PASS,
														"------" + task1SubjectName
																+ " record has been verified on intraction------",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------",
														YesNo.No);
												sa.assertTrue(false,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------");
											}

										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc015_CreateATaskAndTag13RecordsForRelatedAssociationAnd50Contacts(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("13"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject32;
		String task1Notes = AMNNR_Notes32;
		String relatedTo = AMNNR_RelatedTo32;

		String priority = AMNNR_AdvancePriority32;
		String status = AMNNR_AdvanceStatus32;
		String task1ButtonName = AMNNR_ActivityType1;
		String[] suggestedTags = null;
		String verificationRelatedTo = relatedTo;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String recordName = AMNNR_FirmLegalName2;
		String recordType = AMNNR_FirmRecordType2;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo21.split("<break>");

		String updatedNotesOfTask = AMNNR_Notes33;

		String[][] task1UpdateBasicSection = { { AMNNR_TaskLabel2, updatedNotesOfTask } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag33.split("<break>", -1);

		String[] updatedRelatedToVerifyInInteraction = AMNNR_ATRelatedTo22.split("<break>", -1);
		String[] updatedRelatedAssociationVerifyInInteraction = updatedSuggestedTags;

		String updatedRelatedToVerifyInNotes = (relatedTo + AMNNR_RelatedTo33);

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_TaskLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(10000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);

								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									ThreadSleep(10000);

									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
											null, updatedSuggestedTags, null, false, null, null, null, null, null,
											null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);

										ThreadSleep(10000);

										ArrayList<String> subjectLinkPopUpNegativeResult = BP
												.verifySubjectLinkPopUpOnIntraction(driver, task1SubjectName,
														updatedTask1BasicSectionVerification,
														updatedTask1AdvancedSectionVerification, IconType.Task,
														PageName.AcuityDetails);

										if (subjectLinkPopUpNegativeResult.isEmpty()) {
											log(LogStatus.PASS, "------" + task1SubjectName
													+ " record is able to open popup after click on it and verify its data"
													+ "------", YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1SubjectName
															+ " record link popup is not verified, Reason: "
															+ subjectLinkPopUpNegativeResult + "------",
													YesNo.Yes);
											sa.assertTrue(false,
													"------" + task1SubjectName
															+ " record link popup is not verified, Reason: "
															+ subjectLinkPopUpNegativeResult + "------");

										}

										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											String url2 = getURL(driver, 10);

											ThreadSleep(10000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															updatedTask1BasicSectionVerification,
															updatedTask1AdvancedSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);

											}

											CommonLib.refresh(driver);
											CommonLib.ThreadSleep(5000);
											ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
													getAdvanceDueDate, IconType.Task, task1SubjectName,
													updatedNotesOfTask, true, false,
													updatedRelatedToVerifyInInteraction,
													updatedRelatedAssociationVerifyInInteraction);
											if (updatedresult.isEmpty()) {
												log(LogStatus.PASS,
														"------" + task1SubjectName
																+ " record has been verified on intraction------",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------",
														YesNo.No);
												sa.assertTrue(false,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------");
											}

										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc016_CreateATaskWithMeetingNotesByTaggingCustomObjectsInIt(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("3"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject34;
		String task1Notes = AMNNR_Notes34;
		String relatedTo = AMNNR_RelatedTo34;

		String priority = AMNNR_AdvancePriority34;
		String status = AMNNR_AdvanceStatus34;
		String task1ButtonName = AMNNR_ActivityType1;
		String[] suggestedTags = AMNNR_SuggestedTag34.split("<break>", -1);
		String verificationRelatedTo = relatedTo + AMNNR_RelatedTo35;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String recordName = AMNNR_Contact4;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo23.split("<break>", -1);
		String[] RelatedAssociationVerifyInInteraction = (AMNNR_RelatedTo36).split("<break>", -1);

		String updatedNotesOfTask = AMNNR_Notes35;

		String[][] task1UpdateBasicSection = { { AMNNR_TaskLabel2, updatedNotesOfTask } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag35.split("<break>", -1);

		String[] updatedRelatedToVerifyInInteraction = AMNNR_ATRelatedTo24.split("<break>", -1);
		String[] updatedRelatedAssociationVerifyInInteraction = (AMNNR_RelatedTo37).split("<break>", -1);

		String updatedRelatedToVerifyInNotes = (verificationRelatedTo + AMNNR_RelatedTo38);

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_TaskLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab, recordName, 30)) {
				log(LogStatus.INFO, recordName + " record has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResultBeforeUpdate = BP
							.verifySubjectLinkPopUpOnIntraction(driver, task1SubjectName, task1BasicSectionVerification,
									task1AdvancedSectionVerification, IconType.Task, PageName.AcuityDetails);

					if (subjectLinkPopUpNegativeResultBeforeUpdate.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResultBeforeUpdate + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResultBeforeUpdate + "------");

					}

					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction,
							RelatedAssociationVerifyInInteraction);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(10000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);

								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									ThreadSleep(10000);

									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
											null, updatedSuggestedTags, null, false, null, null, null, null, null,
											null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);

										ThreadSleep(10000);

										ArrayList<String> subjectLinkPopUpNegativeResult = BP
												.verifySubjectLinkPopUpOnIntraction(driver, task1SubjectName,
														updatedTask1BasicSectionVerification,
														updatedTask1AdvancedSectionVerification, IconType.Task,
														PageName.AcuityDetails);

										if (subjectLinkPopUpNegativeResult.isEmpty()) {
											log(LogStatus.PASS, "------" + task1SubjectName
													+ " record is able to open popup after click on it and verify its data"
													+ "------", YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1SubjectName
															+ " record link popup is not verified, Reason: "
															+ subjectLinkPopUpNegativeResult + "------",
													YesNo.Yes);
											sa.assertTrue(false,
													"------" + task1SubjectName
															+ " record link popup is not verified, Reason: "
															+ subjectLinkPopUpNegativeResult + "------");

										}

										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											String url2 = getURL(driver, 10);

											ThreadSleep(10000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															updatedTask1BasicSectionVerification,
															updatedTask1AdvancedSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);

											}

											CommonLib.refresh(driver);
											CommonLib.ThreadSleep(5000);
											ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
													getAdvanceDueDate, IconType.Task, task1SubjectName,
													updatedNotesOfTask, true, false,
													updatedRelatedToVerifyInInteraction,
													updatedRelatedAssociationVerifyInInteraction);
											if (updatedresult.isEmpty()) {
												log(LogStatus.PASS,
														"------" + task1SubjectName
																+ " record has been verified on intraction------",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------",
														YesNo.No);
												sa.assertTrue(false,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------");
											}

										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record", YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record");
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj2, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj2);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc017_VerifyRemovingSomeOfTheTaggedFromNotesPopUpAndVerifyTheSameInInteractionSection(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("4"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject39;
		String task1Notes = AMNNR_Notes39;
		String relatedTo = AMNNR_RelatedTo39;

		String priority = AMNNR_AdvancePriority39;
		String status = AMNNR_AdvanceStatus39;
		String task1ButtonName = AMNNR_ActivityType1;
		String[] suggestedTags = AMNNR_SuggestedTag39.split("<break>", -1);
		String verificationRelatedTo = relatedTo + AMNNR_RelatedTo40;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo25.split("<break>", -1);

		String updatedNotesOfTask = null;

		String[][] task1UpdateBasicSection = null;
		String[] updatedSuggestedTags = "".split("<break>", -1);
		String[] updatedRemoveRelatedAssociation = AMNNR_ARelatedAsso25.split("<break>", -1);
		String[] updatedRelatedToVerifyInInteraction = AMNNR_ATRelatedTo26.split("<break>", -1);
		String[] updatedRelatedAssociationVerifyInInteraction = AMNNR_ARelatedAsso26.split("<break>", -1);

		String updatedRelatedToVerifyInNotes = AMNNR_RelatedTo41;

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(10000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);

								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									ThreadSleep(10000);

									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
											null, updatedSuggestedTags, updatedRemoveRelatedAssociation, false, null,
											null, null, null, null, null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);

										ThreadSleep(10000);

										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											String url2 = getURL(driver, 10);

											ThreadSleep(10000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															updatedTask1BasicSectionVerification,
															updatedTask1AdvancedSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);

											}

											CommonLib.refresh(driver);
											CommonLib.ThreadSleep(5000);
											ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
													getAdvanceDueDate, IconType.Task, task1SubjectName,
													updatedNotesOfTask, true, false,
													updatedRelatedToVerifyInInteraction,
													updatedRelatedAssociationVerifyInInteraction);
											if (updatedresult.isEmpty()) {
												log(LogStatus.PASS,
														"------" + task1SubjectName
																+ " record has been verified on intraction------",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------",
														YesNo.No);
												sa.assertTrue(false,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------");
											}

										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc018_VerifyChangingTheStatusOfTaskFromAdvancedSectionOfNotesPopUpAndItsEffectOnInteractionSection(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
		ExcelUtils.writeData(AcuityDataSheetFilePath, AdvanceDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"AMNNR_Activity042", excelLabel.Advance_Due_Date);

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject42;
		String task1Notes = AMNNR_Notes42;
		String relatedTo = AMNNR_RelatedTo42;

		String priority = AMNNR_AdvancePriority42;
		String status = AMNNR_AdvanceStatus42;
		String task1ButtonName = AMNNR_ActivityType1;
		String[] suggestedTags = AMNNR_SuggestedTag42.split("<break>", -1);
		String verificationRelatedTo = relatedTo + AMNNR_RelatedTo43;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String recordName = AMNNR_FirmLegalName4;
		String recordType = AMNNR_FirmRecordType4;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo27.split("<break>", -1);

		String updatedNotesOfTask = task1Notes;
		String updatedStatus = AMNNR_AdvanceStatus43;
		String[][] task1UpdateBasicSection = null;
		String[][] task1UpdateAdvancedSection = { { AMNNR_TaskLabel5, updatedStatus } };

		String[] updatedSuggestedTags = "".split("<break>", -1);

		String[] updatedRelatedToVerifyInInteraction = RelatedToVerifyInInteraction;
		String[] updatedRelatedAssociationVerifyInInteraction = AMNNR_ARelatedAsso27.split("<break>", -1);

		String updatedRelatedToVerifyInNotes = verificationRelatedTo;

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_TaskLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, updatedStatus },
				{ AMNNR_TaskLabel6, priority } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(10000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);

								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									ThreadSleep(10000);

									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection,
											task1UpdateAdvancedSection, null, updatedSuggestedTags, null, false, null,
											null, null, null, null, null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);

										ThreadSleep(10000);

										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											String url2 = getURL(driver, 10);

											ThreadSleep(10000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															updatedTask1BasicSectionVerification,
															updatedTask1AdvancedSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);

											}

											CommonLib.refresh(driver);
											CommonLib.ThreadSleep(5000);
											ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
													getAdvanceDueDate, IconType.Task, task1SubjectName,
													updatedNotesOfTask, true, false,
													updatedRelatedToVerifyInInteraction,
													updatedRelatedAssociationVerifyInInteraction);
											if (updatedresult.isEmpty()) {
												log(LogStatus.PASS,
														"------" + task1SubjectName
																+ " record has been verified on intraction------",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------",
														YesNo.No);
												sa.assertTrue(false,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------");
											}

										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc019_VerifyChangingTheDueDateToFutureOfTaskFromAdvancedSectionOfNotesPopUpAndItsEffectOnInteractionSection(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);

		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = ExcelUtils.readData(AcuityDataSheetFilePath, "Activity Timeline",
				excelLabel.Variable_Name, "AMNNR_Activity042", excelLabel.Advance_Due_Date);
		String getUpdatedAdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy",
				Integer.parseInt("1"));
		ExcelUtils.writeData(AcuityDataSheetFilePath, getUpdatedAdvanceDueDate, "Activity Timeline",
				excelLabel.Variable_Name, "AMNNR_Activity043", excelLabel.Advance_Due_Date);
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject42;
		String task1Notes = AMNNR_Notes42;
		String relatedTo = AMNNR_ARelatedAsso27;

		String priority = AMNNR_AdvancePriority42;
		String status = AMNNR_AdvanceStatus43;

		String verificationRelatedTo = relatedTo;

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String recordName = AMNNR_FirmLegalName4;
		String recordType = AMNNR_FirmRecordType4;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo27.split("<break>", -1);

		String updatedNotesOfTask = task1Notes;

		String[][] task1UpdateBasicSection = null;
		String[][] task1UpdateAdvancedSection = { { AMNNR_TaskLabel4, getUpdatedAdvanceDueDate } };

		String[] updatedSuggestedTags = "".split("<break>", -1);

		String[] updatedRelatedToVerifyInInteraction = RelatedToVerifyInInteraction;
		String[] updatedRelatedAssociationVerifyInInteraction = AMNNR_ARelatedAsso27.split("<break>", -1);

		String updatedRelatedToVerifyInNotes = verificationRelatedTo;

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_TaskLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getUpdatedAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(10000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);

								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									ThreadSleep(10000);

									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection,
											task1UpdateAdvancedSection, null, updatedSuggestedTags, null, false, null,
											null, null, null, null, null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);

										ThreadSleep(10000);

										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											String url2 = getURL(driver, 10);

											ThreadSleep(10000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															updatedTask1BasicSectionVerification,
															updatedTask1AdvancedSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);

											}

											CommonLib.refresh(driver);
											CommonLib.ThreadSleep(5000);
											ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
													getUpdatedAdvanceDueDate, IconType.Task, task1SubjectName,
													updatedNotesOfTask, true, false,
													updatedRelatedToVerifyInInteraction,
													updatedRelatedAssociationVerifyInInteraction);
											if (updatedresult.isEmpty()) {
												log(LogStatus.PASS,
														"------" + task1SubjectName
																+ " record has been verified on intraction------",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------",
														YesNo.No);
												sa.assertTrue(false,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------");
											}

										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc020_VerifyChangingTheAssigneeOfTaskFromAdvancedSectionOfNotesPopUpAndItsEffectOnInteractionSection(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);

		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = ExcelUtils.readData(AcuityDataSheetFilePath, "Activity Timeline",
				excelLabel.Variable_Name, "AMNNR_Activity043", excelLabel.Advance_Due_Date);

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject42;
		String task1Notes = AMNNR_Notes42;
		String relatedTo = AMNNR_ARelatedAsso27;

		String priority = AMNNR_AdvancePriority42;
		String status = AMNNR_AdvanceStatus43;

		String verificationRelatedTo = relatedTo;

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String recordName = AMNNR_FirmLegalName4;
		String recordType = AMNNR_FirmRecordType4;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo27.split("<break>", -1);

		String updatedNotesOfTask = task1Notes;

		String[][] task1UpdateBasicSection = null;
		String[][] task1UpdateAdvancedSection = { { AMNNR_TaskLabel7, crmUser2FirstName + " " + crmUser2LastName } };

		String[] updatedSuggestedTags = "".split("<break>", -1);

		String[] updatedRelatedToVerifyInInteraction = RelatedToVerifyInInteraction;
		String[] updatedRelatedAssociationVerifyInInteraction = AMNNR_ARelatedAsso27.split("<break>", -1);

		String updatedRelatedToVerifyInNotes = verificationRelatedTo;

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_TaskLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser2FirstName + " " + crmUser2LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(10000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);

								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									ThreadSleep(10000);

									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection,
											task1UpdateAdvancedSection, null, updatedSuggestedTags, null, false, null,
											null, null, null, null, null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);

										ThreadSleep(10000);

										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											String url2 = getURL(driver, 10);

											ThreadSleep(10000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															updatedTask1BasicSectionVerification,
															updatedTask1AdvancedSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);

											}

											CommonLib.refresh(driver);
											CommonLib.ThreadSleep(5000);
											ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
													getAdvanceDueDate, IconType.Task, task1SubjectName,
													updatedNotesOfTask, true, false,
													updatedRelatedToVerifyInInteraction,
													updatedRelatedAssociationVerifyInInteraction);
											if (updatedresult.isEmpty()) {
												log(LogStatus.PASS,
														"------" + task1SubjectName
																+ " record has been verified on intraction------",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------",
														YesNo.No);
												sa.assertTrue(false,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------");
											}

										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc021_VerifyChangingTheSubjectOfTaskFromNotesPopUpAndItsEffectOnInteractionSection(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);

		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = ExcelUtils.readData(AcuityDataSheetFilePath, "Activity Timeline",
				excelLabel.Variable_Name, "AMNNR_Activity043", excelLabel.Advance_Due_Date);

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject42;
		String task1Notes = AMNNR_Notes42;
		String relatedTo = AMNNR_ARelatedAsso27;

		String priority = AMNNR_AdvancePriority42;
		String status = AMNNR_AdvanceStatus43;

		String verificationRelatedTo = relatedTo;

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser2FirstName + " " + crmUser2LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String recordName = AMNNR_FirmLegalName4;
		String recordType = AMNNR_FirmRecordType4;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo27.split("<break>", -1);

		String updatedNotesOfTask = task1Notes;

		String task1UpdatedSubjectName = AMNNR_Subject44;
		String[][] task1UpdateBasicSection = { { AMNNR_TaskLabel1, task1UpdatedSubjectName } };

		String[][] task1UpdateAdvancedSection = null;

		String[] updatedSuggestedTags = "".split("<break>", -1);

		String[] updatedRelatedToVerifyInInteraction = RelatedToVerifyInInteraction;
		String[] updatedRelatedAssociationVerifyInInteraction = AMNNR_ARelatedAsso27.split("<break>", -1);

		String updatedRelatedToVerifyInNotes = verificationRelatedTo;

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_TaskLabel1, task1UpdatedSubjectName },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_TaskLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser2FirstName + " " + crmUser2LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}

					if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
							"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

						String url = getURL(driver, 10);

						ThreadSleep(10000);
						ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
								.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
										task1AdvancedSectionVerification, null);
						if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
							log(LogStatus.INFO,
									"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
											+ NotesPopUpPrefilledNegativeResult,
									YesNo.No);
							sa.assertTrue(false,
									"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
											+ NotesPopUpPrefilledNegativeResult);
						}

						refresh(driver);

						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
							ThreadSleep(10000);

							if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection,
									task1UpdateAdvancedSection, null, updatedSuggestedTags, null, false, null, null,
									null, null, null, null)) {
								log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

								CommonLib.refresh(driver);

								ThreadSleep(10000);

								if (click(driver, BP.editButtonOnInteractionCard(task1UpdatedSubjectName, 20),
										"Edit Note Button of: " + task1UpdatedSubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

									String url2 = getURL(driver, 10);

									ThreadSleep(10000);
									ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
											.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
													updatedTask1BasicSectionVerification,
													updatedTask1AdvancedSectionVerification, null);
									if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
										log(LogStatus.INFO,
												"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
												YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated,
												YesNo.No);
										sa.assertTrue(false,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated);

									}

								} else {
									log(LogStatus.ERROR,
											"Not able to click on Edit Note button of Task: " + task1UpdatedSubjectName,
											YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button of Task: "
											+ task1UpdatedSubjectName);
								}

								CommonLib.refresh(driver);

								if (BP.subjectOfInteractionCard(task1SubjectName, 7) == null) {
									log(LogStatus.INFO,
											"Verified: After Update the Name of Subject to " + task1UpdatedSubjectName
													+ ", Previous Named: " + task1SubjectName
													+ " Interaction card should not be there",
											YesNo.No);
								} else {
									log(LogStatus.ERROR,
											"After Update the Name of Subject to " + task1UpdatedSubjectName
													+ ", Previous Named: " + task1SubjectName
													+ " Interaction card is showing, which should not be there",
											YesNo.No);
									sa.assertTrue(false,
											"After Update the Name of Subject to " + task1UpdatedSubjectName
													+ ", Previous Named: " + task1SubjectName
													+ " Interaction card is showing, which should not be there");
								}

								ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(getAdvanceDueDate,
										IconType.Task, task1UpdatedSubjectName, updatedNotesOfTask, true, false,
										updatedRelatedToVerifyInInteraction,
										updatedRelatedAssociationVerifyInInteraction);
								if (updatedresult.isEmpty()) {
									log(LogStatus.PASS, "------" + task1SubjectName
											+ " record has been verified on intraction------", YesNo.No);

								} else {
									log(LogStatus.ERROR,
											"------" + task1SubjectName
													+ " record is not verified on intraction, Reason: " + updatedresult
													+ "------",
											YesNo.No);
									sa.assertTrue(false,
											"------" + task1SubjectName
													+ " record is not verified on intraction, Reason: " + updatedresult
													+ "------");
								}

							} else {
								log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
								sa.assertTrue(false, "Activity timeline record has not Updated");
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
						sa.assertTrue(false, "Not able to click on Edit Note button");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc022_VerifyWhenTheOrgHasSameDealNameAsOfTheCompanyNameAndIsTaggedInTheTask(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
		String getAdvanceDueDate = AdvanceDueDate;
		String task1SubjectName = AMNNR_Subject45;
		String task1Notes = AMNNR_Notes45;
		String relatedTo = AMNNR_RelatedTo45;

		String priority = AMNNR_AdvancePriority45;
		String status = AMNNR_AdvanceStatus45;
		String task1ButtonName = AMNNR_ActivityType1;

		String[] SuggestedTags = AMNNR_SuggestedTag45.split("<break>", -1);

		String verificationRelatedTo = relatedTo + AMNNR_RelatedTo46;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String recordName = AMNNR_FirmLegalName5;
		String recordType = AMNNR_FirmRecordType5;

		String[] RelatedToVerifyInInteraction = (crmUser1FirstName + " " + crmUser1LastName + AMNNR_ATRelatedTo28)
				.split("<break>", -1);

		String updatedNotesOfTask = AMNNR_Notes46;

		String[][] task1UpdateBasicSection = { { AMNNR_TaskLabel2, updatedNotesOfTask } };

		String[] updatedSuggestedTags = AMNNR_SuggestedTag46.split("<break>", -1);

		String[] updatedRelatedToVerifyInInteraction = AMNNR_ATRelatedTo29.split("<break>", -1);
		String[] updatedRelatedAssociationVerifyInInteraction = null;

		String updatedRelatedToVerifyInNotes = (AMNNR_RelatedTo47 + "<break>" + AMNNR_SuggestedTag46);

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_TaskLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Create Task: " + task1SubjectName + " in Activity Timeline Section---------",
				YesNo.No);

		CommonLib.refresh(driver);
		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(10000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

							refresh(driver);

							if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
									"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
								ThreadSleep(10000);

								if (BP.updateActivityTimelineRecordForMultipleFollowUpTasksAndVerifyUIOfSuggestedTags(
										projectName, task1UpdateBasicSection, null, null, updatedSuggestedTags, null)) {
									log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

									CommonLib.refresh(driver);

									ThreadSleep(10000);

									ArrayList<String> subjectLinkPopUpNegativeResult = BP
											.verifySubjectLinkPopUpOnIntraction(driver, task1SubjectName,
													updatedTask1BasicSectionVerification,
													updatedTask1AdvancedSectionVerification, IconType.Task,
													PageName.AcuityDetails);

									if (subjectLinkPopUpNegativeResult.isEmpty()) {
										log(LogStatus.PASS, "------" + task1SubjectName
												+ " record is able to open popup after click on it and verify its data"
												+ "------", YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"------" + task1SubjectName
														+ " record link popup is not verified, Reason: "
														+ subjectLinkPopUpNegativeResult + "------",
												YesNo.Yes);
										sa.assertTrue(false,
												"------" + task1SubjectName
														+ " record link popup is not verified, Reason: "
														+ subjectLinkPopUpNegativeResult + "------");

									}

									if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
											"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
										log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

										String url2 = getURL(driver, 10);

										ThreadSleep(10000);
										ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
												.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
														updatedTask1BasicSectionVerification,
														updatedTask1AdvancedSectionVerification, null);
										if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
											log(LogStatus.INFO,
													"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
															+ NotesPopUpPrefilledNegativeResultUpdated,
													YesNo.No);
											sa.assertTrue(false,
													"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
															+ NotesPopUpPrefilledNegativeResultUpdated);

										}

									} else {
										log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
										sa.assertTrue(false, "Not able to click on Edit Note button");
									}

									CommonLib.refresh(driver);
									CommonLib.ThreadSleep(5000);
									ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
											getAdvanceDueDate, IconType.Task, task1SubjectName, updatedNotesOfTask,
											true, false, updatedRelatedToVerifyInInteraction,
											updatedRelatedAssociationVerifyInInteraction);
									if (updatedresult.isEmpty()) {
										log(LogStatus.PASS, "------" + task1SubjectName
												+ " record has been verified on intraction------", YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"------" + task1SubjectName
														+ " record is not verified on intraction, Reason: "
														+ updatedresult + "------",
												YesNo.No);
										sa.assertTrue(false,
												"------" + task1SubjectName
														+ " record is not verified on intraction, Reason: "
														+ updatedresult + "------");
									}

								} else {
									log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
									sa.assertTrue(false, "Activity timeline record has not Updated");
								}

							} else {
								log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
								sa.assertTrue(false, "Not able to click on Edit Note button");
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc023_VerifyWhenUserTagsAccountsAndContactsInNotesTextAreaAndClicksOnCloseButtonOrCrossIcon(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("4"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject48;
		String task1Notes = AMNNR_Notes48;
		String relatedTo = AMNNR_RelatedTo48;

		String priority = AMNNR_AdvancePriority48;
		String status = AMNNR_AdvanceStatus48;
		String task1ButtonName = AMNNR_ActivityType1;
		String[] suggestedTags = null;
		String verificationRelatedTo = relatedTo;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo30.split("<break>", -1);

		String updatedNotesOfTask = task1Notes;

		String updatedRelatedToInNotes = AMNNR_RelatedTo49;
		String[][] task1UpdateBasicSection = { { AMNNR_TaskLabel3, updatedRelatedToInNotes } };

		String[] updatedSuggestedTags = null;

		String[] updatedRelatedToVerifyInInteraction = RelatedToVerifyInInteraction;
		String[] updatedRelatedAssociationVerifyInInteraction = AMNNR_ARelatedAsso30.split("<break>", -1);

		String updatedRelatedToVerifyInNotes = verificationRelatedTo;

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_TaskLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);
		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Task,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
					if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
							"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

						String url = getURL(driver, 10);

						ThreadSleep(10000);
						ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
								.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
										task1AdvancedSectionVerification, null);
						if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
							log(LogStatus.INFO,
									"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
									YesNo.No);

							refresh(driver);

							if (BP.crossIconButtonInNotePopUp(5) != null) {
								click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
										action.SCROLLANDBOOLEAN);
							}

							if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
									"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

								ThreadSleep(1000);

								if (BP.updateActivityTimelineRecordForMultipleFollowUpTasks(projectName,
										task1UpdateBasicSection, null, null, updatedSuggestedTags, null, true, false)) {
									log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

									CommonLib.refresh(driver);

									if (BP.crossIconButtonInNotePopUp(5) != null) {
										click(driver, BP.crossIconButtonInNotePopUp(20),
												"Clicked on Cross Icon of PopUp", action.SCROLLANDBOOLEAN);
									}

									if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
											"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
										log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

										String url2 = getURL(driver, 10);

										ThreadSleep(10000);
										ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
												.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
														updatedTask1BasicSectionVerification,
														updatedTask1AdvancedSectionVerification, null);
										if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
											log(LogStatus.INFO,
													"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
															+ NotesPopUpPrefilledNegativeResultUpdated,
													YesNo.No);
											sa.assertTrue(false,
													"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
															+ NotesPopUpPrefilledNegativeResultUpdated);

										}

									} else {
										log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
										sa.assertTrue(false, "Not able to click on Edit Note button");
									}

									CommonLib.refresh(driver);
									CommonLib.ThreadSleep(5000);
									ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
											getAdvanceDueDate, IconType.Task, task1SubjectName, updatedNotesOfTask,
											true, false, updatedRelatedToVerifyInInteraction,
											updatedRelatedAssociationVerifyInInteraction);
									if (updatedresult.isEmpty()) {
										log(LogStatus.PASS, "------" + task1SubjectName
												+ " record has been verified on intraction------", YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"------" + task1SubjectName
														+ " record is not verified on intraction, Reason: "
														+ updatedresult + "------",
												YesNo.No);
										sa.assertTrue(false,
												"------" + task1SubjectName
														+ " record is not verified on intraction, Reason: "
														+ updatedresult + "------");
									}

								} else {
									log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
									sa.assertTrue(false, "Activity timeline record has not Updated");
								}

							} else {
								log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
								sa.assertTrue(false, "Not able to click on Edit Note button");
							}

							refresh(driver);

							if (BP.crossIconButtonInNotePopUp(5) != null) {
								click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
										action.SCROLLANDBOOLEAN);
							}
							if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
									"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
								ThreadSleep(1000);

								if (BP.updateActivityTimelineRecordForMultipleFollowUpTasks(projectName,
										task1UpdateBasicSection, null, null, updatedSuggestedTags, null, false, true)) {
									log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

									CommonLib.refresh(driver);

									ThreadSleep(1000);

									if (BP.crossIconButtonInNotePopUp(5) != null) {
										click(driver, BP.crossIconButtonInNotePopUp(20),
												"Clicked on Cross Icon of PopUp", action.SCROLLANDBOOLEAN);
									}
									if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
											"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
										log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

										String url2 = getURL(driver, 10);

										ThreadSleep(10000);
										ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
												.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
														updatedTask1BasicSectionVerification,
														updatedTask1AdvancedSectionVerification, null);
										if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
											log(LogStatus.INFO,
													"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
															+ NotesPopUpPrefilledNegativeResultUpdated,
													YesNo.No);
											sa.assertTrue(false,
													"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
															+ NotesPopUpPrefilledNegativeResultUpdated);

										}

									} else {
										log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
										sa.assertTrue(false, "Not able to click on Edit Note button");
									}

									CommonLib.refresh(driver);
									CommonLib.ThreadSleep(5000);
									ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
											getAdvanceDueDate, IconType.Task, task1SubjectName, updatedNotesOfTask,
											true, false, updatedRelatedToVerifyInInteraction,
											updatedRelatedAssociationVerifyInInteraction);
									if (updatedresult.isEmpty()) {
										log(LogStatus.PASS, "------" + task1SubjectName
												+ " record has been verified on intraction------", YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"------" + task1SubjectName
														+ " record is not verified on intraction, Reason: "
														+ updatedresult + "------",
												YesNo.No);
										sa.assertTrue(false,
												"------" + task1SubjectName
														+ " record is not verified on intraction, Reason: "
														+ updatedresult + "------");
									}

								} else {
									log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
									sa.assertTrue(false, "Activity timeline record has not Updated");
								}

							} else {
								log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
								sa.assertTrue(false, "Not able to click on Edit Note button");
							}

						} else {
							log(LogStatus.ERROR,
									"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
											+ NotesPopUpPrefilledNegativeResult,
									YesNo.No);
							sa.assertTrue(false,
									"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
											+ NotesPopUpPrefilledNegativeResult);
						}

					} else {
						log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
						sa.assertTrue(false, "Not able to click on Edit Note button");
					}

				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Deprecated
	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc024_VerifyWhenEditButtonIsClickedForTheTaskHavingFollowUpTaskAndIsDeletedFromTaskDetailPage(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1SubjectName = AMNNR_Subject17;

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Note PopUp Section---------", YesNo.No);

		if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

			log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
					YesNo.No);

			if (click(driver, taskBP.downArrowButton(20), "downArrowButton", action.SCROLLANDBOOLEAN)) {
				log(LogStatus.INFO, "Clicked on Down Arrow Button", YesNo.No);

				if (click(driver, taskBP.buttonInTheDownArrowList("Delete", 20), "Delete Button in downArrowButton",
						action.SCROLLANDBOOLEAN)) {
					log(LogStatus.INFO, "Clicked on Delete Button in  Down Arrow Button", YesNo.No);

					if (click(driver, taskBP.taskDeleteConfirmButton(15), "Delete Button in downArrowButton",
							action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Delete Confirm Button", YesNo.No);

						if (taskBP.taskDeletedMsg(15) != null) {
							log(LogStatus.INFO, "Task Delete Msg displayed, So Task has been deleted", YesNo.No);

							log(LogStatus.INFO, "---------Now Going to Verify Task: " + task1SubjectName
									+ " is present or not in Interaction Section---------", YesNo.No);
							if (lp.clickOnTab(projectName, tabObj1)) {

								log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

								if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
										recordType, recordName, 30)) {
									log(LogStatus.INFO,
											recordName + " record of record type " + recordType + " has been open",
											YesNo.No);
									ThreadSleep(4000);
									if (BP.clicktabOnPage("Acuity")) {
										log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

										if (!BP.verifySubjectOfInteractionEitherOnCardOrInViewAllPopUp(
												task1SubjectName)) {
											log(LogStatus.INFO, "Verified: Task: " + task1SubjectName
													+ " is not present there after delete", YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"Task: " + task1SubjectName + " is present there after delete",
													YesNo.Yes);
											sa.assertTrue(false,
													"Task: " + task1SubjectName + " is present there after delete");

										}

									} else {
										log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
										sa.assertTrue(false, "Not able to click on Acuity Tab");
									}

								} else {
									log(LogStatus.ERROR,
											"Not able to open " + recordName + " record of record type " + recordType,
											YesNo.No);
									sa.assertTrue(false,
											"Not able to open " + recordName + " record of record type " + recordType);
								}
							} else {
								log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
								sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
							}

						} else {
							log(LogStatus.ERROR, "Task Delete Msg not display, So Task not gets deleted", YesNo.Yes);
							sa.assertTrue(false, "Task Delete Msg not display, So Task not gets deleted");

						}

					} else {
						log(LogStatus.ERROR, "Not ABle to Click on Delete Confirm Button", YesNo.Yes);
						sa.assertTrue(false, "Not ABle to Click on Delete Confirm Button");

					}

				} else {
					log(LogStatus.ERROR, "Not Able Click on Delete button in Down Arrow Button", YesNo.Yes);
					sa.assertTrue(false, "Not Able Click on Delete button in Down Arrow Button");

				}

			} else {
				log(LogStatus.ERROR, "Not Able Click on Down Arrow Button", YesNo.Yes);
				sa.assertTrue(false, "Not Able Click on Down Arrow Button");

			}

		} else {

			log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----", YesNo.Yes);
			BaseLib.sa.assertTrue(false, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Deprecated
	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc025_VerifyWhenTheRemovedTaskIsRestoredAndItsImpactOnInteractionSection(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;

		String AdvanceDueDate = ExcelUtils.readData(AcuityDataSheetFilePath, "Activity Timeline",
				excelLabel.Variable_Name, "AMNNR_Activity017", excelLabel.Advance_Due_Date);
		String getAdvanceDueDate = AdvanceDueDate;
		String task1SubjectName = AMNNR_Subject17;
		String updatedNotesOfTask = AMNNR_Notes21;
		String relatedTo = AMNNR_RelatedTo17;

		String priority = AMNNR_AdvancePriority17;
		String status = AMNNR_AdvanceStatus17;

		String verificationRelatedTo = relatedTo + AMNNR_RelatedTo21;
		String updatedRelatedTo = AMNNR_RelatedTo22;
		String updatedRelatedToVerifyInNotes = verificationRelatedTo + "<break>" + updatedRelatedTo;

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_TaskLabel3, updatedRelatedToVerifyInNotes } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String[][] listViewSheetData = { { AMNNR_ListViewMember1, AMNNR_ListViewTabName1, task1SubjectName,
				AMNNR_ListViewAccessibility1, AMNNR_ListViewFilter1, AMNNR_ListViewField1, AMNNR_ListViewOperators1,
				task1SubjectName, AMNNR_ListViewTextBoxType1 } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		WebElement ele;
		String recycleTab = lp.getTabName(projectName, TabName.RecycleBinTab);
		if (lp.openAppFromAppLauchner(60, recycleTab)) {

			CommonLib.refresh(driver);

			for (String[] row : listViewSheetData) {

				if (lp.addListView(projectName, row, 10)) {
					log(LogStatus.INFO, "list view added on " + row[1], YesNo.No);
					ele = lp.getCheckboxOfRestoreItemOnRecycleBin(projectName, task1SubjectName, 30);
					if (clickUsingJavaScript(driver, ele, "Check box against : " + task1SubjectName, action.BOOLEAN)) {
						log(LogStatus.INFO, "Click on checkbox for " + task1SubjectName, YesNo.No);

						ele = lp.getRestoreButtonOnRecycleBin(projectName, 30);
						if (clickUsingJavaScript(driver, ele, "Restore Button : " + task1SubjectName, action.BOOLEAN)) {
							ThreadSleep(10000);
							log(LogStatus.INFO, "Click on Restore Button for " + task1SubjectName, YesNo.No);
							sa.assertTrue(true, "Task has been restore from the Recycle bin");

							CommonLib.switchToDefaultContent(driver);
							ThreadSleep(2000);

							log(LogStatus.INFO, "---------Now Going to Verify Task: " + task1SubjectName
									+ " in Note PopUp Section---------", YesNo.No);
							if (lp.clickOnTab(projectName, tabObj1)) {

								log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

								if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
										recordType, recordName, 30)) {
									log(LogStatus.INFO,
											recordName + " record of record type " + recordType + " has been open",
											YesNo.No);
									ThreadSleep(4000);
									if (BP.clicktabOnPage("Acuity")) {
										log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

										if (BP.verifySubjectOfInteractionEitherOnCardOrInViewAllPopUp(
												task1SubjectName)) {
											log(LogStatus.INFO, "Verified: Task: " + task1SubjectName
													+ " is present there after restore", YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"Task: " + task1SubjectName + " is not present there after restore",
													YesNo.Yes);
											sa.assertTrue(false, "Task: " + task1SubjectName
													+ " is not present there after restore");

										}

									} else {
										log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
										sa.assertTrue(false, "Not able to click on Acuity Tab");
									}

								} else {
									log(LogStatus.ERROR,
											"Not able to open " + recordName + " record of record type " + recordType,
											YesNo.No);
									sa.assertTrue(false,
											"Not able to open " + recordName + " record of record type " + recordType);
								}
							} else

							{
								log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
								sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
							}

							if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

								log(LogStatus.INFO,
										"-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
										YesNo.No);

								if (click(driver, taskBP.downArrowButton(20), "downArrowButton",
										action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "Clicked on Down Arrow Button", YesNo.No);

									if (click(driver, taskBP.buttonInTheDownArrowList("Edit", 20),
											"Delete Button in downArrowButton", action.SCROLLANDBOOLEAN)) {
										log(LogStatus.INFO, "Clicked on Edit Button in  Down Arrow Button", YesNo.No);

										String url2 = getURL(driver, 10);

										ThreadSleep(10000);
										ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
												.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
														task1BasicSectionVerification, task1AdvancedSectionVerification,
														null);
										if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
											log(LogStatus.INFO,
													"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
															+ NotesPopUpPrefilledNegativeResultUpdated,
													YesNo.No);
											sa.assertTrue(false,
													"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
															+ NotesPopUpPrefilledNegativeResultUpdated);

										}

									} else {
										log(LogStatus.ERROR, "Not Able Click on Edit button in Down Arrow Button",
												YesNo.Yes);

									}

								} else {
									log(LogStatus.ERROR, "Not Able Click on Down Arrow Button", YesNo.Yes);
									sa.assertTrue(false, "Not Able Click on Down Arrow Button");

								}

							} else {

								log(LogStatus.ERROR,
										"-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
										YesNo.Yes);
								BaseLib.sa.assertTrue(false,
										"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

							}

						} else {

							log(LogStatus.ERROR, "Not Able to Click on Restore Button for " + task1SubjectName,
									YesNo.Yes);
							sa.assertTrue(false, "Not Able to Click on Restore Button for " + task1SubjectName);
						}

					} else {

						log(LogStatus.ERROR, "Not Able to Click on checkbox for " + task1SubjectName, YesNo.Yes);
						sa.assertTrue(false, "Not Able to Click on checkbox for " + task1SubjectName);
					}
				}

				else {
					log(LogStatus.FAIL, "list view could not added on " + row[1], YesNo.Yes);
					sa.assertTrue(false, "list view could not added on " + row[1]);
				}
			}

		} else {
			log(LogStatus.ERROR, "Not Able to open the Recycle been tab", YesNo.Yes);
			sa.assertTrue(false, "Not Able to open the Recycle been tab");

		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	/*
	 * @Parameters({ "projectName" })
	 * 
	 * @Test public void
	 * AcuityMNNRTc075_VerifyWhen2000TasksAreUploadedAndImpactOnInteractionSection(
	 * String projectName) throws IOException {
	 * 
	 * LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
	 * BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
	 * TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);
	 * 
	 * String task1SubjectName = "SSend Notice";
	 * 
	 * String recordName = "Acc 13"; String recordType = "Intermediary"; String
	 * dueDate; String task; String description; ArrayList<String> dueDateList = new
	 * ArrayList<String>(); ArrayList<String> taskList = new ArrayList<String>();
	 * ArrayList<String> descriptionList = new ArrayList<String>();
	 * ArrayList<String> userList = new ArrayList<String>(); String userName =
	 * crmUser1FirstName + " " + crmUser1LastName;
	 * 
	 * FileInputStream fis = null; Workbook wb = null; try { fis = new
	 * FileInputStream(new File(AcuityDataSheetFilePath)); wb =
	 * WorkbookFactory.create(fis); } catch (EncryptedDocumentException e) { // TODO
	 * Auto-generated catch block e.printStackTrace(); } catch
	 * (InvalidFormatException e) { // TODO Auto-generated catch block
	 * e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch
	 * block e.printStackTrace(); } for (int i = 1; i > 0; i++) { dueDate =
	 * ExcelUtils.readData(wb, "Bulk Task", i, 0); if (dueDate == null) {
	 * appLog.info("Done with the filters"); break; } dueDate.trim(); task =
	 * ExcelUtils.readData(wb, "Bulk Task", i, 1); description =
	 * ExcelUtils.readData(wb, "Bulk Task", i, 2);
	 * 
	 * task.trim(); description.trim();
	 * 
	 * dueDateList.add(dueDate); taskList.add(task);
	 * descriptionList.add(description); userList.add(userName);
	 * 
	 * }
	 * 
	 * fis.close();
	 * 
	 * 
	 * String dueDateArray[] = dueDateList.toArray(new String[dueDateList.size()]);
	 * String taskArray[] = taskList.toArray(new String[taskList.size()]); String
	 * descriptionArray[] = descriptionList.toArray(new
	 * String[descriptionList.size()]); String userArray[] = userList.toArray(new
	 * String[userList.size()]);
	 * 
	 * 
	 * lp.CRMLogin(crmUser1EmailID, adminPassword);
	 * 
	 * 
	 * 
	 * 
	 * 
	 * log(LogStatus.INFO, "---------Now Going to Verify Task: " + task1SubjectName
	 * + " in Note PopUp Section---------", YesNo.No); if
	 * (lp.clickOnTab(projectName, tabObj1)) {
	 * 
	 * log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);
	 * 
	 * if (BP.clickOnAlreadyCreated_Lighting(environment, mode,
	 * TabName.InstituitonsTab, recordType, recordName, 30)) { log(LogStatus.INFO,
	 * recordName + " record of record type " + recordType + " has been open",
	 * YesNo.No); ThreadSleep(4000); if (BP.clicktabOnPage("Acuity")) {
	 * log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
	 * 
	 * if (click(driver, BP.getViewAllBtnOnIntration(20),
	 * "View All button on Interaction", action.SCROLLANDBOOLEAN)) {
	 * log(LogStatus.INFO, "Clicked on View all button on Interaction card",
	 * YesNo.No);
	 * 
	 * CommonLib.ThreadSleep(15000); ArrayList<String> result =
	 * BP.verifyRecordsonInteractionsViewAllPopup(null, dueDateList, taskList,
	 * descriptionList, userList); if (result.isEmpty()) { log(LogStatus.INFO,
	 * "All records on View All popup of Interaction card have been verified",
	 * YesNo.No); } else { log(LogStatus.ERROR,
	 * "All records on View All popup of Interaction card are not verified",
	 * YesNo.No); sa.assertTrue(false,
	 * "All records on View All popup of Interaction card are not verified"); }
	 * 
	 * } else { log(LogStatus.ERROR,
	 * "Not able to click on View all button on Interaction card", YesNo.No);
	 * sa.assertTrue(false,
	 * "Not able to click on View all button on Interaction card"); }
	 * 
	 * } else { log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
	 * sa.assertTrue(false, "Not able to click on Acuity Tab"); }
	 * 
	 * } else { log(LogStatus.ERROR, "Not able to open " + recordName +
	 * " record of record type " + recordType, YesNo.No); sa.assertTrue(false,
	 * "Not able to open " + recordName + " record of record type " + recordType); }
	 * } else
	 * 
	 * { log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
	 * sa.assertTrue(false, "Not able to click on Tab : " + tabObj1); }
	 * 
	 * ThreadSleep(5000); lp.CRMlogout(); sa.assertAll(); }
	 */

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc026_VerifyTheImpactOnNoteWhenFieldLabelsAreChangedFromBackend(String projectName) {
		SetupPageBusinessLayer sp = new SetupPageBusinessLayer(driver);
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		NavigationPageBusineesLayer npbl = new NavigationPageBusineesLayer(driver);

		String[] tabNames = { "Activities" };
		String[][] labelsWithValues2d = {
				"Subject<break>Subject updated<Section>Status<break>Status updated<Section>Due Date<break>Due Date updated<Section>Priority<break>Priority updated"
						.split("<Section>", -1) };

		String[][] labelsWithValues2dRevertBack = {
				"Subject<break>Subject<Section>Status<break>Status<Section>Due Date<break>Due Date<Section>Priority<break>Priority"
						.split("<Section>", -1) };

		String task1SubjectNameVerifyAfterLabelChange = "";
		String task1NotesVerifyAfterLabelChange = "";

		String getAdvanceDueDateVerifyAfterLabelChange = CommonLib.getFutureDateAccToTimeZone("GMT-08:00",
				"MMM d, yyyy", Integer.parseInt("0"));
		String priorityAfterLabelChange = "Normal";
		String statusAfterLabelChange = "Not Started";

		String taskSectionSubjectAfterLabelChange = "";
		String taskSectionStatusAfterLabelChange = "Not Started";
		String taskSectionDueDateOnlyAfterLabelChange = "";

		String[][] task1BasicSectionAfterLabelChange = { { "Subject updated", task1SubjectNameVerifyAfterLabelChange },
				{ AMNNR_TaskLabel2, task1NotesVerifyAfterLabelChange } };

		String[][] task1AdvancedSectionAfterLabelChange = {
				{ "Due Date updated", getAdvanceDueDateVerifyAfterLabelChange },
				{ "Status updated", statusAfterLabelChange }, { "Priority updated", priorityAfterLabelChange } };

		String[][] task1TaskSectionAfterLabelChange = { { "Subject updated", taskSectionSubjectAfterLabelChange },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName },
				{ "Status updated", taskSectionStatusAfterLabelChange },
				{ "Due Date updated", taskSectionDueDateOnlyAfterLabelChange } };

		String AdvanceDueDate = ExcelUtils.readData(AcuityDataSheetFilePath, "Activity Timeline",
				excelLabel.Variable_Name, "AMNNR_Activity023", excelLabel.Advance_Due_Date);
		String getAdvanceDueDateExisting = AdvanceDueDate;
		AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("3"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectNameVerify = AMNNR_Subject23;
		String task1NotesVerify = AMNNR_Notes23;
		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo17.split("<break>");
		String verificationUpdatedRelatedTo = AMNNR_RelatedTo26;

		String priorityVerify = AMNNR_AdvancePriority23;
		String statusVerify = AMNNR_AdvanceStatus23;

		String[][] task1UpdatedBasicSectionVerificationExisting = { { "Subject updated", task1SubjectNameVerify },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, verificationUpdatedRelatedTo } };
		String[][] task1AdvancedSectionVerificationExisting = { { "Due Date updated", getAdvanceDueDateExisting },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { "Status updated", statusVerify },
				{ "Priority updated", priorityVerify } };

		String recordNameExisting = AMNNR_FirmLegalName6;
		String recordTypeExisting = AMNNR_FirmRecordType6;

		String recordName = AMNNR_FirmLegalName2;
		String recordType = AMNNR_FirmRecordType2;

		String task1SubjectName = AMNNR_Subject50;
		String task1Notes = AMNNR_Notes50;
		String relatedTo = AMNNR_RelatedTo50;

		String verificationRelatedTo = relatedTo + AMNNR_RelatedTo51;

		String status = AMNNR_AdvanceStatus50;
		String task1ButtonName = AMNNR_ActivityType1;
		String[] suggestedTags = AMNNR_SuggestedTag50.split("<break>", -1);
		String[] newlyRelatedToVerifyInInteraction = AMNNR_ATRelatedTo31.split("<break>");

		String[][] task1BasicSection = { { "Subject updated", task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { "Due Date updated", getAdvanceDueDate }, { "Status updated", status } };

		String[][] task1BasicSectionVerification = { { "Subject updated", task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { "Due Date updated", getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { "Status updated", status } };

		String[] labelAndValueSeprateByBreak = {
				AMNNR_TaskLabel7 + "<break>" + crmUser1FirstName + " " + crmUser1LastName,
				"Status updated" + "<break>" + status, "Subject updated" + "<break>" + task1SubjectName,
				"Due Date updated" + "<break>" + getAdvanceDueDate,
				"Related Associations" + "<break>" + "Sumo Logic, Vertica, Demo Deal" };

		boolean flag1 = false;

		lp.CRMLogin(superAdminUserName, adminPassword, appName);

		if (sp.renameLabelsOfFields(driver, tabNames, labelsWithValues2d, 20)) {
			flag1 = true;
		}

		lp.CRMlogout();

		CommonLib.ThreadSleep(3000);

		if (flag1) {

			lp.CRMLogin(crmUser1EmailID, adminPassword);

			if (lp.clickOnTab(projectName, TabName.HomeTab)) {
				log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
				home.notificationPopUpClose();

				WebElement ele;
				if (npbl.createNavPopUpMinimizeButton(5) != null) {
					CommonLib.click(driver, npbl.createNavPopUpMinimizeButton(5), "Minimize", action.BOOLEAN);
				}
				if (npbl.clickOnNavatarEdgeLinkHomePage(projectName, NavigationMenuItems.Create.toString(),
						action.BOOLEAN, 30)) {
					log(LogStatus.INFO, "Able to Click on " + task1ButtonName + " Going to click on : "
							+ NavigationMenuItems.Create.toString() + " for creation ", YesNo.No);
					ele = npbl.getNavigationLabel(projectName, task1ButtonName, action.BOOLEAN, 10);
					if (ele != null && CommonLib.click(driver, ele, task1ButtonName, action.BOOLEAN)) {
						log(LogStatus.INFO, "Click on " + task1ButtonName + " so going for creation", YesNo.No);
						String url = getURL(driver, 10);

						ThreadSleep(10000);

						String expectedHeaderName = "Task";
						if (BP.notePopUpHeading(expectedHeaderName, 15) != null) {
							log(LogStatus.INFO, "PopUp Name has been verified to: " + expectedHeaderName, YesNo.No);
						}

						else {
							log(LogStatus.ERROR,
									"PopUp Name has been not been verified, Expected: " + expectedHeaderName, YesNo.No);
							sa.assertTrue(false,
									"PopUp Name has been not been verified, Expected: " + expectedHeaderName);
						}

						ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
								.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionAfterLabelChange,
										task1AdvancedSectionAfterLabelChange, task1TaskSectionAfterLabelChange);
						if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
							log(LogStatus.INFO,
									"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
											+ NotesPopUpPrefilledNegativeResult,
									YesNo.No);
							sa.assertTrue(false,
									"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
											+ NotesPopUpPrefilledNegativeResult);
						}

					} else {
						log(LogStatus.ERROR,
								"Not Able to Click on " + task1ButtonName + " so cannot create data related to this ",
								YesNo.Yes);
						sa.assertTrue(false,
								"Not Able to Click on " + task1ButtonName + " so cannot create data related to this ");

					}
				} else {
					log(LogStatus.ERROR, "Not Able to Click on " + NavigationMenuItems.Create.toString()
							+ " so cannot click on : " + task1ButtonName + " for creation ", YesNo.Yes);
					sa.assertTrue(false, "Not Able to Click on " + NavigationMenuItems.Create.toString()
							+ " so cannot click on : " + task1ButtonName + " for creation ");

				}

			} else {
				sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
				log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
			}

			log(LogStatus.INFO,
					"---------Now Going to Verify Task: " + task1SubjectNameVerify + " in Interaction Section---------",
					YesNo.No);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordTypeExisting,
						recordNameExisting, 30)) {
					log(LogStatus.INFO,
							recordNameExisting + " record of record type " + recordTypeExisting + " has been open",
							YesNo.No);
					ThreadSleep(4000);
					if (BP.clicktabOnPage("Acuity")) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
						ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDateExisting,
								IconType.Task, task1SubjectNameVerify, task1NotesVerify, true, false,
								RelatedToVerifyInInteraction, null);
						if (result.isEmpty()) {
							log(LogStatus.PASS,
									"------" + task1SubjectNameVerify + " record has been verified on intraction------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + task1SubjectNameVerify
											+ " record is not verified on intraction, Reason: " + result + "------",
									YesNo.No);
							sa.assertTrue(false, "------" + task1SubjectNameVerify
									+ " record is not verified on intraction, Reason: " + result + "------");
						}
						CommonLib.refresh(driver);
						CommonLib.ThreadSleep(800);

						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}
						if (clickUsingJavaScript(driver, BP.editButtonOnInteractionCard(task1SubjectNameVerify, 20),
								"Edit Note Button of: " + task1SubjectNameVerify, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button for: " + task1SubjectNameVerify, YesNo.No);

							String url2 = getURL(driver, 10);

							ThreadSleep(10000);
							ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
											task1UpdatedBasicSectionVerificationExisting,
											task1AdvancedSectionVerificationExisting, null);
							if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResultUpdated,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResultUpdated);

							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button for: " + task1SubjectNameVerify,
									YesNo.No);
							sa.assertTrue(false,
									"Not able to click on Edit Note button for: " + task1SubjectNameVerify);
						}
					} else {
						log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
						sa.assertTrue(false, "Not able to click on Acuity Tab");
					}

				} else {
					log(LogStatus.ERROR,
							"Not able to open " + recordNameExisting + " record of record type " + recordTypeExisting,
							YesNo.No);
					sa.assertTrue(false,
							"Not able to open " + recordNameExisting + " record of record type " + recordTypeExisting);
				}
			} else {
				log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
				sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
			}

			CommonLib.refresh(driver);
			if (lp.clickOnTab(projectName, TabName.HomeTab)) {
				log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
				home.notificationPopUpClose();
				if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection,
						task1AdvancedSection, null, suggestedTags, false, null, null, null, null, null, null)) {
					log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

					log(LogStatus.INFO, "---------Now Going to Verify Task: " + task1SubjectName
							+ " in Interaction Section---------", YesNo.No);
					if (lp.clickOnTab(projectName, tabObj1)) {

						log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);
						CommonLib.ThreadSleep(3000);
						CommonLib.refresh(driver);
						if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType,
								recordName, 30)) {
							log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open",
									YesNo.No);
							ThreadSleep(4000);
							if (BP.clicktabOnPage("Acuity")) {
								log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
								ArrayList<String> result2 = BP.verifyRecordOnInteractionCard(getAdvanceDueDate,
										IconType.Task, task1SubjectName, task1Notes, true, false,
										newlyRelatedToVerifyInInteraction, null);
								if (result2.isEmpty()) {
									log(LogStatus.PASS, "------" + task1SubjectName
											+ " record has been verified on intraction------", YesNo.No);

								} else {
									log(LogStatus.ERROR, "------" + task1SubjectName
											+ " record is not verified on intraction, Reason: " + result2 + "------",
											YesNo.No);
									sa.assertTrue(false, "------" + task1SubjectName
											+ " record is not verified on intraction, Reason: " + result2 + "------");
								}

								CommonLib.refresh(driver);
								CommonLib.ThreadSleep(800);
								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}
								if (clickUsingJavaScript(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

									String url2 = getURL(driver, 10);

									ThreadSleep(10000);
									ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
											.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
													task1BasicSectionVerification, task1AdvancedSectionVerification,
													null);
									if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
										log(LogStatus.INFO,
												"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
												YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated,
												YesNo.No);
										sa.assertTrue(false,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated);

									}

								} else {
									log(LogStatus.ERROR,
											"Not able to click on Edit Note button for: " + task1SubjectName, YesNo.No);
									sa.assertTrue(false,
											"Not able to click on Edit Note button for: " + task1SubjectName);
								}

								CommonLib.refresh(driver);

								// Out of Scope Functionality
								/*
								 * CommonLib.ThreadSleep(8000); if
								 * (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {
								 * 
								 * log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName +
								 * " found in Tasks Object-----", YesNo.No);
								 * 
								 * CommonLib.ThreadSleep(8000); List<String> taskDetailPageNegativeResult = BP
								 * .fieldValueVerification(labelAndValueSeprateByBreak);
								 * 
								 * if (taskDetailPageNegativeResult.isEmpty()) { log(LogStatus.PASS, "------" +
								 * task1SubjectName +
								 * " labels and their values in Detail page has been verified------", YesNo.No);
								 * 
								 * } else { log(LogStatus.ERROR, "------" + task1SubjectName +
								 * " labels and their values in Detail page has not been verified, Reason: " +
								 * taskDetailPageNegativeResult + "------", YesNo.No); sa.assertTrue(false,
								 * "------" + task1SubjectName +
								 * " labels and their values in Detail page has not been verified, Reason: " +
								 * taskDetailPageNegativeResult + "------");
								 * 
								 * }
								 * 
								 * } else {
								 * 
								 * log(LogStatus.ERROR, "-----Task named: " + task1SubjectName +
								 * " not found in Tasks Object-----", YesNo.Yes); BaseLib.sa.assertTrue(false,
								 * "-----Task named: " + task1SubjectName + " not found in Tasks Object-----");
								 * 
								 * }
								 */

							} else {
								log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
								sa.assertTrue(false, "Not able to click on Acuity Tab");
							}

						} else {
							log(LogStatus.ERROR,
									"Not able to open " + recordName + " record of record type " + recordType,
									YesNo.No);
							sa.assertTrue(false,
									"Not able to open " + recordName + " record of record type " + recordType);
						}
					} else {
						log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
						sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
					}

				} else {
					log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
					sa.assertTrue(false, "Activity timeline record is not created");
				}

			} else {
				sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
				log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
			}

			lp.CRMlogout();

			CommonLib.ThreadSleep(6000);
			lp.CRMLogin(superAdminUserName, adminPassword, appName);

			if (sp.renameLabelsOfFields(driver, tabNames, labelsWithValues2dRevertBack, 20)) {
				log(LogStatus.INFO, "Renaming Labels has been Revert Back", YesNo.No);
			} else {
				log(LogStatus.ERROR, "Renaming Labels has not been Revert Back", YesNo.No);
				sa.assertTrue(false, "Renaming Labels has not been Revert Back");
			}

			lp.CRMlogout();

		} else {
			log(LogStatus.ERROR,
					"Label Names not Updated, So not able to verify existing Note popup of task and create new task",
					YesNo.No);
			sa.assertTrue(false,
					"Label Names not Updated, So not able to verify existing Note popup of task and create new task");
		}
		sa.assertAll();
		CommonLib.ThreadSleep(3000);

	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc027_VerifyTheImpactOnNoteTaggingWhenPEStandardUserProfileObjectPermissionIsRevokedAndUserTriesToTagTheObject(
			String projectName) {
		CustomObjPageBusinessLayer co = new CustomObjPageBusinessLayer(driver);
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		NavigationPageBusineesLayer npbl = new NavigationPageBusineesLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);

		String[] userTypesToGivePermissions = { "PE Standard User" };
		String[][] objectAndPermissionAndGivenOrGivenNot = {
				{ "Deals", "Read", PermissionType.removePermission.toString() },
				{ "Accounts", "Read", PermissionType.removePermission.toString() },
				{ "Contacts", "Read", PermissionType.removePermission.toString() } };

		String[][] objectAndPermissionAndGivenOrGivenNotRevertBack = {
				{ "Deals", "Create<break>Delete",
						PermissionType.givePermission.toString() + "<break>"
								+ PermissionType.givePermission.toString() },
				{ "Accounts", "Create<break>Delete",
						PermissionType.givePermission.toString() + "<break>"
								+ PermissionType.givePermission.toString() },
				{ "Contacts", "Create<break>Delete", PermissionType.givePermission.toString() + "<break>"
						+ PermissionType.givePermission.toString() } };

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject52;
		String task1Notes = AMNNR_Notes52;
		String relatedTo = AMNNR_RelatedTo52;

		String verificationRelatedTo = relatedTo;

		String status = AMNNR_AdvanceStatus52;
		String task1ButtonName = AMNNR_ActivityType1;
		String[] suggestedTags = null;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, "Normal" } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1Notes }, { AMNNR_TaskLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, status } };

		String relatedToNotContains = AMNNR_RelatedTo53;
		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, relatedToNotContains } };

		boolean flag1 = false;
		lp.CRMLogin(superAdminUserName, adminPassword, appName);

		if (co.objectPermissionGivenOrRemove(objectAndPermissionAndGivenOrGivenNot, userTypesToGivePermissions)) {
			flag1 = true;
		}

		lp.CRMlogout();

		CommonLib.ThreadSleep(3000);

		if (flag1) {

			lp.CRMLogin(crmUser1EmailID, adminPassword);
			if (npbl.createNavPopUpMinimizeButton(5) != null) {
				CommonLib.click(driver, npbl.createNavPopUpMinimizeButton(5), "Minimize", action.BOOLEAN);
			}
			if (npbl.clickOnNavatarEdgeLinkHomePage(projectName, NavigationMenuItems.Create.toString(), action.BOOLEAN,
					30)) {
				log(LogStatus.INFO, "Able to Click on " + task1ButtonName + " Going to click on : "
						+ NavigationMenuItems.Create.toString() + " for creation ", YesNo.No);
				WebElement ele = npbl.getNavigationLabel(projectName, task1ButtonName, action.BOOLEAN, 10);
				if (ele != null && CommonLib.click(driver, ele, task1ButtonName, action.BOOLEAN)) {
					log(LogStatus.INFO, "Click on " + task1ButtonName + " so going for creation", YesNo.No);

					CommonLib.ThreadSleep(3000);
					ArrayList<String> verifyRelatedToNotContainsNegativeResults = BP
							.verifyRelatedToNotContains(relatedAssociationNotContains);
					if (verifyRelatedToNotContainsNegativeResults.isEmpty()) {
						log(LogStatus.INFO, "RelatedTo Association Not Contains some Records has been verified",
								YesNo.No);

						CommonLib.refresh(driver);
						if (lp.clickOnTab(projectName, TabName.HomeTab)) {
							log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
							home.notificationPopUpClose();
							CommonLib.ThreadSleep(4000);
							if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection,
									task1AdvancedSection, null, suggestedTags, false, null, null, null, null, null,
									null)) {
								log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

								log(LogStatus.INFO, "---------Now Going to Verify Task: " + task1SubjectName

										+ " in Interaction Section---------", YesNo.No);

								if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

									log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName
											+ " found in Tasks Object-----", YesNo.No);

									if (taskBP.buttonDisplayAsSplitView(8) != null) {
										CommonLib.click(driver, taskBP.buttonDisplayAsSplitView(8),
												"buttonDisplayAsSplitView", action.BOOLEAN);
										CommonLib.click(driver, taskBP.tableViewDropDownButton(8),
												"tableViewDropDownButton", action.BOOLEAN);

									}

									if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
											"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
										log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

										String url = getURL(driver, 10);

										ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
												.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url,
														task1BasicSectionVerification, task1AdvancedSectionVerification,
														null);
										if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
											log(LogStatus.INFO,
													"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value",
													YesNo.No);
											sa.assertTrue(false,
													"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value");
										}

									} else {
										log(LogStatus.ERROR,
												"Not able to click on Edit button on Subjec Link Popup of Task: "
														+ task1SubjectName,
												YesNo.No);
										sa.assertTrue(false,
												"Not able to click on Edit button on Subjec Link Popup of Task: "
														+ task1SubjectName);
									}

									driver.close();
									driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

								} else {

									log(LogStatus.ERROR,
											"-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
											YesNo.Yes);
									BaseLib.sa.assertTrue(false,
											"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

								}

							} else {
								log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
								sa.assertTrue(false, "Activity timeline record is not created");
							}

						} else {
							sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
							log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
						}

					} else {
						log(LogStatus.ERROR,
								"RelatedTo Association Not Contains some Records has not been verified, Reason: "
										+ verifyRelatedToNotContainsNegativeResults,
								YesNo.No);
						sa.assertTrue(false,
								"RelatedTo Association Not Contains some Records has not been verified, Reason: "
										+ verifyRelatedToNotContainsNegativeResults);
					}

				} else {
					log(LogStatus.ERROR,
							"Not Able to Click on " + task1ButtonName + " so cannot create data related to this ",
							YesNo.Yes);
					sa.assertTrue(false,
							"Not Able to Click on " + task1ButtonName + " so cannot create data related to this ");

				}
			} else {
				log(LogStatus.ERROR, "Not Able to Click on " + NavigationMenuItems.Create.toString()
						+ " so cannot click on : " + task1ButtonName + " for creation ", YesNo.Yes);
				sa.assertTrue(false, "Not Able to Click on " + NavigationMenuItems.Create.toString()
						+ " so cannot click on : " + task1ButtonName + " for creation ");

			}

			lp.CRMlogout();
			CommonLib.ThreadSleep(6000);
			lp.CRMLogin(superAdminUserName, adminPassword, appName);
			if (co.objectPermissionGivenOrRemove(objectAndPermissionAndGivenOrGivenNotRevertBack,
					userTypesToGivePermissions)) {
				log(LogStatus.INFO, "Permissions has been revert backed", YesNo.No);

			} else {
				log(LogStatus.ERROR, "Permissions has not been revert backed", YesNo.Yes);
				sa.assertTrue(false, "Permissions has not been revert backed");
			}
			lp.CRMlogout();

		} else {
			log(LogStatus.ERROR,
					"As the Permission not removed, So not able to create and verify the Task with its details in Note popup",
					YesNo.Yes);
			sa.assertTrue(false,
					"As the Permission not removed, So not able to create and verify the Task with its details in Note popup");
		}

		sa.assertAll();
		CommonLib.ThreadSleep(3000);
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc028_VerifyTheImpactOfNoteTaggingWhenTaskPermissionIsRevokedForTheUser(String projectName) {
		SetupPageBusinessLayer sp = new SetupPageBusinessLayer(driver);
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		NavigationPageBusineesLayer npbl = new NavigationPageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType1;
		String[] userTypesToGivePermissions = { "PE Standard User" };
		String[][] objectAndPermissionAndGivenOrGivenNot = {
				{ "Edit Tasks", PermissionType.removePermission.toString() } };
		String[][] objectAndPermissionAndGivenOrGivenNotRevertBack = {
				{ "Edit Tasks", PermissionType.givePermission.toString() } };

		boolean flag1 = false;

		lp.CRMLogin(superAdminUserName, adminPassword, appName);

		if (sp.permissionChangeOfGeneralAndAdministrative(objectAndPermissionAndGivenOrGivenNot,
				userTypesToGivePermissions)) {
			flag1 = true;
		}

		lp.CRMlogout();

		CommonLib.ThreadSleep(3000);

		if (flag1) {

			lp.CRMLogin(crmUser1EmailID, adminPassword);
			if (npbl.createNavPopUpMinimizeButton(5) != null) {
				CommonLib.click(driver, npbl.createNavPopUpMinimizeButton(5), "Minimize", action.BOOLEAN);
			}
			if (npbl.clickOnNavatarEdgeLinkHomePage(projectName, NavigationMenuItems.Create.toString(), action.BOOLEAN,
					30)) {
				log(LogStatus.INFO, "Able to Click on " + task1ButtonName + " Going to click on : "
						+ NavigationMenuItems.Create.toString() + " for creation ", YesNo.No);

				if (!npbl.navList().isEmpty()) {
					if (!npbl.navList().contains(task1ButtonName)) {
						log(LogStatus.INFO,
								"Button: " + task1ButtonName + " is disappear after Unchecked the Edit Tasks Option",
								YesNo.No);
					} else {
						log(LogStatus.ERROR, "Button: " + task1ButtonName
								+ " is not disappear after Unchecked the Edit Tasks Option", YesNo.Yes);
						sa.assertTrue(false, "Button: " + task1ButtonName
								+ " is not disappear after Unchecked the Edit Tasks Option");
					}

				} else {
					log(LogStatus.ERROR,
							"Either taking time to load or No Nav list there, So no able to veify Task Button",
							YesNo.Yes);
					sa.assertTrue(false,
							"Not Able to Click on " + task1ButtonName + " so cannot create data related to this ");

				}
			} else {
				log(LogStatus.ERROR, "Not Able to Click on " + NavigationMenuItems.Create.toString()
						+ " so cannot click on : " + task1ButtonName + " for creation ", YesNo.Yes);
				sa.assertTrue(false, "Not Able to Click on " + NavigationMenuItems.Create.toString()
						+ " so cannot click on : " + task1ButtonName + " for creation ");

			}

			lp.CRMlogout();

			CommonLib.ThreadSleep(6000);
			lp.CRMLogin(superAdminUserName, adminPassword, appName);
			if (sp.permissionChangeOfGeneralAndAdministrative(objectAndPermissionAndGivenOrGivenNotRevertBack,
					userTypesToGivePermissions)) {
				log(LogStatus.INFO, "Edit Tasks Permission has been Revert Back", YesNo.No);
			} else {

				log(LogStatus.ERROR, "Edit Tasks Permission has not been Revert Back", YesNo.Yes);
				sa.assertTrue(false, "Edit Tasks Permission has not been Revert Back");
			}

			lp.CRMlogout();
		} else {
			log(LogStatus.ERROR, "As the Permission not removed, So not able to verify Task Button in Navigation Pane",
					YesNo.Yes);
			sa.assertTrue(false, "As the Permission not removed, So not able to verify Task Button in Navigation Pane");
		}

		sa.assertAll();
		CommonLib.ThreadSleep(3000);
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc029_VerifyTheUIOfNotesPopUpFromNavigationPanelInCaseOfCall(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		NavigationPageBusineesLayer npbl = new NavigationPageBusineesLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType54;

		String task1SubjectName = AMNNR_Subject54;
		String task1Notes = AMNNR_Notes54;

		String getAdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT-08:00", "M/d/yyyy", Integer.parseInt("0"));

		String priority = AMNNR_AdvancePriority54;
		String status = AMNNR_AdvanceStatus54;

		String taskSectionSubject = AMNNR_TaskSubject54;
		String taskSectionStatus = AMNNR_TaskStatus54;
		String taskSectionDueDateOnly = "";

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel8, "-None-" } };

		String[][] task1TaskSection = { { AMNNR_TaskLabel1, taskSectionSubject },
				{ AMNNR_TaskLabel5, taskSectionStatus }, { AMNNR_TaskLabel4, taskSectionDueDateOnly } };

		List<String> expectedFooterList = new ArrayList<String>();
		expectedFooterList.add("Cancel");
		expectedFooterList.add("Save");

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO, "---------Now Going to Verify UI of Task: " + task1SubjectName
				+ " in Activity Timeline Section---------", YesNo.No);

		CommonLib.refresh(driver);
		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();

			WebElement ele;
			if (npbl.createNavPopUpMinimizeButton(5) != null) {
				CommonLib.click(driver, npbl.createNavPopUpMinimizeButton(5), "Minimize", action.BOOLEAN);
			}
			if (npbl.clickOnNavatarEdgeLinkHomePage(projectName, NavigationMenuItems.Create.toString(), action.BOOLEAN,
					30)) {
				log(LogStatus.INFO, "Able to Click on " + task1ButtonName + " Going to click on : "
						+ NavigationMenuItems.Create.toString() + " for creation ", YesNo.No);
				ele = npbl.getNavigationLabel(projectName, task1ButtonName, action.BOOLEAN, 10);
				if (ele != null && CommonLib.click(driver, ele, task1ButtonName, action.BOOLEAN)) {
					log(LogStatus.INFO, "Click on " + task1ButtonName + " so going for creation", YesNo.No);
					String url = getURL(driver, 10);

					ThreadSleep(10000);

					String expectedHeaderName = "Call Notes";
					if (BP.notePopUpHeading(expectedHeaderName, 15) != null) {
						log(LogStatus.INFO, "PopUp Name has been verified to: " + expectedHeaderName, YesNo.No);
					}

					else {
						log(LogStatus.ERROR, "PopUp Name has been not been verified, Expected: " + expectedHeaderName,
								YesNo.No);
						sa.assertTrue(false, "PopUp Name has been not been verified, Expected: " + expectedHeaderName);
					}

					if (BP.notePopUpCrossButton(7) != null) {
						log(LogStatus.INFO, "Cross Button is visible in " + expectedHeaderName + " Popup", YesNo.No);
					}

					else {
						log(LogStatus.ERROR, "Cross Button is not visible in " + expectedHeaderName + " Popup",
								YesNo.No);
						sa.assertTrue(false, "Cross Button is not visible in " + expectedHeaderName + " Popup");
					}

					List<String> actualFooterList = BP.notePopUpFooterButtons().stream()
							.map(x -> CommonLib.getText(driver, x, "Footer", action.BOOLEAN))
							.collect(Collectors.toList());

					if (actualFooterList.containsAll(expectedFooterList)) {
						log(LogStatus.INFO, "Footer List Matched: " + expectedFooterList, YesNo.No);

					} else {
						log(LogStatus.ERROR, "Footer List not Matched, Expected: " + expectedFooterList + ", Actual: "
								+ expectedFooterList, YesNo.No);
						sa.assertTrue(false, "Footer List not Matched, Expected: " + expectedFooterList + ", Actual: "
								+ expectedFooterList);
					}

					ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
							.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSection,
									task1AdvancedSection, task1TaskSection);
					if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
						log(LogStatus.INFO,
								"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
										+ NotesPopUpPrefilledNegativeResult,
								YesNo.No);
						sa.assertTrue(false,
								"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
										+ NotesPopUpPrefilledNegativeResult);
					}

				} else {
					log(LogStatus.ERROR,
							"Not Able to Click on " + task1ButtonName + " so cannot create data related to this ",
							YesNo.Yes);
					sa.assertTrue(false,
							"Not Able to Click on " + task1ButtonName + " so cannot create data related to this ");

				}
			} else {
				log(LogStatus.ERROR, "Not Able to Click on " + NavigationMenuItems.Create.toString()
						+ " so cannot click on : " + task1ButtonName + " for creation ", YesNo.Yes);
				sa.assertTrue(false, "Not Able to Click on " + NavigationMenuItems.Create.toString()
						+ " so cannot click on : " + task1ButtonName + " for creation ");

			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc030_CreateACallAndAddTheNotesFromEditCommentButtonOfTaskLayout(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("4"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject2 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes2;
		String relatedTo = AMNNR_RelatedTo2;
//		String priority = AMNNR_AdvancePriority2;
//		String status = AMNNR_AdvanceStatus2;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };
		String task1ButtonName = AMNNR_ActivityType54;
		String recordName = AMNNR_FirmLegalName1;
		String recordType = AMNNR_FirmRecordType1;
		String updatedCommentOfTask = AMNNR_Notes3;
		String[] relatedToVerify = AMNNR_ATRelatedTo1.split("<break>");
		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, updatedCommentOfTask }, { AMNNR_CallLabel3, relatedTo } };
		String[][] task1UpdateBasicSection = { { AMNNR_CallLabel2, updatedCommentOfTask } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Create Task: " + task1SubjectName + " in Activity Timeline Section---------",
				YesNo.No);
		CommonLib.refresh(driver);
		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Interaction Section---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, relatedToVerify, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}

					if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

						log(LogStatus.INFO,
								"-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
								YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null, null, null,
									null, false, null, null, null, null, null, null)) {
								log(LogStatus.PASS,
										"Activity timeline record has been Updated for Task: " + task1SubjectName,
										YesNo.No);

								if (lp.clickOnTab(projectName, tabObj1)) {

									log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

									if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
											recordType, recordName, 30)) {
										log(LogStatus.INFO,
												recordName + " record of record type " + recordType + " has been open",
												YesNo.No);
										ThreadSleep(4000);
										if (BP.clicktabOnPage("Acuity")) {
											log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

											CommonLib.refresh(driver);
											ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
													getAdvanceDueDate, IconType.Call, task1SubjectName,
													updatedCommentOfTask, true, false, relatedToVerify, null);
											if (updatedresult.isEmpty()) {
												log(LogStatus.PASS,
														"------" + task1SubjectName
																+ " record has been verified on intraction------",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------",
														YesNo.No);
												sa.assertTrue(false,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------");
											}

											String url2 = getURL(driver, 10);

											if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
													"Edit Note Button of: " + task1SubjectName,
													action.SCROLLANDBOOLEAN)) {
												log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

												ThreadSleep(1000);
												ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
														.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
																task1BasicSectionVerification, task1AdvancedSection,
																null);
												if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
													log(LogStatus.INFO,
															"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
															YesNo.No);

												} else {
													log(LogStatus.ERROR,
															"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																	+ NotesPopUpPrefilledNegativeResultUpdated,
															YesNo.No);
													sa.assertTrue(false,
															"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																	+ NotesPopUpPrefilledNegativeResultUpdated);
												}
											} else {
												log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
												sa.assertTrue(false, "Not able to click on Edit Note button");
											}

										} else {
											log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
											sa.assertTrue(false, "Not able to click on Acuity Tab");
										}

									} else {
										log(LogStatus.ERROR, "Not able to open " + recordName
												+ " record of record type " + recordType, YesNo.No);
										sa.assertTrue(false, "Not able to open " + recordName
												+ " record of record type " + recordType);
									}
								} else {
									log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
									sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
								}

							} else {
								log(LogStatus.FAIL,
										"Activity timeline record has not Updated for task: " + task1SubjectName,
										YesNo.No);
								sa.assertTrue(false,
										"Activity timeline record has not Updated for task: " + task1SubjectName);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subjec Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subjec Link Popup of Task: "
									+ task1SubjectName);
						}

						driver.close();
						driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					} else {

						log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
								YesNo.Yes);
						BaseLib.sa.assertTrue(false,
								"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

					}

				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc031_CreateACallAndAddTheNotesAndVerifySuggestedTagPopUp(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("4"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject4 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes4;
		String relatedTo = AMNNR_RelatedTo4;

		String priority = AMNNR_AdvancePriority4;
		String status = AMNNR_AdvanceStatus4;
		String task1ButtonName = AMNNR_ActivityType54;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		String[] SuggestedTags = AMNNR_SuggestedTag4.split("<break>", -1);

		String[] relatedToArray = new String[SuggestedTags.length + relatedTo.split("<break>", -1).length];

		int relatedToLoop = 0;
		int suggestedLoop = 0;
		for (String related : relatedTo.split("<break>", -1)) {
			relatedToArray[relatedToLoop] = related;
			relatedToLoop++;
		}
		for (String suggestedTag : SuggestedTags) {
			relatedToArray[relatedToLoop + suggestedLoop] = suggestedTag.split("==", -1)[0];
			suggestedLoop++;

		}

		String recordName = AMNNR_FirmLegalName2;
		String recordType = AMNNR_FirmRecordType2;
		String updatedNotesOfTask = AMNNR_Notes5;
		String[] relatedToVerify = AMNNR_ATRelatedTo2.split("<break>");

		String[][] task1UpdateBasicSection = { { AMNNR_CallLabel2, updatedNotesOfTask } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag5.split("<break>", -1);
		String[] updatedRelatedToVerify = AMNNR_ATRelatedTo3.split("<break>");

		String[] updatedRelatedToArray = new String[relatedToArray.length + updatedSuggestedTags.length];

		int updatedrelatedToLoop = 0;
		int updatedsuggestedLoop = 0;
		for (String related : relatedToArray) {
			updatedRelatedToArray[updatedrelatedToLoop] = related;
			updatedrelatedToLoop++;
		}
		for (String suggestedTag : updatedSuggestedTags) {
			updatedRelatedToArray[updatedrelatedToLoop + updatedsuggestedLoop] = suggestedTag;
			updatedsuggestedLoop++;

		}

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, updatedNotesOfTask }, { AMNNR_CallLabel3, AMNNR_SuggestedTag4 } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Create Task: " + task1SubjectName + " in Activity Timeline Section---------",
				YesNo.No);

		CommonLib.refresh(driver);
		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimelineAlsoVerifyUIOfSuggestedTag(projectName, true, task1ButtonName,
					task1BasicSection, task1AdvancedSection, null, SuggestedTags)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Interaction Section---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, relatedToVerify, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

						ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
								task1SubjectName, task1BasicSection, task1AdvancedSection, IconType.Call,
								PageName.AcuityDetails);

						if (subjectLinkPopUpNegativeResult.isEmpty()) {
							log(LogStatus.PASS, "------" + task1SubjectName
									+ " record is able to open popup after click on it and verify its data" + "------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------",
									YesNo.Yes);
							sa.assertTrue(false,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------");

						}
						String url = getURL(driver, 10);

						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							ThreadSleep(1000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1SubjectName, task1Notes,
											relatedToArray);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);
								ThreadSleep(2000);
								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}
								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
											null, updatedSuggestedTags, null, false, null, null, null, null, null,
											null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);

										ArrayList<String> subjectLinkPopUpNegativeResultUpdated = BP
												.verifySubjectLinkPopUpOnIntraction(driver, task1SubjectName,
														updatedTask1BasicSectionVerification,
														updatedTask1AdvancedSectionVerification, IconType.Call,
														PageName.AcuityDetails);

										if (subjectLinkPopUpNegativeResultUpdated.isEmpty()) {
											log(LogStatus.PASS, "------" + task1SubjectName
													+ " record is able to open popup after click on it and verify its data"
													+ "------", YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1SubjectName
															+ " record link popup is not verified, Reason: "
															+ subjectLinkPopUpNegativeResultUpdated + "------",
													YesNo.Yes);
											sa.assertTrue(false,
													"------" + task1SubjectName
															+ " record link popup is not verified, Reason: "
															+ subjectLinkPopUpNegativeResultUpdated + "------");

										}

										ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
												getAdvanceDueDate, IconType.Call, task1SubjectName, updatedNotesOfTask,
												true, false, updatedRelatedToVerify, null);
										if (updatedresult.isEmpty()) {
											log(LogStatus.PASS,
													"------" + task1SubjectName
															+ " record has been verified on intraction------",
													YesNo.No);

											String url2 = getURL(driver, 10);

											if (BP.crossIconButtonInNotePopUp(5) != null) {
												click(driver, BP.crossIconButtonInNotePopUp(20),
														"Clicked on Cross Icon of PopUp", action.SCROLLANDBOOLEAN);
											}
											if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
													"Edit Note Button of: " + task1SubjectName,
													action.SCROLLANDBOOLEAN)) {
												log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

												ThreadSleep(10000);
												ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
														.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
																task1SubjectName, updatedNotesOfTask,
																updatedRelatedToArray);
												if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
													log(LogStatus.INFO,
															"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
															YesNo.No);

												} else {
													log(LogStatus.ERROR,
															"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason:"
																	+ NotesPopUpPrefilledNegativeResultUpdated,
															YesNo.No);
													sa.assertTrue(false,
															"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason:"
																	+ NotesPopUpPrefilledNegativeResultUpdated);
												}
											} else {
												log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
												sa.assertTrue(false, "Not able to click on Edit Note button");
											}

										} else {
											log(LogStatus.ERROR,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult + "------",
													YesNo.No);
											sa.assertTrue(false,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult + "------");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}
								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}
							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc032_CreateACallWithoutMeetingNotesAndTagFromInteractionSectionByClickingOnEditNotesButton(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("4"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject6 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes6;
		String relatedTo = AMNNR_RelatedTo6;
		String[] relatedToArray = relatedTo.split("<break>", -1);
//		String priority = AMNNR_AdvancePriority6;
//		String status = AMNNR_AdvanceStatus6;
		String task1ButtonName = AMNNR_ActivityType54;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		String recordName = AMNNR_Contact1;

		String updatedNotesOfTask = AMNNR_Notes7;
		String[] relatedToVerify = AMNNR_ATRelatedTo4.split("<break>");
		String[] updatedRelatedToVerify = AMNNR_ATRelatedTo5.split("<break>");

		String[][] task1UpdateBasicSection = { { AMNNR_CallLabel2, updatedNotesOfTask } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag7.split("<break>", -1);

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Create Task: " + task1SubjectName + " in Activity Timeline Section---------",
				YesNo.No);

		CommonLib.refresh(driver);
		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Interaction Section---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab, recordName, 30)) {
				log(LogStatus.INFO, recordName + " record has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, relatedToVerify, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

						if (BP.verifySubjectLinkPopUpOnIntraction(driver, task1SubjectName)) {
							log(LogStatus.PASS, "------" + task1SubjectName
									+ " record is able to open popup after click on it" + "------", YesNo.No);

						} else {
							log(LogStatus.ERROR, "------" + task1SubjectName
									+ " record is not able to open popup after click on it" + "------", YesNo.Yes);
							sa.assertTrue(false, "------" + task1SubjectName
									+ " record is not able to open popup after click on it" + "------");
						}

						String url = getURL(driver, 10);

						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							ThreadSleep(1000);

							String expectedHeaderName = "Call Notes";
							if (BP.notePopUpHeading(expectedHeaderName, 15) != null) {
								log(LogStatus.INFO, "PopUp Name has been verified to: " + expectedHeaderName, YesNo.No);
							}

							else {
								log(LogStatus.ERROR,
										"PopUp Name has been not been verified, Expected: " + expectedHeaderName,
										YesNo.No);
								sa.assertTrue(false,
										"PopUp Name has been not been verified, Expected: " + expectedHeaderName);
							}
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1SubjectName, task1Notes,
											relatedToArray);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);
								sa.assertTrue(true,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
								refresh(driver);
								ThreadSleep(2000);
								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}
								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
											null, updatedSuggestedTags, null, false, null, null, null, null, null,
											null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);
										ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
												getAdvanceDueDate, IconType.Call, task1SubjectName, updatedNotesOfTask,
												true, false, updatedRelatedToVerify, null);
										if (updatedresult.isEmpty()) {
											log(LogStatus.PASS,
													"------" + task1SubjectName
															+ " record has been verified on intraction------",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult + "------",
													YesNo.No);
											sa.assertTrue(false,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult + "------");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}
								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}
							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value",
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value");
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record", YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record");
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj2, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj2);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc033_CreateACallWithoutMeetingNotesAndAddTheNotesFromEditButton(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("2"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject8 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes8;
		String relatedTo = AMNNR_RelatedTo8;
//		String priority = AMNNR_AdvancePriority8;
//		String status = AMNNR_AdvanceStatus8;
		String task1ButtonName = AMNNR_ActivityType54;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		String recordName = AMNNR_Contact2;

		String updatedNotesOfTask = AMNNR_Notes9;
		String[] relatedToVerify = AMNNR_ATRelatedTo6.split("<break>");
		String[] updatedRelatedToVerify = AMNNR_ATRelatedTo7.split("<break>");

		String[][] task1UpdateBasicSection = { { AMNNR_CallLabel2, updatedNotesOfTask } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag9.split("<break>", -1);

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Create Task: " + task1SubjectName + " in Activity Timeline Section---------",
				YesNo.No);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Interaction Section---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab, recordName, 30)) {
				log(LogStatus.INFO, recordName + " record has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, relatedToVerify, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

						if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

							log(LogStatus.INFO,
									"-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
									YesNo.No);

							if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
									"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

								String url = getURL(driver, 10);

								ThreadSleep(10000);
								ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
										.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSection,
												task1AdvancedSection, null);
								if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
									log(LogStatus.INFO,
											"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
											YesNo.No);

									refresh(driver);
									ThreadSleep(2000);

									if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
											"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
										log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
										if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
												null, updatedSuggestedTags, null, false, null, null, null, null, null,
												null)) {
											log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

											CommonLib.refresh(driver);

											if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
													"Edit Note Button of: " + task1SubjectName,
													action.SCROLLANDBOOLEAN)) {
												log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup",
														YesNo.No);

												String url2 = getURL(driver, 10);

												ThreadSleep(10000);
												ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
														.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
																task1UpdateBasicSection, task1AdvancedSection, null);
												if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
													log(LogStatus.INFO,
															"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
															YesNo.No);
													CommonLib.ThreadSleep(3000);

												} else {
													log(LogStatus.ERROR,
															"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																	+ NotesPopUpPrefilledNegativeResultUpdated,
															YesNo.No);
													sa.assertTrue(false,
															"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																	+ NotesPopUpPrefilledNegativeResultUpdated);

												}

											} else {
												log(LogStatus.ERROR,
														"Not able to click on Edit button on Subjec Link Popup of Task: "
																+ task1SubjectName,
														YesNo.No);
												sa.assertTrue(false,
														"Not able to click on Edit button on Subjec Link Popup of Task: "
																+ task1SubjectName);
											}

											if (lp.clickOnTab(projectName, tabObj2)) {

												log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

												if (BP.clickOnAlreadyCreated_Lighting(environment, mode,
														TabName.ContactTab, recordName, 30)) {
													log(LogStatus.INFO, recordName + " record has been open", YesNo.No);
													ThreadSleep(4000);
													if (BP.clicktabOnPage("Acuity")) {
														log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

														ArrayList<String> updatedresult = BP
																.verifyRecordOnInteractionCard(getAdvanceDueDate,
																		IconType.Call, task1SubjectName,
																		updatedNotesOfTask, true, false,
																		updatedRelatedToVerify, null);
														if (updatedresult.isEmpty()) {
															log(LogStatus.PASS, "------" + task1SubjectName
																	+ " record has been verified on intraction------",
																	YesNo.No);

														} else {
															log(LogStatus.ERROR, "------" + task1SubjectName
																	+ " record is not verified on intraction, Reason: "
																	+ updatedresult + "------", YesNo.No);
															sa.assertTrue(false, "------" + task1SubjectName
																	+ " record is not verified on intraction, Reason: "
																	+ updatedresult + "------");
														}

													} else {
														log(LogStatus.ERROR, "Not able to click on Acuity Tab",
																YesNo.No);
														sa.assertTrue(false, "Not able to click on Acuity Tab");
													}

												} else {
													log(LogStatus.ERROR, "Not able to open " + recordName + " record",
															YesNo.No);
													sa.assertTrue(false, "Not able to open " + recordName + " record");
												}
											} else {
												log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj2, YesNo.No);
												sa.assertTrue(false, "Not able to click on Tab : " + tabObj2);
											}

										} else {
											log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
											sa.assertTrue(false, "Activity timeline record has not Updated");
										}

									} else {
										log(LogStatus.ERROR,
												"Not able to click on Edit button on Subject Link Popup of Task: "
														+ task1SubjectName,
												YesNo.No);
										sa.assertTrue(false,
												"Not able to click on Edit button on Subject Link Popup of Task: "
														+ task1SubjectName);
									}

								} else {
									log(LogStatus.ERROR,
											"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
													+ NotesPopUpPrefilledNegativeResult,
											YesNo.No);
									sa.assertTrue(false,
											"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
													+ NotesPopUpPrefilledNegativeResult);
								}

							} else {
								log(LogStatus.ERROR, "Not able to click on Edit button on Subjec Link Popup of Task: "
										+ task1SubjectName, YesNo.No);
								sa.assertTrue(false, "Not able to click on Edit button on Subjec Link Popup of Task: "
										+ task1SubjectName);
							}

							driver.close();
							driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
						} else {

							log(LogStatus.ERROR,
									"-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
									YesNo.Yes);
							BaseLib.sa.assertTrue(false,
									"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record", YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record");
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj2, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj2);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc034_CreateACallWithMeetingNotesAndAddTheNotesFromEditButtonOfTaskLayOut(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("4"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject10 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes10;
		String relatedTo = AMNNR_RelatedTo10;
//		String priority = AMNNR_AdvancePriority10;
//		String status = AMNNR_AdvanceStatus10;
		String task1ButtonName = AMNNR_ActivityType54;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };
		String[] suggestedTags = AMNNR_SuggestedTag10.split("<break>", -1);

		String RelatedToVerify = relatedTo + AMNNR_RelatedTo11;
		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, RelatedToVerify } };

		String recordName = AMNNR_Contact3;

		String updatedNotesOfTask = AMNNR_Notes11;
		String[] relatedToVerify = AMNNR_ATRelatedTo8.split("<break>");
		String[] updatedRelatedToVerify = AMNNR_ATRelatedTo9.split("<break>");

		String[][] task1UpdateBasicSection = { { AMNNR_CallLabel2, updatedNotesOfTask } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag11.split("<break>", -1);

		String updatedRelatedToVerifyInNotes = RelatedToVerify + AMNNR_RelatedTo12;
		String[][] task1UpdatedBasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, updatedNotesOfTask }, { AMNNR_CallLabel3, updatedRelatedToVerifyInNotes } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Create Task: " + task1SubjectName + " in Activity Timeline Section---------",
				YesNo.No);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Interaction Section---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab, recordName, 30)) {
				log(LogStatus.INFO, recordName + " record has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, relatedToVerify, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

						if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

							log(LogStatus.INFO,
									"-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
									YesNo.No);

							if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
									"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

								String url = getURL(driver, 10);

								ThreadSleep(10000);
								ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
										.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url,
												task1BasicSectionVerification, task1AdvancedSection, null);
								if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
									log(LogStatus.INFO,
											"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
											YesNo.No);

									refresh(driver);

									if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
											"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
										log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

										if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
												null, updatedSuggestedTags, null, false, null, null, null, null, null,
												null)) {
											log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

											CommonLib.refresh(driver);

											if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
													"Edit Note Button of: " + task1SubjectName,
													action.SCROLLANDBOOLEAN)) {
												log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup",
														YesNo.No);

												String url2 = getURL(driver, 10);

												ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
														.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
																task1UpdatedBasicSectionVerification,
																task1AdvancedSection, null);
												if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
													log(LogStatus.INFO,
															"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
															YesNo.No);

												} else {
													log(LogStatus.ERROR,
															"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																	+ NotesPopUpPrefilledNegativeResultUpdated,
															YesNo.No);
													sa.assertTrue(false,
															"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																	+ NotesPopUpPrefilledNegativeResultUpdated);

												}

											} else {
												log(LogStatus.ERROR,
														"Not able to click on Edit button on Subjec Link Popup of Task: "
																+ task1SubjectName,
														YesNo.No);
												sa.assertTrue(false,
														"Not able to click on Edit button on Subjec Link Popup of Task: "
																+ task1SubjectName);
											}

											if (lp.clickOnTab(projectName, tabObj2)) {

												log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

												if (BP.clickOnAlreadyCreated_Lighting(environment, mode,
														TabName.ContactTab, recordName, 30)) {
													log(LogStatus.INFO, recordName + " record has been open", YesNo.No);
													ThreadSleep(4000);
													if (BP.clicktabOnPage("Acuity")) {
														log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

														ArrayList<String> updatedresult = BP
																.verifyRecordOnInteractionCard(getAdvanceDueDate,
																		IconType.Call, task1SubjectName,
																		updatedNotesOfTask, true, false,
																		updatedRelatedToVerify, null);
														if (updatedresult.isEmpty()) {
															log(LogStatus.PASS, "------" + task1SubjectName
																	+ " record has been verified on intraction------",
																	YesNo.No);

														} else {
															log(LogStatus.ERROR, "------" + task1SubjectName
																	+ " record is not verified on intraction, Reason: "
																	+ updatedresult + "------", YesNo.No);
															sa.assertTrue(false, "------" + task1SubjectName
																	+ " record is not verified on intraction, Reason: "
																	+ updatedresult + "------");
														}

													} else {
														log(LogStatus.ERROR, "Not able to click on Acuity Tab",
																YesNo.No);
														sa.assertTrue(false, "Not able to click on Acuity Tab");
													}

												} else {
													log(LogStatus.ERROR, "Not able to open " + recordName + " record",
															YesNo.No);
													sa.assertTrue(false, "Not able to open " + recordName + " record");
												}
											} else {
												log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj2, YesNo.No);
												sa.assertTrue(false, "Not able to click on Tab : " + tabObj2);
											}

										} else {
											log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
											sa.assertTrue(false, "Activity timeline record has not Updated");
										}

									} else {
										log(LogStatus.ERROR,
												"Not able to click on Edit button on Subjec Link Popup of Task: "
														+ task1SubjectName,
												YesNo.No);
										sa.assertTrue(false,
												"Not able to click on Edit button on Subjec Link Popup of Task: "
														+ task1SubjectName);
									}

								} else {
									log(LogStatus.ERROR,
											"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
													+ NotesPopUpPrefilledNegativeResult,
											YesNo.No);
									sa.assertTrue(false,
											"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
													+ NotesPopUpPrefilledNegativeResult);
								}

							} else {
								log(LogStatus.ERROR, "Not able to click on Edit button on Subjec Link Popup of Task: "
										+ task1SubjectName, YesNo.No);
								sa.assertTrue(false, "Not able to click on Edit button on Subjec Link Popup of Task: "
										+ task1SubjectName);
							}

							driver.close();
							driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
						} else {

							log(LogStatus.ERROR,
									"-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
									YesNo.Yes);
							BaseLib.sa.assertTrue(false,
									"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record", YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record");
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}
		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc035_CreateACallWithMeetingNotesAndUpdateTheNotesFromEditNoteButtonOnInteractionSectionOfAcuityTab(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("4"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject13 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes13;
		String relatedTo = AMNNR_RelatedTo13;

//		String priority = AMNNR_AdvancePriority13;
//		String status = AMNNR_AdvanceStatus13;
		String task1ButtonName = AMNNR_ActivityType54;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };
		String[] suggestedTags = null;

		String recordName = AMNNR_Contact4;

		String updatedNotesOfTask = AMNNR_Notes14;
		String[] relatedToVerify = AMNNR_ATRelatedTo10.split("<break>");
		String[] updatedRelatedToVerify = AMNNR_ATRelatedTo11.split("<break>");

		String updatedRelatedTo = relatedTo + AMNNR_RelatedTo14;
		String[][] task1UpdateBasicSection = { { AMNNR_CallLabel2, updatedNotesOfTask } };
		String[][] task1UpdateBasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, updatedNotesOfTask }, { AMNNR_CallLabel3, updatedRelatedTo } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag14.split("<break>", -1);

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Create Task: " + task1SubjectName + " in Activity Timeline Section---------",
				YesNo.No);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Interaction Section---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab, recordName, 30)) {
				log(LogStatus.INFO, recordName + " record has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, relatedToVerify, null);
					if (result.isEmpty()) {

						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

						ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
								task1SubjectName, task1BasicSection, task1AdvancedSection, IconType.Call,
								PageName.AcuityDetails);

						if (subjectLinkPopUpNegativeResult.isEmpty()) {
							log(LogStatus.PASS, "------" + task1SubjectName
									+ " record is able to open popup after click on it and verify its data" + "------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------",
									YesNo.Yes);
							sa.assertTrue(false,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------");

						}

						String url = getURL(driver, 10);

						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							ThreadSleep(1000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSection,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);
								ThreadSleep(2000);
								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}
								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
											null, updatedSuggestedTags, null, false, null, null, null, null, null,
											null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);
										ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
												getAdvanceDueDate, IconType.Call, task1SubjectName, updatedNotesOfTask,
												true, false, updatedRelatedToVerify, null);
										if (updatedresult.isEmpty()) {
											log(LogStatus.PASS,
													"------" + task1SubjectName
															+ " record has been verified on intraction------",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult + "------",
													YesNo.No);
											sa.assertTrue(false,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult + "------");
										}

										String url2 = getURL(driver, 10);

										if (BP.crossIconButtonInNotePopUp(5) != null) {
											click(driver, BP.crossIconButtonInNotePopUp(20),
													"Clicked on Cross Icon of PopUp", action.SCROLLANDBOOLEAN);
										}
										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											ThreadSleep(1000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															task1UpdateBasicSectionVerification, task1AdvancedSection,
															null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);
											}
										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}
								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}
							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value",
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value");
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record", YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record");
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc036_CreateACallAndVerifyTaskHyperlinkUpdateTheTaskSubjectAndVerifyTheCallHyperlink(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("5"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject15 + " " + AMNNR_ActivityType54;
		String task1UpdatedSubjectName = AMNNR_Subject16 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes15;

		String relatedTo = AMNNR_RelatedTo15;

		String priority = AMNNR_AdvancePriority15;
//		String status = AMNNR_AdvanceStatus15;
		String task1ButtonName = AMNNR_ActivityType54;
		String getAdvanceDueDateInTaskSection = "";

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		String[][] tasksSectionVerificationData = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, "Not Started" },
				{ AMNNR_TaskLabel4, getAdvanceDueDateInTaskSection } };

		String[][] followUpTask1AdvancedSectionVerificationInNotesPopup = { { AMNNR_TaskLabel4, getAdvanceDueDate },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, "Not Started" },
				{ AMNNR_TaskLabel6, priority } };

		String[][] task1UpdateBasicSectionVerification = { { AMNNR_CallLabel1, task1UpdatedSubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, relatedTo } };

		String[][] updateFollowUpTask1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate } };

		String[] suggestedTags = null;

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;

		String[] relatedToVerify = AMNNR_ATRelatedTo12.split("<break>");

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO, "---------Now Going to Create Task: " + task1UpdatedSubjectName + " and followUp task: "
				+ task1SubjectName + " in Activity Timeline Section---------", YesNo.No);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();

			if (BP.createTasksWithVerificationOfFollowUpTaskSubjectNameAfterClickThenAgainUpdateTaskNameandVerifyFollowUpTaskSubjectName(
					projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection, suggestedTags,
					tasksSectionVerificationData, task1UpdatedSubjectName)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		log(LogStatus.INFO, "---------Now Going to Verify Task: " + task1UpdatedSubjectName + " and followUp task: "
				+ task1SubjectName + " in Interaction Section---------", YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					ArrayList<String> result2 = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1UpdatedSubjectName, task1Notes, true, false, relatedToVerify, null);
					if (result2.isEmpty()) {

						log(LogStatus.PASS,
								"------" + task1UpdatedSubjectName + " record has been verified on intraction------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR, "------" + task1UpdatedSubjectName
								+ " record is not verified on intraction, Reason: " + result2 + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1UpdatedSubjectName
								+ " record is not verified on intraction, Reason: " + result2 + "------");
					}

					CommonLib.refresh(driver);
					ThreadSleep(10000);
					if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

						log(LogStatus.INFO,
								"-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
								YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSection,
											followUpTask1AdvancedSectionVerificationInNotesPopup, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value for: "
												+ task1SubjectName,
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value for: "
												+ task1SubjectName + ", Reason: " + NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value for: "
												+ task1SubjectName + ", Reason: " + NotesPopUpPrefilledNegativeResult);

							}

							CommonLib.refresh(driver);

							/*
							 * CommonLib.ThreadSleep(5000);
							 * 
							 * if (BP.updateActivityTimelineRecordForMultipleFollowUpTasks(projectName,
							 * null, updateFollowUpTask1AdvancedSection, null, null, null, false, false)) {
							 * log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);
							 * 
							 * } else { log(LogStatus.FAIL, "Activity timeline record has not Updated",
							 * YesNo.No); sa.assertTrue(false, "Activity timeline record has not Updated");
							 * }
							 */

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subjec Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subjec Link Popup of Task: "
									+ task1SubjectName);
						}

						driver.close();
						driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					} else {

						log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
								YesNo.Yes);
						BaseLib.sa.assertTrue(false,
								"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

					}

					if (lp.clickOnTab(projectName, tabObj1)) {

						log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

						if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType,
								recordName, 30)) {
							log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open",
									YesNo.No);
							ThreadSleep(4000);
							if (BP.clicktabOnPage("Acuity")) {
								log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

								String url2 = getURL(driver, 10);

								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}
								if (click(driver, BP.editButtonOnInteractionCard(task1UpdatedSubjectName, 20),
										"Edit Note Button of: " + task1UpdatedSubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

									ThreadSleep(1000);
									ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
											.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
													task1UpdateBasicSectionVerification, task1AdvancedSection, null);
									if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
										log(LogStatus.INFO,
												"Notes Popup has been verified and Notes popup is opening in same page with prefilled value for: "
														+ task1UpdatedSubjectName,
												YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value for: "
														+ task1UpdatedSubjectName + ", Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated,
												YesNo.No);
										sa.assertTrue(false,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value for: "
														+ task1UpdatedSubjectName + ", Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated);
									}
								} else {
									log(LogStatus.ERROR,
											"Not able to click on Edit Note button of " + task1UpdatedSubjectName,
											YesNo.No);
									sa.assertTrue(false,
											"Not able to click on Edit Note button of " + task1UpdatedSubjectName);
								}

							} else {
								log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
								sa.assertTrue(false, "Not able to click on Acuity Tab");
							}

						} else {
							log(LogStatus.ERROR,
									"Not able to open " + recordName + " record of record type " + recordType,
									YesNo.No);
							sa.assertTrue(false,
									"Not able to open " + recordName + " record of record type " + recordType);
						}
					} else {
						log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
						sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
					}

				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc037_CreateACallWithMeetingNotesAndUpdateTheNotesForFollowUpTasksWhenCreatedMultipleFollowUpTasks(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("6"));
		ExcelUtils.writeData(AcuityDataSheetFilePath, AdvanceDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"AMNNR_Activity056", excelLabel.Advance_Due_Date);

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject17 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes17;
		String relatedTo = AMNNR_RelatedTo17;

		String priority = AMNNR_AdvancePriority17;
//		String status = AMNNR_AdvanceStatus17;
		String task1ButtonName = AMNNR_ActivityType54;
		String[] suggestedTags = "".split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;
		String task1UpdateTaskSection1Subject = AMNNR_Subject18 + " " + AMNNR_ActivityType54;
		String task1UpdateTaskSection1DueDateOnly = AdvanceDueDate;
		String task1UpdateTaskSection2Subject = AMNNR_Subject19 + " " + AMNNR_ActivityType54;
		String task1UpdateTaskSection2DueDateOnly = AdvanceDueDate;
		String task1UpdateTaskSection3Subject = AMNNR_Subject20 + " " + AMNNR_ActivityType54;
		String task1UpdateTaskSection3DueDateOnly = AdvanceDueDate;

		String updatedNotesOfTask = AMNNR_Notes21;
		String[][] task1UpdateBasicSection = { { AMNNR_CallLabel2, updatedNotesOfTask } };
		String[][] task1UpdateTaskSection1 = { { AMNNR_TaskLabel1, task1UpdateTaskSection1Subject },
				{ AMNNR_TaskLabel4, task1UpdateTaskSection1DueDateOnly } };
		String[][] task1UpdateTaskSection2 = { { AMNNR_TaskLabel1, task1UpdateTaskSection2Subject },
				{ AMNNR_TaskLabel4, task1UpdateTaskSection2DueDateOnly } };
		String[][] task1UpdateTaskSection3 = { { AMNNR_TaskLabel1, task1UpdateTaskSection3Subject },
				{ AMNNR_TaskLabel4, task1UpdateTaskSection3DueDateOnly } };
		String[][][] task1UpdateTaskSection = { task1UpdateTaskSection1, task1UpdateTaskSection2,
				task1UpdateTaskSection3 };

		String[] relatedToVerify = (crmUser1FirstName + " " + crmUser1LastName + AMNNR_ATRelatedTo13).split("<break>");
		String[] updatedRelatedToVerify = AMNNR_ATRelatedTo14.split("<break>", -1);

		String updatedRelatedTo = relatedTo + AMNNR_RelatedTo21;

		String[][] task1UpdateBasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, updatedNotesOfTask }, { AMNNR_CallLabel3, updatedRelatedTo } };

		String[][] followUptask1BasicSectionVerification = { { AMNNR_TaskLabel1, task1UpdateTaskSection1Subject },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_CallLabel3, updatedRelatedTo } };
		String[][] followUptask2BasicSectionVerification = { { AMNNR_TaskLabel1, task1UpdateTaskSection2Subject },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_CallLabel3, updatedRelatedTo } };
		String[][] followUptask3BasicSectionVerification = { { AMNNR_TaskLabel1, task1UpdateTaskSection3Subject },
				{ AMNNR_TaskLabel2, updatedNotesOfTask }, { AMNNR_CallLabel3, updatedRelatedTo } };

		String[][] followUptask1AdvanceSectionVerification = { { AMNNR_TaskLabel4, task1UpdateTaskSection1DueDateOnly },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, "Not Started" },
				{ AMNNR_TaskLabel6, priority } };

		String[][] followUptask2AdvanceSectionVerification = { { AMNNR_TaskLabel4, task1UpdateTaskSection2DueDateOnly },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, "Not Started" },
				{ AMNNR_TaskLabel6, priority } };

		String[][] followUptask3AdvanceSectionVerification = { { AMNNR_TaskLabel4, task1UpdateTaskSection3DueDateOnly },
				{ AMNNR_TaskLabel7, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel5, "Not Started" },
				{ AMNNR_TaskLabel6, priority } };

		String[] updatedSuggestedTags = AMNNR_SuggestedTag21.split("<break>", -1);

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Create Task: " + task1SubjectName + " in Activity Timeline Section---------",
				YesNo.No);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Interaction Section---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, relatedToVerify, null);
					if (result.isEmpty()) {

						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

						ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
								task1SubjectName, task1BasicSection, task1AdvancedSection, IconType.Call,
								PageName.AcuityDetails);

						if (subjectLinkPopUpNegativeResult.isEmpty()) {
							log(LogStatus.PASS, "------" + task1SubjectName
									+ " record is able to open popup after click on it and verify its data" + "------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------",
									YesNo.Yes);
							sa.assertTrue(false,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------");

						}

						String url = getURL(driver, 10);

						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							ThreadSleep(1000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSection,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);
								ThreadSleep(2000);
								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}
								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									if (BP.updateActivityTimelineRecordForMultipleFollowUpTasks(projectName,
											task1UpdateBasicSection, null, task1UpdateTaskSection, updatedSuggestedTags,
											null, false, false)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);
										ArrayList<String> updatedresult1 = BP.verifyRecordOnInteractionCard(
												getAdvanceDueDate, null, task1SubjectName, updatedNotesOfTask, true,
												false, updatedRelatedToVerify, null);
										if (updatedresult1.isEmpty()) {
											log(LogStatus.PASS,
													"------" + task1SubjectName
															+ " record has been verified on intraction------",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult1 + "------",
													YesNo.No);
											sa.assertTrue(false,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult1 + "------");
										}

										ArrayList<String> updatedresult2 = BP.verifyRecordOnInteractionCard(
												task1UpdateTaskSection1DueDateOnly, IconType.Task,
												task1UpdateTaskSection1Subject, updatedNotesOfTask, true, false,
												updatedRelatedToVerify, null);
										if (updatedresult2.isEmpty()) {
											log(LogStatus.PASS,
													"------" + task1UpdateTaskSection1Subject
															+ " record has been verified on intraction------",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1UpdateTaskSection1Subject
															+ " record is not verified on intraction, Reason: "
															+ updatedresult2 + "------",
													YesNo.No);
											sa.assertTrue(false,
													"------" + task1UpdateTaskSection1Subject
															+ " record is not verified on intraction, Reason: "
															+ updatedresult2 + "------");
										}

										ArrayList<String> updatedresult3 = BP.verifyRecordOnInteractionCard(
												task1UpdateTaskSection2DueDateOnly, IconType.Task,
												task1UpdateTaskSection2Subject, updatedNotesOfTask, true, false,
												updatedRelatedToVerify, null);
										if (updatedresult3.isEmpty()) {
											log(LogStatus.PASS,
													"------" + task1UpdateTaskSection2Subject
															+ " record has been verified on intraction------",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1UpdateTaskSection2Subject
															+ " record is not verified on intraction, Reason: "
															+ updatedresult3 + "------",
													YesNo.No);
											sa.assertTrue(false,
													"------" + task1UpdateTaskSection2Subject
															+ " record is not verified on intraction, Reason: "
															+ updatedresult3 + "------");
										}

										ArrayList<String> updatedresult4 = BP.verifyRecordOnInteractionCard(
												task1UpdateTaskSection3DueDateOnly, IconType.Task,
												task1UpdateTaskSection3Subject, updatedNotesOfTask, true, false,
												updatedRelatedToVerify, null);
										if (updatedresult4.isEmpty()) {
											log(LogStatus.PASS,
													"------" + task1UpdateTaskSection3Subject
															+ " record has been verified on intraction------",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1UpdateTaskSection3Subject
															+ " record is not verified on intraction, Reason: "
															+ updatedresult4 + "------",
													YesNo.No);
											sa.assertTrue(false,
													"------" + task1UpdateTaskSection3Subject
															+ " record is not verified on intraction, Reason: "
															+ updatedresult4 + "------");
										}

										String url2 = getURL(driver, 10);

										if (BP.crossIconButtonInNotePopUp(5) != null) {
											click(driver, BP.crossIconButtonInNotePopUp(20),
													"Clicked on Cross Icon of PopUp", action.SCROLLANDBOOLEAN);
										}
										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											ThreadSleep(1000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated1 = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															task1UpdateBasicSectionVerification, task1AdvancedSection,
															null);
											if (NotesPopUpPrefilledNegativeResultUpdated1.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated1,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated1);
											}
										} else {
											log(LogStatus.ERROR,
													"Not able to click on Edit Note button " + task1SubjectName,
													YesNo.No);
											sa.assertTrue(false,
													"Not able to click on Edit Note button " + task1SubjectName);
										}

										CommonLib.refresh(driver);

										if (BP.crossIconButtonInNotePopUp(5) != null) {
											click(driver, BP.crossIconButtonInNotePopUp(20),
													"Clicked on Cross Icon of PopUp", action.SCROLLANDBOOLEAN);
										}
										if (click(driver,
												BP.editButtonOnInteractionCard(task1UpdateTaskSection1Subject, 20),
												"Edit Note Button of: " + task1UpdateTaskSection1Subject,
												action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											ThreadSleep(1000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated2 = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															followUptask1BasicSectionVerification,
															followUptask1AdvanceSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated2.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated2,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated2);
											}
										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button :"
													+ task1UpdateTaskSection1Subject, YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button :"
													+ task1UpdateTaskSection1Subject);
										}

										CommonLib.refresh(driver);
										if (BP.crossIconButtonInNotePopUp(5) != null) {
											click(driver, BP.crossIconButtonInNotePopUp(20),
													"Clicked on Cross Icon of PopUp", action.SCROLLANDBOOLEAN);
										}
										if (click(driver,
												BP.editButtonOnInteractionCard(task1UpdateTaskSection2Subject, 20),
												"Edit Note Button of: " + task1UpdateTaskSection2Subject,
												action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											ThreadSleep(1000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated3 = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															followUptask2BasicSectionVerification,
															followUptask2AdvanceSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated3.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated3,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated3);
											}
										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button "
													+ task1UpdateTaskSection2Subject, YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button "
													+ task1UpdateTaskSection2Subject);
										}

										CommonLib.refresh(driver);
										if (BP.crossIconButtonInNotePopUp(5) != null) {
											click(driver, BP.crossIconButtonInNotePopUp(20),
													"Clicked on Cross Icon of PopUp", action.SCROLLANDBOOLEAN);
										}
										if (click(driver,
												BP.editButtonOnInteractionCard(task1UpdateTaskSection3Subject, 20),
												"Edit Note Button of: " + task1UpdateTaskSection3Subject,
												action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											ThreadSleep(10000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated4 = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															followUptask3BasicSectionVerification,
															followUptask3AdvanceSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated4.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated4,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated4);
											}
										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button "
													+ task1UpdateTaskSection3Subject, YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button "
													+ task1UpdateTaskSection3Subject);
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}
								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}
							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value",
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value");
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc038_ClickOnTheCallSubjectFromInteractionSectionAndAddTheNotesByClickingOnTagButton(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String AdvanceDueDate = ExcelUtils.readData(AcuityDataSheetFilePath, "Activity Timeline",
				excelLabel.Variable_Name, "AMNNR_Activity056", excelLabel.Advance_Due_Date);
		String getAdvanceDueDate = AdvanceDueDate;
		String task1SubjectName = AMNNR_Subject17 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes21;
		String relatedTo = AMNNR_RelatedTo17;

		String verificationRelatedTo = relatedTo + AMNNR_RelatedTo21;

//		String priority = AMNNR_AdvancePriority17;
//		String status = AMNNR_AdvanceStatus17;

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo14.split("<break>");
		String updatedRelatedTo = AMNNR_RelatedTo22;

		String[] updatedSuggestedTags = "".split("<break>", -1);

		String relatedToNotContains = crmUser2FirstName + " " + crmUser2LastName;
		String[][] relatedAssociationNotContains = { { AMNNR_CallLabel3, relatedToNotContains } };

		String updatedRelatedToVerifyInNotes = verificationRelatedTo + "<break>" + updatedRelatedTo;

		String[][] task1UpdatedBasicSection = { { AMNNR_CallLabel3, updatedRelatedTo } };
		String[][] task1UpdatedBasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, updatedRelatedToVerifyInNotes } };

		String[] updatedRelatedToVerify = AMNNR_ATRelatedTo15.split("<break>");

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

						if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

							log(LogStatus.INFO,
									"-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
									YesNo.No);

							if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
									"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

								String url = getURL(driver, 10);

								ThreadSleep(10000);
								ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
										.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url,
												task1BasicSectionVerification, task1AdvancedSectionVerification, null);
								if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
									log(LogStatus.INFO,
											"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
											YesNo.No);

								} else {
									log(LogStatus.ERROR,
											"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
													+ NotesPopUpPrefilledNegativeResult,
											YesNo.No);
									sa.assertTrue(false,
											"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
													+ NotesPopUpPrefilledNegativeResult);
								}

								refresh(driver);
								ThreadSleep(1000);

								if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
									ArrayList<String> verifyRelatedToNotContainsNegativeResults = BP
											.verifyRelatedToNotContains(relatedAssociationNotContains);
									if (verifyRelatedToNotContainsNegativeResults.isEmpty()) {
										log(LogStatus.INFO,
												"RelatedTo Association Not Contains some Records has been verified",
												YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"RelatedTo Association Not Contains some Records has not been verified, Reason: "
														+ verifyRelatedToNotContainsNegativeResults,
												YesNo.No);
										sa.assertTrue(false,
												"RelatedTo Association Not Contains some Records has not been verified, Reason: "
														+ verifyRelatedToNotContainsNegativeResults);
									}

								} else {
									log(LogStatus.ERROR,
											"Not able to click on Edit button on Subjec Link Popup of Task: "
													+ task1SubjectName,
											YesNo.No);
									sa.assertTrue(false,
											"Not able to click on Edit button on Subjec Link Popup of Task: "
													+ task1SubjectName);
								}

								refresh(driver);
								ThreadSleep(1000);

								if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
									if (BP.updateActivityTimelineRecord(projectName, task1UpdatedBasicSection, null,
											null, updatedSuggestedTags, null, false, null, null, null, null, null,
											null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);

										String url2 = getURL(driver, 10);

										ThreadSleep(10000);

										if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup",
													YesNo.No);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															task1UpdatedBasicSectionVerification,
															task1AdvancedSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);

											}

										} else {
											log(LogStatus.ERROR,
													"Not able to click on Edit button on Subjec Link Popup of Task: "
															+ task1SubjectName,
													YesNo.No);
											sa.assertTrue(false,
													"Not able to click on Edit button on Subjec Link Popup of Task: "
															+ task1SubjectName);
										}

										CommonLib.refresh(driver);
										CommonLib.ThreadSleep(5000);

										if (lp.clickOnTab(projectName, tabObj1)) {

											log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

											if (BP.clickOnAlreadyCreated_Lighting(environment, mode,
													TabName.InstituitonsTab, recordType, recordName, 30)) {
												log(LogStatus.INFO, recordName + " record of record type " + recordType
														+ " has been open", YesNo.No);
												ThreadSleep(4000);
												if (BP.clicktabOnPage("Acuity")) {
													log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

													ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
															getAdvanceDueDate, IconType.Call, task1SubjectName,
															task1Notes, true, false, updatedRelatedToVerify, null);
													if (updatedresult.isEmpty()) {
														log(LogStatus.PASS, "------" + task1SubjectName
																+ " record has been verified on intraction------",
																YesNo.No);

													} else {
														log(LogStatus.ERROR, "------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------", YesNo.No);
														sa.assertTrue(false, "------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------");
													}

												} else {
													log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
													sa.assertTrue(false, "Not able to click on Acuity Tab");
												}

											} else {
												log(LogStatus.ERROR, "Not able to open " + recordName
														+ " record of record type " + recordType, YesNo.No);
												sa.assertTrue(false, "Not able to open " + recordName
														+ " record of record type " + recordType);
											}
										} else {
											log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
											sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}

								} else {
									log(LogStatus.ERROR,
											"Not able to click on Edit button on Subjec Link Popup of Task: "
													+ task1SubjectName,
											YesNo.No);
									sa.assertTrue(false,
											"Not able to click on Edit button on Subjec Link Popup of Task: "
													+ task1SubjectName);
								}

							} else {
								log(LogStatus.ERROR, "Not able to click on Edit button on Subjec Link Popup of Task: "
										+ task1SubjectName, YesNo.No);
								sa.assertTrue(false, "Not able to click on Edit button on Subjec Link Popup of Task: "
										+ task1SubjectName);
							}

							driver.close();
							driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
						} else {

							log(LogStatus.ERROR,
									"-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
									YesNo.Yes);
							BaseLib.sa.assertTrue(false,
									"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc039_CreateACallWithMeetingNotesAndUpdateTheSameWithRelatedRecordRemoveAndThenVerify(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("7"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject23 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes23;
		String relatedTo = AMNNR_RelatedTo23;

//		String priority = AMNNR_AdvancePriority23;
//		String status = AMNNR_AdvanceStatus23;
		String task1ButtonName = AMNNR_ActivityType54;
		String[] suggestedTags = AMNNR_SuggestedTag23.split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		String verificationRelatedTo = relatedTo + AMNNR_RelatedTo24;

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo16.split("<break>");

		String[] updatedRemoveRelatedAssociation = AMNNR_RelatedTo25.split("<break>", -1);

		String[] updatedSuggestedTags = null;

		String verificationUpdatedRelatedTo = AMNNR_RelatedTo26;

		String[][] task1UpdatedBasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, verificationUpdatedRelatedTo } };

		String[] updatedRelatedToVerifyInInteraction = AMNNR_ATRelatedTo17.split("<break>");

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO, "---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						String url = getURL(driver, 10);

						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							ThreadSleep(1000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);
								ThreadSleep(1000);

								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}
								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

									if (BP.updateActivityTimelineRecord(projectName, null, null, null,
											updatedSuggestedTags, updatedRemoveRelatedAssociation, false, null, null,
											null, null, null, null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);
										CommonLib.ThreadSleep(3000);

										String url2 = getURL(driver, 10);

										if (BP.crossIconButtonInNotePopUp(5) != null) {
											click(driver, BP.crossIconButtonInNotePopUp(20),
													"Clicked on Cross Icon of PopUp", action.SCROLLANDBOOLEAN);
										}
										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											ThreadSleep(1000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															task1UpdatedBasicSectionVerification,
															task1AdvancedSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);

											}

										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button");
										}

										CommonLib.refresh(driver);
										CommonLib.ThreadSleep(5000);
										ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
												getAdvanceDueDate, IconType.Call, task1SubjectName, task1Notes, true,
												false, updatedRelatedToVerifyInInteraction, null);
										if (updatedresult.isEmpty()) {
											log(LogStatus.PASS,
													"------" + task1SubjectName
															+ " record has been verified on intraction------",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult + "------",
													YesNo.No);
											sa.assertTrue(false,
													"------" + task1SubjectName
															+ " record is not verified on intraction, Reason: "
															+ updatedresult + "------");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button for task: " + task1SubjectName,
									YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button for task: " + task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc040_CreateACallAndTagContactsAccountsWhichAreNotCreatedInTheOrg(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("8"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject27 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes27;
		String relatedTo = AMNNR_RelatedTo27;

//		String priority = AMNNR_AdvancePriority27;
//		String status = AMNNR_AdvanceStatus27;
		String task1ButtonName = AMNNR_ActivityType54;
		String[] suggestedTags = AMNNR_SuggestedTag27.split("<break>", -1);
		String verificationRelatedTo = relatedTo + AMNNR_RelatedTo28;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo18.split("<break>");

		String relatedToNotContains = AMNNR_RelatedTo29;
		String[][] relatedAssociationNotContains = { { AMNNR_CallLabel3, relatedToNotContains } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(10000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);

								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}
								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									ThreadSleep(10000);

									ArrayList<String> verifyRelatedToNotContainsNegativeResults = BP
											.verifyRelatedToNotContains(relatedAssociationNotContains);
									if (verifyRelatedToNotContainsNegativeResults.isEmpty()) {
										log(LogStatus.INFO,
												"RelatedTo Association Not Contains some Records has been verified",
												YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"RelatedTo Association Not Contains some Records has not been verified, Reason: "
														+ verifyRelatedToNotContainsNegativeResults,
												YesNo.No);
										sa.assertTrue(false,
												"RelatedTo Association Not Contains some Records has not been verified, Reason: "
														+ verifyRelatedToNotContainsNegativeResults);
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

								refresh(driver);
								ThreadSleep(3000);
								String url2 = getURL(driver, 10);
								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}
								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									ThreadSleep(1000);
									ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
											.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
													task1BasicSectionVerification, task1AdvancedSectionVerification,
													null);
									if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
										log(LogStatus.INFO,
												"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
												YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated,
												YesNo.No);
										sa.assertTrue(false,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated);

									}

									CommonLib.refresh(driver);
									CommonLib.ThreadSleep(5000);
									ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
											getAdvanceDueDate, IconType.Call, task1SubjectName, task1Notes, true, false,
											RelatedToVerifyInInteraction, null);
									if (updatedresult.isEmpty()) {
										log(LogStatus.PASS, "------" + task1SubjectName
												+ " record has been verified on intraction------", YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"------" + task1SubjectName
														+ " record is not verified on intraction, Reason: "
														+ updatedresult + "------",
												YesNo.No);
										sa.assertTrue(false,
												"------" + task1SubjectName
														+ " record is not verified on intraction, Reason: "
														+ updatedresult + "------");
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc041_CreateACallAndTagContact1to50InCommentSectionAndCheckInPopUpContact1To50ShouldGetDisplayWithoutAnyContactGetsMissout(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("8"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject30 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes30;
		String relatedTo = AMNNR_RelatedTo30;

//		String priority = AMNNR_AdvancePriority30;
//		String status = AMNNR_AdvanceStatus30;
		String task1ButtonName = AMNNR_ActivityType54;
		String[] suggestedTags = null;
		String verificationRelatedTo = relatedTo;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo19.split("<break>");

		String updatedNotesOfTask = AMNNR_Notes31;

		String[][] task1UpdateBasicSection = { { AMNNR_CallLabel2, updatedNotesOfTask } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag31.split("<break>", -1);

		String[] updatedRelatedToVerifyInInteraction = AMNNR_ATRelatedTo20.split("<break>", -1);
		String[] updatedRelatedAssociationVerifyInInteraction = updatedSuggestedTags;

		String updatedRelatedToVerifyInNotes = (relatedTo + AMNNR_RelatedTo31);

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, updatedNotesOfTask }, { AMNNR_CallLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(1000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);

								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}
								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									ThreadSleep(10000);

									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
											null, updatedSuggestedTags, null, false, null, null, null, null, null,
											null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);

										ThreadSleep(1000);
										if (BP.crossIconButtonInNotePopUp(5) != null) {
											click(driver, BP.crossIconButtonInNotePopUp(20),
													"Clicked on Cross Icon of PopUp", action.SCROLLANDBOOLEAN);
										}
										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											String url2 = getURL(driver, 10);

											ThreadSleep(1000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															updatedTask1BasicSectionVerification,
															updatedTask1AdvancedSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);

											}

											CommonLib.refresh(driver);
											CommonLib.ThreadSleep(5000);
											ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
													getAdvanceDueDate, IconType.Call, task1SubjectName,
													updatedNotesOfTask, true, false,
													updatedRelatedToVerifyInInteraction,
													updatedRelatedAssociationVerifyInInteraction);
											if (updatedresult.isEmpty()) {
												log(LogStatus.PASS,
														"------" + task1SubjectName
																+ " record has been verified on intraction------",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------",
														YesNo.No);
												sa.assertTrue(false,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------");
											}

										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc042_CreateACallAndTag13RecordsForRelatedAssociationAnd50Contacts(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("8"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject32 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes32;
		String relatedTo = AMNNR_RelatedTo32;

//		String priority = AMNNR_AdvancePriority32;
//		String status = AMNNR_AdvanceStatus32;
		String task1ButtonName = AMNNR_ActivityType54;
		String[] suggestedTags = null;
		String verificationRelatedTo = relatedTo;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		String recordName = AMNNR_FirmLegalName2;
		String recordType = AMNNR_FirmRecordType2;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo21.split("<break>");

		String updatedNotesOfTask = AMNNR_Notes33;

		String[][] task1UpdateBasicSection = { { AMNNR_CallLabel2, updatedNotesOfTask } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag33.split("<break>", -1);

		String[] updatedRelatedToVerifyInInteraction = AMNNR_ATRelatedTo22.split("<break>", -1);
		String[] updatedRelatedAssociationVerifyInInteraction = updatedSuggestedTags;

		String updatedRelatedToVerifyInNotes = (relatedTo + AMNNR_RelatedTo33);

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, updatedNotesOfTask }, { AMNNR_CallLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(1000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);

								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}
								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									ThreadSleep(10000);

									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
											null, updatedSuggestedTags, null, false, null, null, null, null, null,
											null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);

										ThreadSleep(1000);

										if (BP.crossIconButtonInNotePopUp(5) != null) {
											click(driver, BP.crossIconButtonInNotePopUp(20),
													"Clicked on Cross Icon of PopUp", action.SCROLLANDBOOLEAN);
										}

										ArrayList<String> subjectLinkPopUpNegativeResult = BP
												.verifySubjectLinkPopUpOnIntraction(driver, task1SubjectName,
														updatedTask1BasicSectionVerification,
														updatedTask1AdvancedSectionVerification, IconType.Call,
														PageName.AcuityDetails);

										if (subjectLinkPopUpNegativeResult.isEmpty()) {
											log(LogStatus.PASS, "------" + task1SubjectName
													+ " record is able to open popup after click on it and verify its data"
													+ "------", YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1SubjectName
															+ " record link popup is not verified, Reason: "
															+ subjectLinkPopUpNegativeResult + "------",
													YesNo.Yes);
											sa.assertTrue(false,
													"------" + task1SubjectName
															+ " record link popup is not verified, Reason: "
															+ subjectLinkPopUpNegativeResult + "------");

										}

										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											String url2 = getURL(driver, 10);

											ThreadSleep(10000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															updatedTask1BasicSectionVerification,
															updatedTask1AdvancedSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);

											}

											CommonLib.refresh(driver);
											CommonLib.ThreadSleep(5000);
											ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
													getAdvanceDueDate, IconType.Call, task1SubjectName,
													updatedNotesOfTask, true, false,
													updatedRelatedToVerifyInInteraction,
													updatedRelatedAssociationVerifyInInteraction);
											if (updatedresult.isEmpty()) {
												log(LogStatus.PASS,
														"------" + task1SubjectName
																+ " record has been verified on intraction------",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------",
														YesNo.No);
												sa.assertTrue(false,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------");
											}

										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc043_CreateACallWithMeetingNotesByTaggingCustomObjectsInIt(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("8"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject34 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes34;
		String relatedTo = AMNNR_RelatedTo34;

//		String priority = AMNNR_AdvancePriority34;
//		String status = AMNNR_AdvanceStatus34;
		String task1ButtonName = AMNNR_ActivityType54;
		String[] suggestedTags = AMNNR_SuggestedTag34.split("<break>", -1);
		String verificationRelatedTo = relatedTo + AMNNR_RelatedTo35;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		String recordName = AMNNR_Contact4;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo23.split("<break>", -1);
		String[] RelatedAssociationVerifyInInteraction = (AMNNR_RelatedTo36).split("<break>", -1);

		String updatedNotesOfTask = AMNNR_Notes35;

		String[][] task1UpdateBasicSection = { { AMNNR_CallLabel2, updatedNotesOfTask } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag35.split("<break>", -1);

		String[] updatedRelatedToVerifyInInteraction = AMNNR_ATRelatedTo24.split("<break>", -1);
		String[] updatedRelatedAssociationVerifyInInteraction = (AMNNR_RelatedTo37).split("<break>", -1);

		String updatedRelatedToVerifyInNotes = (verificationRelatedTo + AMNNR_RelatedTo38);

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, updatedNotesOfTask }, { AMNNR_CallLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab, recordName, 30)) {
				log(LogStatus.INFO, recordName + " record has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResultBeforeUpdate = BP
							.verifySubjectLinkPopUpOnIntraction(driver, task1SubjectName, task1BasicSectionVerification,
									task1AdvancedSectionVerification, IconType.Call, PageName.AcuityDetails);

					if (subjectLinkPopUpNegativeResultBeforeUpdate.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResultBeforeUpdate + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResultBeforeUpdate + "------");

					}

					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction,
							RelatedAssociationVerifyInInteraction);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(1000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);

								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}
								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									ThreadSleep(10000);

									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
											null, updatedSuggestedTags, null, false, null, null, null, null, null,
											null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);

										ThreadSleep(1000);

										if (BP.crossIconButtonInNotePopUp(5) != null) {
											click(driver, BP.crossIconButtonInNotePopUp(20),
													"Clicked on Cross Icon of PopUp", action.SCROLLANDBOOLEAN);
										}

										ArrayList<String> subjectLinkPopUpNegativeResult = BP
												.verifySubjectLinkPopUpOnIntraction(driver, task1SubjectName,
														updatedTask1BasicSectionVerification,
														updatedTask1AdvancedSectionVerification, IconType.Call,
														PageName.AcuityDetails);

										if (subjectLinkPopUpNegativeResult.isEmpty()) {
											log(LogStatus.PASS, "------" + task1SubjectName
													+ " record is able to open popup after click on it and verify its data"
													+ "------", YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"------" + task1SubjectName
															+ " record link popup is not verified, Reason: "
															+ subjectLinkPopUpNegativeResult + "------",
													YesNo.Yes);
											sa.assertTrue(false,
													"------" + task1SubjectName
															+ " record link popup is not verified, Reason: "
															+ subjectLinkPopUpNegativeResult + "------");

										}

										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											String url2 = getURL(driver, 10);

											ThreadSleep(1000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															updatedTask1BasicSectionVerification,
															updatedTask1AdvancedSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);

											}

											CommonLib.refresh(driver);
											CommonLib.ThreadSleep(5000);
											ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
													getAdvanceDueDate, IconType.Call, task1SubjectName,
													updatedNotesOfTask, true, false,
													updatedRelatedToVerifyInInteraction,
													updatedRelatedAssociationVerifyInInteraction);
											if (updatedresult.isEmpty()) {
												log(LogStatus.PASS,
														"------" + task1SubjectName
																+ " record has been verified on intraction------",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------",
														YesNo.No);
												sa.assertTrue(false,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------");
											}

										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record", YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record");
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj2, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj2);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc044_VerifyRemovingSomeOfTheTaggedFromNotesPopUpOfCallAndVerifyTheSameInInteractionSection(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("9"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject39 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes39;
		String relatedTo = AMNNR_RelatedTo39;

//		String priority = AMNNR_AdvancePriority39;
//		String status = AMNNR_AdvanceStatus39;
		String task1ButtonName = AMNNR_ActivityType54;
		String[] suggestedTags = AMNNR_SuggestedTag39.split("<break>", -1);
		String verificationRelatedTo = relatedTo + AMNNR_RelatedTo40;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo25.split("<break>", -1);

		String updatedNotesOfTask = null;

		String[][] task1UpdateBasicSection = null;
		String[] updatedSuggestedTags = "".split("<break>", -1);
		String[] updatedRemoveRelatedAssociation = AMNNR_ARelatedAsso25.split("<break>", -1);
		String[] updatedRelatedToVerifyInInteraction = AMNNR_ATRelatedTo26.split("<break>", -1);
		String[] updatedRelatedAssociationVerifyInInteraction = AMNNR_ARelatedAsso26.split("<break>", -1);

		String updatedRelatedToVerifyInNotes = AMNNR_RelatedTo41;

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(1000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);

								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}
								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									ThreadSleep(1000);

									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null,
											null, updatedSuggestedTags, updatedRemoveRelatedAssociation, false, null,
											null, null, null, null, null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);

										ThreadSleep(1000);

										if (BP.crossIconButtonInNotePopUp(5) != null) {
											click(driver, BP.crossIconButtonInNotePopUp(20),
													"Clicked on Cross Icon of PopUp", action.SCROLLANDBOOLEAN);
										}
										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											String url2 = getURL(driver, 10);

											ThreadSleep(1000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															updatedTask1BasicSectionVerification,
															updatedTask1AdvancedSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);

											}

											CommonLib.refresh(driver);
											CommonLib.ThreadSleep(5000);
											ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
													getAdvanceDueDate, IconType.Call, task1SubjectName,
													updatedNotesOfTask, true, false,
													updatedRelatedToVerifyInInteraction,
													updatedRelatedAssociationVerifyInInteraction);
											if (updatedresult.isEmpty()) {
												log(LogStatus.PASS,
														"------" + task1SubjectName
																+ " record has been verified on intraction------",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------",
														YesNo.No);
												sa.assertTrue(false,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------");
											}

										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc045_VerifyChangingTheStatusOfCallFromAdvancedSectionOfNotesPopUpAndItsEffectOnInteractionSection(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("10"));
		ExcelUtils.writeData(AcuityDataSheetFilePath, AdvanceDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"AMNNR_Activity057", excelLabel.Advance_Due_Date);
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject42 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes42;
		String relatedTo = AMNNR_RelatedTo42;

		String priority = AMNNR_AdvancePriority42;
		String status = AMNNR_AdvanceStatus42;
		String task1ButtonName = AMNNR_ActivityType54;
		String[] suggestedTags = AMNNR_SuggestedTag42.split("<break>", -1);
		String verificationRelatedTo = relatedTo + AMNNR_RelatedTo43;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		String recordName = AMNNR_FirmLegalName4;
		String recordType = AMNNR_FirmRecordType4;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo27.split("<break>", -1);

		String updatedNotesOfTask = task1Notes;
//		String updatedStatus = AMNNR_AdvanceStatus43;
//		String[][] task1UpdateBasicSection = null;
//		String[][] task1UpdateAdvancedSection = { { AMNNR_TaskLabel5, updatedStatus } };

		String[] updatedSuggestedTags = "".split("<break>", -1);

		String[] updatedRelatedToVerifyInInteraction = RelatedToVerifyInInteraction;
		String[] updatedRelatedAssociationVerifyInInteraction = AMNNR_ARelatedAsso27.split("<break>", -1);

		String updatedRelatedToVerifyInNotes = verificationRelatedTo;

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, updatedNotesOfTask }, { AMNNR_CallLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(1000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);

								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}
								/*
								 * if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								 * "Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
								 * log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
								 * ThreadSleep(1000);
								 * 
								 * if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection,
								 * task1UpdateAdvancedSection, null, updatedSuggestedTags, null)) {
								 * log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);
								 * 
								 * CommonLib.refresh(driver);
								 * 
								 * ThreadSleep(1000);
								 * 
								 * if (BP.crossIconButtonInNotePopUp(5) != null) { click(driver,
								 * BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
								 * action.SCROLLANDBOOLEAN); } if (click(driver,
								 * BP.editButtonOnInteractionCard(task1SubjectName, 20), "Edit Note Button of: "
								 * + task1SubjectName, action.SCROLLANDBOOLEAN)) { log(LogStatus.INFO,
								 * "clicked on Edit Note button", YesNo.No);
								 * 
								 * String url2 = getURL(driver, 10);
								 * 
								 * ThreadSleep(1000); ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated
								 * = BP .verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
								 * updatedTask1BasicSectionVerification,
								 * updatedTask1AdvancedSectionVerification, null); if
								 * (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) { log(LogStatus.INFO,
								 * "Notes Popup has been verified and Notes popup is opening in same page with prefilled value"
								 * , YesNo.No);
								 * 
								 * } else { log(LogStatus.ERROR,
								 * "Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
								 * + NotesPopUpPrefilledNegativeResultUpdated, YesNo.No); sa.assertTrue(false,
								 * "Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
								 * + NotesPopUpPrefilledNegativeResultUpdated);
								 * 
								 * }
								 * 
								 * CommonLib.refresh(driver); CommonLib.ThreadSleep(5000); ArrayList<String>
								 * updatedresult = BP.verifyRecordOnInteractionCard( getAdvanceDueDate,
								 * IconType.Call, task1SubjectName, updatedNotesOfTask, true, false,
								 * updatedRelatedToVerifyInInteraction,
								 * updatedRelatedAssociationVerifyInInteraction); if (updatedresult.isEmpty()) {
								 * log(LogStatus.PASS, "------" + task1SubjectName +
								 * " record has been verified on intraction------", YesNo.No);
								 * 
								 * } else { log(LogStatus.ERROR, "------" + task1SubjectName +
								 * " record is not verified on intraction, Reason: " + updatedresult + "------",
								 * YesNo.No); sa.assertTrue(false, "------" + task1SubjectName +
								 * " record is not verified on intraction, Reason: " + updatedresult +
								 * "------"); }
								 * 
								 * } else { log(LogStatus.ERROR, "Not able to click on Edit Note button",
								 * YesNo.No); sa.assertTrue(false, "Not able to click on Edit Note button"); }
								 * 
								 * } else { log(LogStatus.FAIL, "Activity timeline record has not Updated",
								 * YesNo.No); sa.assertTrue(false, "Activity timeline record has not Updated");
								 * }
								 * 
								 * } else { log(LogStatus.ERROR, "Not able to click on Edit Note button",
								 * YesNo.No); sa.assertTrue(false, "Not able to click on Edit Note button"); }
								 */

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc046_VerifyChangingTheDueDateToFutureOfCallFromAdvancedSectionOfNotesPopUpAndItsEffectOnInteractionSection(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);

		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = ExcelUtils.readData(AcuityDataSheetFilePath, "Activity Timeline",
				excelLabel.Variable_Name, "AMNNR_Activity057", excelLabel.Advance_Due_Date);
		String getUpdatedAdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy",
				Integer.parseInt("4"));

		ExcelUtils.writeData(AcuityDataSheetFilePath, getUpdatedAdvanceDueDate, "Activity Timeline",
				excelLabel.Variable_Name, "AMNNR_Activity058", excelLabel.Advance_Due_Date);
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject42 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes42;
		String relatedTo = AMNNR_ARelatedAsso27;

//		String priority = AMNNR_AdvancePriority42;
//		String status = AMNNR_AdvanceStatus43;

		String verificationRelatedTo = relatedTo;

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		String recordName = AMNNR_FirmLegalName4;
		String recordType = AMNNR_FirmRecordType4;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo27.split("<break>", -1);

		String updatedNotesOfTask = task1Notes;

		String[][] task1UpdateBasicSection = null;
		String[][] task1UpdateAdvancedSection = { { AMNNR_CallLabel4, getUpdatedAdvanceDueDate } };

		String[] updatedSuggestedTags = "".split("<break>", -1);

		String[] updatedRelatedToVerifyInInteraction = RelatedToVerifyInInteraction;
		String[] updatedRelatedAssociationVerifyInInteraction = AMNNR_ARelatedAsso27.split("<break>", -1);

		String updatedRelatedToVerifyInNotes = verificationRelatedTo;

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, updatedNotesOfTask }, { AMNNR_CallLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_CallLabel4, getUpdatedAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(10000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

								refresh(driver);

								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}
								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
									ThreadSleep(10000);

									if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection,
											task1UpdateAdvancedSection, null, updatedSuggestedTags, null, false, null,
											null, null, null, null, null)) {
										log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

										CommonLib.refresh(driver);

										ThreadSleep(1000);

										if (BP.crossIconButtonInNotePopUp(5) != null) {
											click(driver, BP.crossIconButtonInNotePopUp(20),
													"Clicked on Cross Icon of PopUp", action.SCROLLANDBOOLEAN);
										}
										if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
												"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
											log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

											String url2 = getURL(driver, 10);

											ThreadSleep(10000);
											ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
													.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
															updatedTask1BasicSectionVerification,
															updatedTask1AdvancedSectionVerification, null);
											if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
												log(LogStatus.INFO,
														"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated,
														YesNo.No);
												sa.assertTrue(false,
														"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
																+ NotesPopUpPrefilledNegativeResultUpdated);

											}

											CommonLib.refresh(driver);
											CommonLib.ThreadSleep(5000);
											ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
													getUpdatedAdvanceDueDate, IconType.Call, task1SubjectName,
													updatedNotesOfTask, true, false,
													updatedRelatedToVerifyInInteraction,
													updatedRelatedAssociationVerifyInInteraction);
											if (updatedresult.isEmpty()) {
												log(LogStatus.PASS,
														"------" + task1SubjectName
																+ " record has been verified on intraction------",
														YesNo.No);

											} else {
												log(LogStatus.ERROR,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------",
														YesNo.No);
												sa.assertTrue(false,
														"------" + task1SubjectName
																+ " record is not verified on intraction, Reason: "
																+ updatedresult + "------");
											}

										} else {
											log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
											sa.assertTrue(false, "Not able to click on Edit Note button");
										}

									} else {
										log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
										sa.assertTrue(false, "Activity timeline record has not Updated");
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc047_VerifyChangingTheAssigneeOfCallFromAdvancedSectionOfNotesPopUpAndItsEffectOnInteractionSection(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);

		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = ExcelUtils.readData(AcuityDataSheetFilePath, "Activity Timeline",
				excelLabel.Variable_Name, "AMNNR_Activity058", excelLabel.Advance_Due_Date);

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject42 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes42;
		String relatedTo = AMNNR_ARelatedAsso27;

//		String priority = AMNNR_AdvancePriority42;
//		String status = AMNNR_AdvanceStatus43;

		String verificationRelatedTo = relatedTo;

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		String recordName = AMNNR_FirmLegalName4;
		String recordType = AMNNR_FirmRecordType4;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo27.split("<break>", -1);

		String updatedNotesOfTask = task1Notes;

		String[][] task1UpdateBasicSection = null;
		String[][] task1UpdateAdvancedSection = { { AMNNR_CallLabel5, crmUser2FirstName + " " + crmUser2LastName } };

		String[] updatedSuggestedTags = "".split("<break>", -1);

		String[] updatedRelatedToVerifyInInteraction = RelatedToVerifyInInteraction;
		String[] updatedRelatedAssociationVerifyInInteraction = AMNNR_ARelatedAsso27.split("<break>", -1);

		String updatedRelatedToVerifyInNotes = verificationRelatedTo;

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, updatedNotesOfTask }, { AMNNR_CallLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser2FirstName + " " + crmUser2LastName } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}

					if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
							"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

						String url = getURL(driver, 10);

						ThreadSleep(10000);
						ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
								.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
										task1AdvancedSectionVerification, null);
						if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
							log(LogStatus.INFO,
									"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
									YesNo.No);

							refresh(driver);

							if (BP.crossIconButtonInNotePopUp(5) != null) {
								click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
										action.SCROLLANDBOOLEAN);
							}

						} else {
							log(LogStatus.ERROR,
									"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
											+ NotesPopUpPrefilledNegativeResult,
									YesNo.No);
							sa.assertTrue(false,
									"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
											+ NotesPopUpPrefilledNegativeResult);
						}

						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
							ThreadSleep(10000);

							if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection,
									task1UpdateAdvancedSection, null, updatedSuggestedTags, null, false, null, null,
									null, null, null, null)) {
								log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

								CommonLib.refresh(driver);

								ThreadSleep(1000);
								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}

								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

									String url2 = getURL(driver, 10);

									ThreadSleep(10000);
									ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
											.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
													updatedTask1BasicSectionVerification,
													updatedTask1AdvancedSectionVerification, null);
									if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
										log(LogStatus.INFO,
												"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
												YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated,
												YesNo.No);
										sa.assertTrue(false,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated);

									}

									CommonLib.refresh(driver);
									CommonLib.ThreadSleep(5000);
									ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
											getAdvanceDueDate, IconType.Call, task1SubjectName, updatedNotesOfTask,
											true, false, updatedRelatedToVerifyInInteraction,
											updatedRelatedAssociationVerifyInInteraction);
									if (updatedresult.isEmpty()) {
										log(LogStatus.PASS, "------" + task1SubjectName
												+ " record has been verified on intraction------", YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"------" + task1SubjectName
														+ " record is not verified on intraction, Reason: "
														+ updatedresult + "------",
												YesNo.No);
										sa.assertTrue(false,
												"------" + task1SubjectName
														+ " record is not verified on intraction, Reason: "
														+ updatedresult + "------");
									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

							} else {
								log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
								sa.assertTrue(false, "Activity timeline record has not Updated");
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
						sa.assertTrue(false, "Not able to click on Edit Note button");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc048_VerifyChangingTheSubjectOfCallFromNotesPopUpAndItsEffectOnInteractionSection(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);

		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = ExcelUtils.readData(AcuityDataSheetFilePath, "Activity Timeline",
				excelLabel.Variable_Name, "AMNNR_Activity058", excelLabel.Advance_Due_Date);

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject42 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes42;
		String relatedTo = AMNNR_ARelatedAsso27;

//		String priority = AMNNR_AdvancePriority42;
//		String status = AMNNR_AdvanceStatus43;

		String verificationRelatedTo = relatedTo;

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser2FirstName + " " + crmUser2LastName } };

		String recordName = AMNNR_FirmLegalName4;
		String recordType = AMNNR_FirmRecordType4;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo27.split("<break>", -1);

		String updatedNotesOfTask = task1Notes;

		String task1UpdatedSubjectName = AMNNR_Subject44 + " " + AMNNR_ActivityType54;
		String[][] task1UpdateBasicSection = { { AMNNR_CallLabel1, task1UpdatedSubjectName } };

		String[][] task1UpdateAdvancedSection = null;

		String[] updatedSuggestedTags = "".split("<break>", -1);

		String[] updatedRelatedToVerifyInInteraction = RelatedToVerifyInInteraction;
		String[] updatedRelatedAssociationVerifyInInteraction = AMNNR_ARelatedAsso27.split("<break>", -1);

		String updatedRelatedToVerifyInNotes = verificationRelatedTo;

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_CallLabel1, task1UpdatedSubjectName },
				{ AMNNR_CallLabel2, updatedNotesOfTask }, { AMNNR_CallLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser2FirstName + " " + crmUser2LastName } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
					if (BP.crossIconButtonInNotePopUp(5) != null) {
						click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
								action.SCROLLANDBOOLEAN);
					}

					if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
							"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

						String url = getURL(driver, 10);

						ThreadSleep(1000);
						ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
								.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
										task1AdvancedSectionVerification, null);
						if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
							log(LogStatus.INFO,
									"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
											+ NotesPopUpPrefilledNegativeResult,
									YesNo.No);
							sa.assertTrue(false,
									"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
											+ NotesPopUpPrefilledNegativeResult);
						}

						refresh(driver);
						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
							ThreadSleep(10000);

							if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection,
									task1UpdateAdvancedSection, null, updatedSuggestedTags, null, false, null, null,
									null, null, null, null)) {
								log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

								CommonLib.refresh(driver);

								ThreadSleep(1000);
								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}

								if (click(driver, BP.editButtonOnInteractionCard(task1UpdatedSubjectName, 20),
										"Edit Note Button of: " + task1UpdatedSubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

									String url2 = getURL(driver, 10);

									ThreadSleep(1000);
									ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
											.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
													updatedTask1BasicSectionVerification,
													updatedTask1AdvancedSectionVerification, null);
									if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
										log(LogStatus.INFO,
												"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
												YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated,
												YesNo.No);
										sa.assertTrue(false,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated);

									}

								} else {
									log(LogStatus.ERROR,
											"Not able to click on Edit Note button of Task: " + task1UpdatedSubjectName,
											YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button of Task: "
											+ task1UpdatedSubjectName);
								}

								CommonLib.refresh(driver);

								if (BP.subjectOfInteractionCard(task1SubjectName, 7) == null) {
									log(LogStatus.INFO,
											"Verified: After Update the Name of Subject to " + task1UpdatedSubjectName
													+ ", Previous Named: " + task1SubjectName
													+ " Interaction card should not be there",
											YesNo.No);
								} else {
									log(LogStatus.ERROR,
											"After Update the Name of Subject to " + task1UpdatedSubjectName
													+ ", Previous Named: " + task1SubjectName
													+ " Interaction card is showing, which should not be there",
											YesNo.No);
									sa.assertTrue(false,
											"After Update the Name of Subject to " + task1UpdatedSubjectName
													+ ", Previous Named: " + task1SubjectName
													+ " Interaction card is showing, which should not be there");
								}

								ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(getAdvanceDueDate,
										IconType.Call, task1UpdatedSubjectName, updatedNotesOfTask, true, false,
										updatedRelatedToVerifyInInteraction,
										updatedRelatedAssociationVerifyInInteraction);
								if (updatedresult.isEmpty()) {
									log(LogStatus.PASS, "------" + task1SubjectName
											+ " record has been verified on intraction------", YesNo.No);

								} else {
									log(LogStatus.ERROR,
											"------" + task1SubjectName
													+ " record is not verified on intraction, Reason: " + updatedresult
													+ "------",
											YesNo.No);
									sa.assertTrue(false,
											"------" + task1SubjectName
													+ " record is not verified on intraction, Reason: " + updatedresult
													+ "------");
								}

							} else {
								log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
								sa.assertTrue(false, "Activity timeline record has not Updated");
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
						sa.assertTrue(false, "Not able to click on Edit Note button");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc049_VerifyWhenTheOrgHasSameDealNameAsOfTheCompanyNameAndIsTaggedInTheCall(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("8"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject45 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes45;
		String relatedTo = AMNNR_RelatedTo45;

//		String priority = AMNNR_AdvancePriority45;
//		String status = AMNNR_AdvanceStatus45;
		String task1ButtonName = AMNNR_ActivityType54;

		String[] SuggestedTags = AMNNR_SuggestedTag45.split("<break>", -1);

		String verificationRelatedTo = relatedTo + AMNNR_RelatedTo46;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		String recordName = AMNNR_FirmLegalName5;
		String recordType = AMNNR_FirmRecordType5;

		String[] RelatedToVerifyInInteraction = (crmUser1FirstName + " " + crmUser1LastName + AMNNR_ATRelatedTo28)
				.split("<break>", -1);

		String updatedNotesOfTask = AMNNR_Notes46;

		String[][] task1UpdateBasicSection = { { AMNNR_CallLabel2, updatedNotesOfTask } };

		String[] updatedSuggestedTags = AMNNR_SuggestedTag46.split("<break>", -1);

		String[] updatedRelatedToVerifyInInteraction = AMNNR_ATRelatedTo29.split("<break>", -1);
		String[] updatedRelatedAssociationVerifyInInteraction = null;

		String updatedRelatedToVerifyInNotes = (AMNNR_RelatedTo47 + "<break>" + AMNNR_SuggestedTag46);

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, updatedNotesOfTask }, { AMNNR_CallLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Create Task: " + task1SubjectName + " in Activity Timeline Section---------",
				YesNo.No);

		CommonLib.refresh(driver);
		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);
						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

							String url = getURL(driver, 10);

							ThreadSleep(1000);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}

							refresh(driver);

							if (BP.crossIconButtonInNotePopUp(5) != null) {
								click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
										action.SCROLLANDBOOLEAN);
							}
							if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
									"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
								ThreadSleep(1000);

								if (BP.updateActivityTimelineRecordForMultipleFollowUpTasksAndVerifyUIOfSuggestedTags(
										projectName, task1UpdateBasicSection, null, null, updatedSuggestedTags, null)) {
									log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

									CommonLib.refresh(driver);

									ThreadSleep(1000);
									if (BP.crossIconButtonInNotePopUp(5) != null) {
										click(driver, BP.crossIconButtonInNotePopUp(20),
												"Clicked on Cross Icon of PopUp", action.SCROLLANDBOOLEAN);
									}

									ArrayList<String> subjectLinkPopUpNegativeResult = BP
											.verifySubjectLinkPopUpOnIntraction(driver, task1SubjectName,
													updatedTask1BasicSectionVerification,
													updatedTask1AdvancedSectionVerification, IconType.Call,
													PageName.AcuityDetails);

									if (subjectLinkPopUpNegativeResult.isEmpty()) {
										log(LogStatus.PASS, "------" + task1SubjectName
												+ " record is able to open popup after click on it and verify its data"
												+ "------", YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"------" + task1SubjectName
														+ " record link popup is not verified, Reason: "
														+ subjectLinkPopUpNegativeResult + "------",
												YesNo.Yes);
										sa.assertTrue(false,
												"------" + task1SubjectName
														+ " record link popup is not verified, Reason: "
														+ subjectLinkPopUpNegativeResult + "------");

									}

									if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
											"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
										log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

										String url2 = getURL(driver, 10);

										ThreadSleep(1000);
										ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
												.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
														updatedTask1BasicSectionVerification,
														updatedTask1AdvancedSectionVerification, null);
										if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
											log(LogStatus.INFO,
													"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
															+ NotesPopUpPrefilledNegativeResultUpdated,
													YesNo.No);
											sa.assertTrue(false,
													"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
															+ NotesPopUpPrefilledNegativeResultUpdated);

										}

									} else {
										log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
										sa.assertTrue(false, "Not able to click on Edit Note button");
									}

									CommonLib.refresh(driver);
									CommonLib.ThreadSleep(5000);
									ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(
											getAdvanceDueDate, IconType.Call, task1SubjectName, updatedNotesOfTask,
											true, false, updatedRelatedToVerifyInInteraction,
											updatedRelatedAssociationVerifyInInteraction);
									if (updatedresult.isEmpty()) {
										log(LogStatus.PASS, "------" + task1SubjectName
												+ " record has been verified on intraction------", YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"------" + task1SubjectName
														+ " record is not verified on intraction, Reason: "
														+ updatedresult + "------",
												YesNo.No);
										sa.assertTrue(false,
												"------" + task1SubjectName
														+ " record is not verified on intraction, Reason: "
														+ updatedresult + "------");
									}

								} else {
									log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
									sa.assertTrue(false, "Activity timeline record has not Updated");
								}

							} else {
								log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
								sa.assertTrue(false, "Not able to click on Edit Note button");
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc050_VerifyWhenUserTagsAccountsAndContactsInNotesTextAreaAndClicksOnCloseButtonOrCrossIconInCaseOfCall(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("9"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject48 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes48;
		String relatedTo = AMNNR_RelatedTo48;

//		String priority = AMNNR_AdvancePriority48;
//		String status = AMNNR_AdvanceStatus48;
		String task1ButtonName = AMNNR_ActivityType54;
		String[] suggestedTags = null;
		String verificationRelatedTo = relatedTo;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1Notes }, { AMNNR_CallLabel3, verificationRelatedTo } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;

		String[] RelatedToVerifyInInteraction = AMNNR_ATRelatedTo30.split("<break>", -1);

		String updatedNotesOfTask = task1Notes;

		String updatedRelatedToInNotes = AMNNR_RelatedTo49;
		String[][] task1UpdateBasicSection = { { AMNNR_CallLabel3, updatedRelatedToInNotes } };

		String[] updatedSuggestedTags = null;

		String[] updatedRelatedToVerifyInInteraction = RelatedToVerifyInInteraction;
		String[] updatedRelatedAssociationVerifyInInteraction = AMNNR_ARelatedAsso30.split("<break>", -1);

		String updatedRelatedToVerifyInNotes = verificationRelatedTo;

		String[][] updatedTask1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, updatedNotesOfTask }, { AMNNR_CallLabel3, updatedRelatedToVerifyInNotes } };

		String[][] updatedTask1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);
		CommonLib.refresh(driver);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, suggestedTags, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "Activity timeline record has been created", YesNo.No);

			} else {
				log(LogStatus.FAIL, "Activity timeline record is not created", YesNo.No);
				sa.assertTrue(false, "Activity timeline record is not created");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		CommonLib.refresh(driver);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Edit Mode of Task Detail Page---------",
				YesNo.No);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab, recordType, recordName,
					30)) {
				log(LogStatus.INFO, recordName + " record of record type " + recordType + " has been open", YesNo.No);
				ThreadSleep(4000);
				if (BP.clicktabOnPage("Acuity")) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					ArrayList<String> result = BP.verifyRecordOnInteractionCard(getAdvanceDueDate, IconType.Call,
							task1SubjectName, task1Notes, true, false, RelatedToVerifyInInteraction, null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName + " record has been verified on intraction------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------", YesNo.No);
						sa.assertTrue(false, "------" + task1SubjectName
								+ " record is not verified on intraction, Reason: " + result + "------");
					}

					if (BP.crossIconButtonInNotePopUp(5) != null) {
						click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
								action.SCROLLANDBOOLEAN);
					}
					if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
							"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

						String url = getURL(driver, 10);

						ThreadSleep(1000);
						ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
								.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
										task1AdvancedSectionVerification, null);
						if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
							log(LogStatus.INFO,
									"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
											+ NotesPopUpPrefilledNegativeResult,
									YesNo.No);
							sa.assertTrue(false,
									"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
											+ NotesPopUpPrefilledNegativeResult);
						}

						refresh(driver);

						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
							ThreadSleep(1000);

							if (BP.updateActivityTimelineRecordForMultipleFollowUpTasks(projectName,
									task1UpdateBasicSection, null, null, updatedSuggestedTags, null, true, false)) {
								log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

								CommonLib.refresh(driver);

								ThreadSleep(1000);

								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}
								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

									String url2 = getURL(driver, 10);

									ThreadSleep(10000);
									ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
											.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
													updatedTask1BasicSectionVerification,
													updatedTask1AdvancedSectionVerification, null);
									if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
										log(LogStatus.INFO,
												"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
												YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated,
												YesNo.No);
										sa.assertTrue(false,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated);

									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

								CommonLib.refresh(driver);
								CommonLib.ThreadSleep(5000);
								ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(getAdvanceDueDate,
										IconType.Call, task1SubjectName, updatedNotesOfTask, true, false,
										updatedRelatedToVerifyInInteraction,
										updatedRelatedAssociationVerifyInInteraction);
								if (updatedresult.isEmpty()) {
									log(LogStatus.PASS, "------" + task1SubjectName
											+ " record has been verified on intraction------", YesNo.No);

								} else {
									log(LogStatus.ERROR,
											"------" + task1SubjectName
													+ " record is not verified on intraction, Reason: " + updatedresult
													+ "------",
											YesNo.No);
									sa.assertTrue(false,
											"------" + task1SubjectName
													+ " record is not verified on intraction, Reason: " + updatedresult
													+ "------");
								}

							} else {
								log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
								sa.assertTrue(false, "Activity timeline record has not Updated");
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

						refresh(driver);

						if (BP.crossIconButtonInNotePopUp(5) != null) {
							click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
									action.SCROLLANDBOOLEAN);
						}
						if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
							ThreadSleep(1000);

							if (BP.updateActivityTimelineRecordForMultipleFollowUpTasks(projectName,
									task1UpdateBasicSection, null, null, updatedSuggestedTags, null, false, true)) {
								log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

								CommonLib.refresh(driver);

								ThreadSleep(1000);
								if (BP.crossIconButtonInNotePopUp(5) != null) {
									click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
											action.SCROLLANDBOOLEAN);
								}

								if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
										"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);

									String url2 = getURL(driver, 10);

									ThreadSleep(10000);
									ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
											.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
													updatedTask1BasicSectionVerification,
													updatedTask1AdvancedSectionVerification, null);
									if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
										log(LogStatus.INFO,
												"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
												YesNo.No);

									} else {
										log(LogStatus.ERROR,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated,
												YesNo.No);
										sa.assertTrue(false,
												"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
														+ NotesPopUpPrefilledNegativeResultUpdated);

									}

								} else {
									log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
									sa.assertTrue(false, "Not able to click on Edit Note button");
								}

								CommonLib.refresh(driver);
								CommonLib.ThreadSleep(5000);
								ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(getAdvanceDueDate,
										IconType.Call, task1SubjectName, updatedNotesOfTask, true, false,
										updatedRelatedToVerifyInInteraction,
										updatedRelatedAssociationVerifyInInteraction);
								if (updatedresult.isEmpty()) {
									log(LogStatus.PASS, "------" + task1SubjectName
											+ " record has been verified on intraction------", YesNo.No);

								} else {
									log(LogStatus.ERROR,
											"------" + task1SubjectName
													+ " record is not verified on intraction, Reason: " + updatedresult
													+ "------",
											YesNo.No);
									sa.assertTrue(false,
											"------" + task1SubjectName
													+ " record is not verified on intraction, Reason: " + updatedresult
													+ "------");
								}

							} else {
								log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
								sa.assertTrue(false, "Activity timeline record has not Updated");
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit Note button");
						}

					} else {
						log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
						sa.assertTrue(false, "Not able to click on Edit Note button");
					}

				} else {
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}

			} else {
				log(LogStatus.ERROR, "Not able to open " + recordName + " record of record type " + recordType,
						YesNo.No);
				sa.assertTrue(false, "Not able to open " + recordName + " record of record type " + recordType);
			}
		} else {
			log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
			sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Deprecated
	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc051_VerifyWhenEditButtonIsClickedForTheCallHavingFollowUpTaskAndIsDeletedFromTaskDetailPage(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1SubjectName = AMNNR_Subject17 + " " + AMNNR_ActivityType54;

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;
		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO,
				"---------Now Going to Verify Task: " + task1SubjectName + " in Note PopUp Section---------", YesNo.No);

		if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

			log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
					YesNo.No);

			if (click(driver, taskBP.downArrowButton(20), "downArrowButton", action.SCROLLANDBOOLEAN)) {
				log(LogStatus.INFO, "Clicked on Down Arrow Button", YesNo.No);

				if (click(driver, taskBP.buttonInTheDownArrowList("Delete", 20), "Delete Button in downArrowButton",
						action.SCROLLANDBOOLEAN)) {
					log(LogStatus.INFO, "Clicked on Delete Button in  Down Arrow Button", YesNo.No);

					if (click(driver, taskBP.taskDeleteConfirmButton(15), "Delete Button in downArrowButton",
							action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Delete Confirm Button", YesNo.No);

						if (taskBP.taskDeletedMsg(15) != null) {
							log(LogStatus.INFO, "Task Delete Msg displayed, So Task has been deleted", YesNo.No);

							log(LogStatus.INFO, "---------Now Going to Verify Task: " + task1SubjectName
									+ " is present or not in Interaction Section---------", YesNo.No);
							if (lp.clickOnTab(projectName, tabObj1)) {

								log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

								if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
										recordType, recordName, 30)) {
									log(LogStatus.INFO,
											recordName + " record of record type " + recordType + " has been open",
											YesNo.No);
									ThreadSleep(4000);
									if (BP.clicktabOnPage("Acuity")) {
										log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

										if (!BP.verifySubjectOfInteractionEitherOnCardOrInViewAllPopUp(
												task1SubjectName)) {
											log(LogStatus.INFO, "Verified: Task: " + task1SubjectName
													+ " is not present there after delete", YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"Task: " + task1SubjectName + " is present there after delete",
													YesNo.Yes);
											sa.assertTrue(false,
													"Task: " + task1SubjectName + " is present there after delete");

										}

									} else {
										log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
										sa.assertTrue(false, "Not able to click on Acuity Tab");
									}

								} else {
									log(LogStatus.ERROR,
											"Not able to open " + recordName + " record of record type " + recordType,
											YesNo.No);
									sa.assertTrue(false,
											"Not able to open " + recordName + " record of record type " + recordType);
								}
							} else {
								log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
								sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
							}

						} else {
							log(LogStatus.ERROR, "Task Delete Msg not display, So Task not gets deleted", YesNo.Yes);
							sa.assertTrue(false, "Task Delete Msg not display, So Task not gets deleted");

						}

					} else {
						log(LogStatus.ERROR, "Not ABle to Click on Delete Confirm Button", YesNo.Yes);
						sa.assertTrue(false, "Not ABle to Click on Delete Confirm Button");

					}

				} else {
					log(LogStatus.ERROR, "Not Able Click on Delete button in Down Arrow Button", YesNo.Yes);
					sa.assertTrue(false, "Not Able Click on Delete button in Down Arrow Button");

				}

			} else {
				log(LogStatus.ERROR, "Not Able Click on Down Arrow Button", YesNo.Yes);
				sa.assertTrue(false, "Not Able Click on Down Arrow Button");

			}

		} else {

			log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----", YesNo.Yes);
			BaseLib.sa.assertTrue(false, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Deprecated
	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc052_VerifyWhenTheRemovedCallIsRestoredAndItsImpactOnInteractionSection(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String recordName = AMNNR_FirmLegalName3;
		String recordType = AMNNR_FirmRecordType3;

		String AdvanceDueDate = ExcelUtils.readData(AcuityDataSheetFilePath, "Activity Timeline",
				excelLabel.Variable_Name, "AMNNR_Activity056", excelLabel.Advance_Due_Date);
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject17 + " " + AMNNR_ActivityType54;
		String updatedNotesOfTask = AMNNR_Notes21;
		String relatedTo = AMNNR_RelatedTo17;

//		String priority = AMNNR_AdvancePriority17;
//		String status = AMNNR_AdvanceStatus17;

		String verificationRelatedTo = relatedTo + AMNNR_RelatedTo21;
		String updatedRelatedTo = AMNNR_RelatedTo22;
		String updatedRelatedToVerifyInNotes = verificationRelatedTo + "<break>" + updatedRelatedTo;

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, updatedNotesOfTask }, { AMNNR_CallLabel3, updatedRelatedToVerifyInNotes } };

		String[][] task1AdvancedSectionVerification = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName } };

		String[][] listViewSheetData = { { AMNNR_ListViewMember1, AMNNR_ListViewTabName1, task1SubjectName,
				AMNNR_ListViewAccessibility1, AMNNR_ListViewFilter1, AMNNR_ListViewField1, AMNNR_ListViewOperators1,
				task1SubjectName, AMNNR_ListViewTextBoxType1 } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		WebElement ele;
		String recycleTab = lp.getTabName(projectName, TabName.RecycleBinTab);
		if (lp.openAppFromAppLauchner(60, recycleTab)) {

			CommonLib.refresh(driver);

			for (String[] row : listViewSheetData) {

				if (lp.addListView(projectName, row, 10)) {
					log(LogStatus.INFO, "list view added on " + row[1], YesNo.No);
					ele = lp.getCheckboxOfRestoreItemOnRecycleBin(projectName, task1SubjectName, 30);
					if (clickUsingJavaScript(driver, ele, "Check box against : " + task1SubjectName, action.BOOLEAN)) {
						log(LogStatus.INFO, "Click on checkbox for " + task1SubjectName, YesNo.No);

						ele = lp.getRestoreButtonOnRecycleBin(projectName, 30);
						if (clickUsingJavaScript(driver, ele, "Restore Button : " + task1SubjectName, action.BOOLEAN)) {
							ThreadSleep(10000);
							log(LogStatus.INFO, "Click on Restore Button for " + task1SubjectName, YesNo.No);
							sa.assertTrue(true, "Task has been restore from the Recycle bin");

							CommonLib.switchToDefaultContent(driver);
							ThreadSleep(2000);

							log(LogStatus.INFO, "---------Now Going to Verify Task: " + task1SubjectName
									+ " in Note PopUp Section---------", YesNo.No);
							if (lp.clickOnTab(projectName, tabObj1)) {

								log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

								if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
										recordType, recordName, 30)) {
									log(LogStatus.INFO,
											recordName + " record of record type " + recordType + " has been open",
											YesNo.No);
									ThreadSleep(4000);
									if (BP.clicktabOnPage("Acuity")) {
										log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

										if (BP.verifySubjectOfInteractionEitherOnCardOrInViewAllPopUp(
												task1SubjectName)) {
											log(LogStatus.INFO, "Verified: Task: " + task1SubjectName
													+ " is present there after restore", YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"Task: " + task1SubjectName + " is not present there after restore",
													YesNo.Yes);
											sa.assertTrue(false, "Task: " + task1SubjectName
													+ " is not present there after restore");

										}

									} else {
										log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
										sa.assertTrue(false, "Not able to click on Acuity Tab");
									}

								} else {
									log(LogStatus.ERROR,
											"Not able to open " + recordName + " record of record type " + recordType,
											YesNo.No);
									sa.assertTrue(false,
											"Not able to open " + recordName + " record of record type " + recordType);
								}
							} else

							{
								log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj1, YesNo.No);
								sa.assertTrue(false, "Not able to click on Tab : " + tabObj1);
							}

							if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

								log(LogStatus.INFO,
										"-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
										YesNo.No);

								if (click(driver, taskBP.downArrowButton(20), "downArrowButton",
										action.SCROLLANDBOOLEAN)) {
									log(LogStatus.INFO, "Clicked on Down Arrow Button", YesNo.No);

									if (click(driver, taskBP.buttonInTheDownArrowList("Edit", 20),
											"Delete Button in downArrowButton", action.SCROLLANDBOOLEAN)) {
										log(LogStatus.INFO, "Clicked on Edit Button in  Down Arrow Button", YesNo.No);

										String url2 = getURL(driver, 10);

										ThreadSleep(10000);
										ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
												.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url2,
														task1BasicSectionVerification, task1AdvancedSectionVerification,
														null);
										if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
											log(LogStatus.INFO,
													"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
													YesNo.No);

										} else {
											log(LogStatus.ERROR,
													"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
															+ NotesPopUpPrefilledNegativeResultUpdated,
													YesNo.No);
											sa.assertTrue(false,
													"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
															+ NotesPopUpPrefilledNegativeResultUpdated);

										}

									} else {
										log(LogStatus.ERROR, "Not Able Click on Edit button in Down Arrow Button",
												YesNo.Yes);

									}

								} else {
									log(LogStatus.ERROR, "Not Able Click on Down Arrow Button", YesNo.Yes);
									sa.assertTrue(false, "Not Able Click on Down Arrow Button");

								}

							} else {

								log(LogStatus.ERROR,
										"-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
										YesNo.Yes);
								BaseLib.sa.assertTrue(false,
										"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

							}

						} else {

							log(LogStatus.ERROR, "Not Able to Click on Restore Button for " + task1SubjectName,
									YesNo.Yes);
							sa.assertTrue(false, "Not Able to Click on Restore Button for " + task1SubjectName);
						}

					} else {

						log(LogStatus.ERROR, "Not Able to Click on checkbox for " + task1SubjectName, YesNo.Yes);
						sa.assertTrue(false, "Not Able to Click on checkbox for " + task1SubjectName);
					}
				}

				else {
					log(LogStatus.FAIL, "list view could not added on " + row[1], YesNo.Yes);
					sa.assertTrue(false, "list view could not added on " + row[1]);
				}
			}

		} else {
			log(LogStatus.ERROR, "Not Able to open the Recycle been tab", YesNo.Yes);
			sa.assertTrue(false, "Not Able to open the Recycle been tab");

		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Deprecated
	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc053_CreateAFollowUpTaskFromCallDetailPageAndVerifyItsDetailsOnTaskDetailPage(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1SubjectNameNavigation = AMNNR_Subject30 + " " + AMNNR_ActivityType54;
		String task1SubjectName = AMNNR_Subject55;
		String task1Notes = AMNNR_Notes55;
		String relatedTo = AMNNR_RelatedTo55;

		String recordName = AMNNR_Contact5;
		String recordNameVerify = AMNNR_RelatedTo55;

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));

		String getAdvanceDueDate = AdvanceDueDate;
		String priority = "Normal";
		String status = "Not Started";

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String[] labelAndValueSeprateByBreak = {
				AMNNR_CallLabel5 + "<break>" + crmUser1FirstName + " " + crmUser1LastName,
				AMNNR_CallLabel1 + "<break>" + task1SubjectName,

				"Name" + "<break>" + relatedTo };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (home.globalSearchAndNavigate(task1SubjectNameNavigation, "Tasks", false)) {

			log(LogStatus.INFO,
					"-----Verified Task named: " + task1SubjectNameNavigation + " found in Tasks Object-----",
					YesNo.No);
			if (taskBP.clickOnRecordPageButtonOrInDownArrowButton("Create Follow-Up Task", 20)) {
				log(LogStatus.INFO, "Clicked on Create Follow-Up Task Button", YesNo.No);

				CommonLib.ThreadSleep(5000);
				if (BP.updateActivityTimelineRecord(projectName, task1BasicSection, task1AdvancedSection, null, null,
						null, false, null, null, null, null, null, null)) {
					log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

					if (lp.clickOnTab(projectName, tabObj2)) {

						log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

						if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab, recordNameVerify,
								30)) {
							log(LogStatus.INFO, recordNameVerify + " record has been open", YesNo.No);
							ThreadSleep(4000);
							if (BP.clicktabOnPage("Acuity")) {
								log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

								if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

									log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName
											+ " found in Tasks Object-----", YesNo.No);

									CommonLib.ThreadSleep(8000);
									List<String> taskDetailPageNegativeResult = BP
											.fieldValueVerification(labelAndValueSeprateByBreak);

									if (taskDetailPageNegativeResult.isEmpty()) {
										log(LogStatus.PASS, "------" + task1SubjectName
												+ " labels and their values in Detail page has been verified------",
												YesNo.No);

									} else {
										log(LogStatus.ERROR, "------" + task1SubjectName
												+ " labels and their values in Detail page has not been verified, Reason: "
												+ taskDetailPageNegativeResult + "------", YesNo.No);
										sa.assertTrue(false, "------" + task1SubjectName
												+ " labels and their values in Detail page has not been verified, Reason: "
												+ taskDetailPageNegativeResult + "------");

									}

								} else {

									log(LogStatus.ERROR,
											"-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
											YesNo.Yes);
									BaseLib.sa.assertTrue(false,
											"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

								}

							} else {
								log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
								sa.assertTrue(false, "Not able to click on Acuity Tab");
							}

						} else {
							log(LogStatus.ERROR, "Not able to open " + recordNameVerify + " record", YesNo.No);
							sa.assertTrue(false, "Not able to open " + recordNameVerify + " record");
						}
					} else {
						log(LogStatus.ERROR, "Not able to click on Tab : " + tabObj2, YesNo.No);
						sa.assertTrue(false, "Not able to click on Tab : " + tabObj2);
					}

				} else {
					log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
					sa.assertTrue(false, "Activity timeline record has not Updated");

				}

			} else {
				log(LogStatus.ERROR, "Not Able Click on Create Follow-Up Task button", YesNo.Yes);
				sa.assertTrue(false, "Not Able Click on Create Follow-Up Task button");

			}

		} else {

			log(LogStatus.ERROR, "-----Task named: " + task1SubjectNameNavigation + " not found in Tasks Object-----",
					YesNo.Yes);
			BaseLib.sa.assertTrue(false,
					"-----Task named: " + task1SubjectNameNavigation + " not found in Tasks Object-----");

		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc054_VerifyNotesSectionForTheMultipleScenarios(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String recordName = AMNNR_FirmLegalName1;
		String task1SubjectName = AMNNR_Subject59;
		String task1Notes = AMNNR_Notes59;
		String[] suggestedTags = AMNNR_SuggestedTag59.split("<break>", -1);
		String relatedTo = recordName + "<Prefilled>";
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("4"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1UpdatedNotes1 = AMNNR_Notes60;
		String[] updatedSuggestedTags1 = null;

		String task1UpdatedNotes2 = AMNNR_Notes61;
		String[] updatedSuggestedTags2 = null;

		String task1UpdatedNotes3 = AMNNR_Notes62;
		String[] updatedSuggestedTags3 = null;

		String task1UpdatedNotes4 = AMNNR_Notes62_1;
		String[] updatedSuggestedTags4 = null;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate } };

		String[][] task1UpdateBasicSection1 = { { AMNNR_TaskLabel2, task1UpdatedNotes1 } };

		String[][] task1UpdateAdvancedSection1 = null;

		String[][] task1UpdateBasicSection2 = { { AMNNR_TaskLabel2, task1UpdatedNotes2 } };

		String[][] task1UpdateAdvancedSection2 = null;

		String[][] task1UpdateBasicSection3 = { { AMNNR_TaskLabel2, task1UpdatedNotes3 } };

		String[][] task1UpdateAdvancedSection3 = null;

		String[][] task1UpdateBasicSection4 = { { AMNNR_TaskLabel2, task1UpdatedNotes4 } };

		String[][] task1UpdateAdvancedSection4 = null;

		String recordPageButtonName = AMNNR_ActivityType59;

//		String recordName = "Sumo Logic";
//		String task1SubjectName = "Notes Test";
//		String task1Notes = "<suggestionShouldThere><Section> @sumo ";
//		String[] suggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//		String relatedTo = recordName + "<Prefilled>";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("4"));
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1UpdatedNotes1 = "<recordsVerify>Sumo Kind<break>Sumo Kind<break>Sumo Kind Theme<break>Sumo Kind Fund<break>Sumo Kind Fundraising<break>Sumo Kind<Section>@sumo Ki";
//		String[] updatedSuggestedTags1 = null;
//
//		String task1UpdatedNotes2 = "<suggestionShouldNotThere><Section>";
//		String[] updatedSuggestedTags2 = null;
//
//		String task1UpdatedNotes3 = "<suggestionShouldNotThere><Section>@ sumo kind";
//		String[] updatedSuggestedTags3 = null;
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate } };
//
//		String[][] task1UpdateBasicSection1 = { { AMNNR_TaskLabel2, task1UpdatedNotes1 } };
//
//		String[][] task1UpdateAdvancedSection1 = null;
//
//		String[][] task1UpdateBasicSection2 = { { AMNNR_TaskLabel2, task1UpdatedNotes2 } };
//
//		String[][] task1UpdateAdvancedSection2 = null;
//
//		String[][] task1UpdateBasicSection3 = { { AMNNR_TaskLabel2, task1UpdatedNotes3 } };
//
//		String[][] task1UpdateAdvancedSection3 = null;
//
//		String recordPageButtonName = AMNNR_ActivityType59;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.clickOnRecordPageButtonForNewRecordCreation(recordPageButtonName, 30)) {
				log(LogStatus.INFO, "Clicked on Button: " + recordPageButtonName + " of Record Page: " + recordName,
						YesNo.No);

				if (BP.updateActivityTimelineRecord(projectName, task1BasicSection, task1AdvancedSection, null,
						suggestedTags, null, false, null, null, null, null, null, null)) {
					log(LogStatus.PASS, "Activity timeline record has been Created", YesNo.No);

				} else {
					log(LogStatus.FAIL, "Activity timeline record has not Created", YesNo.No);
					sa.assertTrue(false, "Activity timeline record has not Created");
				}

				CommonLib.refresh(driver);

				if (BP.crossIconButtonInNotePopUp(5) != null) {
					click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
							action.SCROLLANDBOOLEAN);
				}
				CommonLib.refresh(driver);
				if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
						"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
					log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
					if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection1,
							task1UpdateAdvancedSection1, null, updatedSuggestedTags1, null, false, null, null, null,
							null, null, null)) {
						log(LogStatus.PASS, "Activity timeline record has been Created", YesNo.No);

					} else {
						log(LogStatus.FAIL, "Activity timeline record has not Created", YesNo.No);
						sa.assertTrue(false, "Activity timeline record has not Created");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
					sa.assertTrue(false, "Not able to click on Edit Note button");
				}

				CommonLib.refresh(driver);

				if (BP.crossIconButtonInNotePopUp(5) != null) {
					click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
							action.SCROLLANDBOOLEAN);
				}
				CommonLib.refresh(driver);
				if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
						"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
					log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
					if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection2,
							task1UpdateAdvancedSection2, null, updatedSuggestedTags2, null, false, null, null, null,
							null, null, null)) {
						log(LogStatus.PASS, "Activity timeline record has been Created", YesNo.No);

					} else {
						log(LogStatus.FAIL, "Activity timeline record has not Created", YesNo.No);
						sa.assertTrue(false, "Activity timeline record has not Created");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
					sa.assertTrue(false, "Not able to click on Edit Note button");
				}

				CommonLib.refresh(driver);
				if (BP.crossIconButtonInNotePopUp(5) != null) {
					click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
							action.SCROLLANDBOOLEAN);
				}
				CommonLib.refresh(driver);
				if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
						"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
					log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
					if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection3,
							task1UpdateAdvancedSection3, null, updatedSuggestedTags3, null, false, null, null, null,
							null, null, null)) {
						log(LogStatus.PASS, "Activity timeline record has been Created", YesNo.No);

					} else {
						log(LogStatus.FAIL, "Activity timeline record has not Created", YesNo.No);
						sa.assertTrue(false, "Activity timeline record has not Created");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
					sa.assertTrue(false, "Not able to click on Edit Note button");
				}

				CommonLib.refresh(driver);
				if (BP.crossIconButtonInNotePopUp(5) != null) {
					click(driver, BP.crossIconButtonInNotePopUp(20), "Clicked on Cross Icon of PopUp",
							action.SCROLLANDBOOLEAN);
				}
				CommonLib.refresh(driver);
				if (click(driver, BP.editButtonOnInteractionCard(task1SubjectName, 20),
						"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
					log(LogStatus.INFO, "clicked on Edit Note button", YesNo.No);
					if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection4,
							task1UpdateAdvancedSection4, null, updatedSuggestedTags4, null, false, null, null, null,
							null, null, null)) {
						log(LogStatus.PASS, "Activity timeline record has been Created", YesNo.No);

					} else {
						log(LogStatus.FAIL, "Activity timeline record has not Created", YesNo.No);
						sa.assertTrue(false, "Activity timeline record has not Created");
					}
				} else {
					log(LogStatus.ERROR, "Not able to click on Edit Note button", YesNo.No);
					sa.assertTrue(false, "Not able to click on Edit Note button");
				}

			} else {
				log(LogStatus.ERROR,
						"Not able to Click on Button: " + recordPageButtonName + " of Record Page: " + recordName,
						YesNo.No);
				sa.assertTrue(false,
						"Not able to Click on Button: " + recordPageButtonName + " of Record Page: " + recordName);
			}

		} else {
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc055_VerifyTheValidationOnTaskPopUpWhenFieldsAreMadeMandetoryFromThePageLayoutAndHitSave(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String validationRuleMessage = AMNNR_ErrorMsg63;
		String validationRuleErrorMsgLocation = AMNNR_ErrorMsgLocation63;
		String status = AMNNR_AdvanceStatus63;
		String[][] task1BasicSection = null;

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel5, status } };
		String task1ButtonName = AMNNR_ActivityType1;

//		String validationRuleMessage = "These required fields must be completed: Subject(s), Status";
//		String validationRuleErrorMsgLocation = "Field<break>Status";
//		String status = "-None-";
//		String[][] task1BasicSection = null;
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel5, status } };
//		String task1ButtonName = AMNNR_ActivityType1;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (lp.clickOnTab(projectName, TabName.HomeTab)) {
			log(LogStatus.INFO, "Click on Tab : " + TabName.HomeTab, YesNo.No);
			home.notificationPopUpClose();
			if (BP.createActivityTimeline(projectName, true, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, true, validationRuleMessage, validationRuleErrorMsgLocation, null, null, null, null)) {
				log(LogStatus.PASS, "------Verified the Error Msg on Note Popup of: " + task1ButtonName + "------",
						YesNo.No);

			} else {
				log(LogStatus.FAIL, "------Not Verified the Error Msg on Note Popup of: " + task1ButtonName + "------",
						YesNo.No);
				sa.assertTrue(false,
						"------Not Verified the Error Msg on Note Popup of: " + task1ButtonName + "------");
			}

		} else {
			sa.assertTrue(false, "Not Able to Click on Tab : " + TabName.HomeTab);
			log(LogStatus.SKIP, "Not Able to Click on Tab : " + TabName.HomeTab, YesNo.Yes);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc056_VerifyTheErrorMessageOnNotesPopUpWhenValidationRuleIsCreated(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		SetupPageBusinessLayer sp = new SetupPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String fieldName = AMNNR_TaskLabel1;
		String validationRuleName = "Validation_Rule_" + AMNNR_TaskLabel1;
		String validationRuleFormula = " ISBLANK( " + AMNNR_TaskLabel1 + " ) ";
		String validationRuleMessage = "Please enter the " + AMNNR_TaskLabel1 + " Name";
		String validationRuleErrorMsgLocation = AMNNR_ErrorMsgLocation64;
		String task1Notes = "";

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, "" } };

		String[][] task1AdvancedSection = null;
		String task1ButtonName = AMNNR_ActivityType59;

		String recordName = AMNNR_FirmLegalName1;

//		String fieldName = AMNNR_TaskLabel1;
//		String validationRuleName = "Validation_Rule_" + AMNNR_TaskLabel1;
//		String validationRuleFormula = " ISBLANK( Subject ) ";
//		String validationRuleMessage = "Please enter the " + AMNNR_TaskLabel1 + " Name";
//		String validationRuleErrorMsgLocation = "Top of Page";
//		String task1Notes = "";
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, "" } };
//
//		String[][] task1AdvancedSection = null;
//		String task1ButtonName = AMNNR_ActivityType59;
//
//		String recordName = "Sumo Logic";

		lp.CRMLogin(superAdminUserName, adminPassword);

		if (sp.createValidationRule(object.Task, fieldName, validationRuleName, validationRuleFormula,
				validationRuleMessage, validationRuleErrorMsgLocation)) {
			log(LogStatus.PASS, "------Succesfully Created the Validation Rule named: " + validationRuleName + "------",
					YesNo.No);
			lp.CRMlogout();
			CommonLib.ThreadSleep(8000);
			lp.CRMLogin(crmUser1EmailID, adminPassword);
			if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
				log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);
				if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection,
						task1AdvancedSection, null, null, true, validationRuleMessage, validationRuleErrorMsgLocation,
						null, null, null, null)) {
					log(LogStatus.PASS, "------Verified the Error Msg on Note Popup of: " + task1ButtonName + "------",
							YesNo.No);

				} else {
					log(LogStatus.FAIL,
							"------Not Verified the Error Msg on Note Popup of: " + task1ButtonName + "------",
							YesNo.No);
					sa.assertTrue(false,
							"------Not Verified the Error Msg on Note Popup of: " + task1ButtonName + "------");
				}
			} else

			{
				log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
				sa.assertTrue(false, "Not able to Open the Record: " + recordName);
			}

		} else {

			log(LogStatus.ERROR, "------Not able to Create the Validation Rule Named: " + validationRuleName + "------",
					YesNo.No);
			sa.assertTrue(false,
					"------Not able to Create the Validation Rule Named: " + validationRuleName + "------");

		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc057_VerifyWhenTaskIsCreatedAndNoNotesAreMaintained(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject65;
		String task1Notes = AMNNR_Notes65;
		String relatedTo = AMNNR_RelatedTo65;
		String priority = AMNNR_AdvancePriority65;
		String status = AMNNR_AdvanceStatus65;
		String classification = AMNNR_Classification65;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, classification } };

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FirmLegalName1;

//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Prepare Invoice";
//		String task1Notes = "";
//		String relatedTo = "Houlihan Lokey<break>Glomez";
//		String priority = "Normal";
//		String status = "Not Started";
//		String classification = "A";
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, classification } };
//
//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "Sumo Logic";

		lp.CRMLogin(crmUser1EmailID, adminPassword);
		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);
			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSection, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSection,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}
		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc058_VerifyWhenTaskIsCreatedAndNotesAreMaintainedUsingAtTheRateTaggingAndTaggedRecordExistsInTheOrg(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FirmLegalName1;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject66;
		String task1Notes = AMNNR_Notes66;
		String relatedTo = AMNNR_RelatedTo66;
		String priority = AMNNR_AdvancePriority66;
		String status = AMNNR_AdvanceStatus66;
		String classification = AMNNR_Classification66;
		String task1NotesVerify = task1Notes.split("<Section>", -1)[1].replace("@", "");

		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + AMNNR_RelatedTo67;

		String[] SuggestedTags = AMNNR_SuggestedTag66.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp66.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp66.split("<break>") };
		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup66.split("<break>") };

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };
		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, classification } };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "Sumo Logic";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Send Invoice Tagged";
//		String task1Notes = "@Max<break>@James<Section>This is to take into consideration about @Max and @James should be linked in the task";
//		String relatedTo = "Houlihan Lokey<break>Glomez";
//		String priority = "Normal";
//		String status = "Completed";
//		String classification = "B";
//		String task1NotesVerify = task1Notes.split("<Section>", -1)[1].replace("@", "");
//
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + "Max<break>James";
//
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = { "addContactsToDealTeamPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToFundraisingObjectPopup = {
//				"addContactsToFundraisingPopUpShouldNotThere".split("<break>") };
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, classification } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);
		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);
			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, null)) {
				log(LogStatus.PASS,
						"-----Activity timeline record has been created for Activity: " + task1SubjectName + "-----",
						YesNo.No);

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}
//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL,
						"-----Activity timeline record is not created for Activity: " + task1SubjectName + "-----",
						YesNo.No);
				sa.assertTrue(false,
						"-----Activity timeline record is not created for Activity: " + task1SubjectName + "-----");
			}
		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc059_VerifyWhenTaskIsCreatedAndNotesAreMaintainedWithoutUsingAtTheRateTagging(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FirmLegalName4;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject68;
		String task1Notes = AMNNR_Notes68;
		String relatedTo = AMNNR_RelatedTo68;
		String priority = AMNNR_AdvancePriority68;
		String status = AMNNR_AdvanceStatus68;
		String classification = AMNNR_Classification68;
		String task1NotesVerify = task1Notes.replace("@", "");

		String updatedRelatedToVerifyBeforeTagging = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);

		String updatedRelatedToVerify = updatedRelatedToVerifyBeforeTagging + "<break>" + AMNNR_RelatedTo69;

		String[] SuggestedTags = AMNNR_SuggestedTag68.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp68.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp68.split("<break>") };
		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup68.split("<break>") };

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };
		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] task1BasicSectionVerificationForDetailsSection = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerifyBeforeTagging } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, classification } };
		String[][][] detailSectionVerifcation = { { { AMNNR_TaskLabel1, task1SubjectName } },
				task1BasicSectionVerificationForDetailsSection, task1AdvancedSection };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = AMNNR_FirmLegalName4;
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Send Letter Not Tagged";
//		String task1Notes = "This is to check Con 2 , Con 3 , Logic should be the part of the kind";
//		String relatedTo = "Houlihan Lokey<break>Glomez";
//		String priority = "Normal";
//		String status = "Completed";
//		String classification = "A";
//		String task1NotesVerify = task1Notes.replace("@", "");
//
//		String updatedRelatedToVerifyBeforeTagging = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//
//		String updatedRelatedToVerify = updatedRelatedToVerifyBeforeTagging + "<break>"
//				+ "con 2<break>con 3<break>Sumo Kind<break>Sumo Logic";
//
//		String[] SuggestedTags = "con 2==Contact<break>con 3==Contact<break>Sumo Kind==Firm<break>Sumo Logic==Firm"
//				.split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = { "addContactsToDealTeamPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToFundraisingObjectPopup = {
//				"addContactsToFundraisingPopUpShouldNotThere".split("<break>") };
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] task1BasicSectionVerificationForDetailsSection = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerifyBeforeTagging } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, classification } };
//		String[][][] detailSectionVerifcation = { { { AMNNR_TaskLabel1, task1SubjectName } },
//				task1BasicSectionVerificationForDetailsSection, task1AdvancedSection };

		lp.CRMLogin(crmUser1EmailID, adminPassword);
		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);
			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS,
						"-----Activity timeline record has been created for Activity: " + task1SubjectName + "-----",
						YesNo.No);

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}
//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL,
						"-----Activity timeline record is not created for Activity: " + task1SubjectName + "-----",
						YesNo.No);
				sa.assertTrue(false,
						"-----Activity timeline record is not created for Activity: " + task1SubjectName + "-----");
			}
		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc060_VerifyWhenTaskIsCreatedAndNotesAreMaintainedWithAndWithoutAtTheRatetaggingAndTaggedRecordDoesNotExistInTheOrg(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FirmLegalName4;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject70;
		String task1Notes = AMNNR_Notes70;
		String relatedTo = AMNNR_RelatedTo70;
		String priority = AMNNR_AdvancePriority70;
		String status = AMNNR_AdvanceStatus70;
		String updatedRelatedToVerify = relatedTo + AMNNR_RelatedTo71 + recordName;
		String task1NotesVerify = task1Notes.replace("@", "");

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp70.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp71.split("<break>", -1), AMNNR_CreateNewRecordPopUp72.split("<break>", -1) };
		String firmRecord1 = AMNNR_FirmLegalName8;
		String firmRecord2 = AMNNR_FirmLegalName9;
		String firmRecord3ShouldNotThere = AMNNR_FirmLegalName10;
		String contactRecord = AMNNR_Contact7;
		String subTabName = "Details";

		String[] labelAndValueSeprateByBreak1 = { AMNNR_DetailPageRecord1 };
		String[] labelAndValueSeprateByBreak2 = { AMNNR_DetailPageRecord2 };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = AMNNR_FirmLegalName4;
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "IntroductionNewRecordPopup";
//		String task1Notes = "This is to check @Alaksa ahemd and @Bruno ecostic , quest should be part of the deal, @ahemd and @ecostic";
//		String relatedTo = "Houlihan Lokey<break>Glomez";
//		String priority = "Normal";
//		String status = "Completed";
//		String updatedRelatedToVerify = relatedTo + "<break>Alaska<break>Bruno<break>" + recordName;
//		String task1NotesVerify = task1Notes.replace("@", "");
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = {
//				"checked<break>Alaksa<break><AsItIs><break>Firm<break><break>Create".split("<break>", -1),
//				"checked<break>Bruno<break><AsItIs><break>Contact<break>Alaksa<break>Create".split("<break>", -1),
//				"checked<break>ecostic<break><AsItIs><break>Firm<break>Private Equity<break>Create".split("<break>",
//						-1) };
//		String firmRecord1 = "Alaksa";
//		String firmRecord2 = "ecostic";
//		String firmRecord3ShouldNotThere = "ahemd";
//		String contactRecord = "Bruno";
//		String subTabName = "Details";
//
//		String[] labelAndValueSeprateByBreak1 = { "Record Type" + "<break>" + "Company" };
//		String[] labelAndValueSeprateByBreak2 = { "Record Type" + "<break>" + "Private Equity" };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(firmRecord1, "Firms", false)) {

					log(LogStatus.INFO, "-----Verified Firm named: " + firmRecord1 + " found in Firm Object-----",
							YesNo.No);
					CommonLib.refresh(driver);
					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.AcuityDetails);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName
										+ " record is able to open popup after click on it and verify its data on "
										+ firmRecord1 + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ firmRecord1 + ", Reason: " + subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ firmRecord1 + ", Reason: " + subjectLinkPopUpNegativeResult + "------");

					}

					if (BP.clicktabOnPage(subTabName)) {
						log(LogStatus.PASS, "Clicked on SubTab: " + subTabName, YesNo.No);

						CommonLib.ThreadSleep(8000);
						List<String> firmDetailPageNegativeResult = BP
								.fieldValueVerification(labelAndValueSeprateByBreak1);

						if (firmDetailPageNegativeResult.isEmpty()) {
							log(LogStatus.PASS,
									"------" + firmRecord1
											+ " labels and their values in Detail page has been verified------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + firmRecord1
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ firmDetailPageNegativeResult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + firmRecord1
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ firmDetailPageNegativeResult + "------");

						}

					} else {
						log(LogStatus.ERROR, "Not able to click on SubTab: " + subTabName, YesNo.No);
						sa.assertTrue(false, "Not able to click on SubTab: " + subTabName);

					}

				} else {

					log(LogStatus.ERROR, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----");

				}
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(firmRecord2, "Firms", false)) {
					log(LogStatus.INFO, "-----Verified Firm named: " + firmRecord2 + " found in Firm Object-----",
							YesNo.No);
					CommonLib.refresh(driver);
					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.AcuityDetails);
					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName
										+ " record is able to open popup after click on it and verify its data on "
										+ firmRecord2 + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ firmRecord2 + ", Reason: " + subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ firmRecord2 + ", Reason: " + subjectLinkPopUpNegativeResult + "------");

					}

					if (BP.clicktabOnPage(subTabName)) {
						log(LogStatus.PASS, "Clicked on SubTab: " + subTabName, YesNo.No);

						CommonLib.ThreadSleep(8000);
						List<String> firmDetailPageNegativeResult = BP
								.fieldValueVerification(labelAndValueSeprateByBreak2);

						if (firmDetailPageNegativeResult.isEmpty()) {
							log(LogStatus.PASS,
									"------" + firmRecord2
											+ " labels and their values in Detail page has been verified------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + firmRecord2
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ firmDetailPageNegativeResult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + firmRecord2
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ firmDetailPageNegativeResult + "------");

						}

					} else {
						log(LogStatus.ERROR, "Not able to click on SubTab: " + subTabName, YesNo.No);
						sa.assertTrue(false, "Not able to click on SubTab: " + subTabName);

					}

				} else {

					log(LogStatus.ERROR, "-----Firm named: " + firmRecord2 + " not found in Firm Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Firm named: " + firmRecord2 + " not found in Firm Object-----");

				}

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(firmRecord3ShouldNotThere, "Firms", true)) {

					log(LogStatus.INFO,
							"-----Verified Firm named: " + firmRecord3ShouldNotThere + " not found in Firm Object-----",
							YesNo.No);

				} else {

					log(LogStatus.ERROR, "-----Firm named: " + firmRecord3ShouldNotThere + " found in Firm Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Firm named: " + firmRecord3ShouldNotThere + " found in Firm Object-----");

				}

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(contactRecord, "Contacts", false)) {

					log(LogStatus.INFO,
							"-----Verified Contact named: " + contactRecord + " found in Contact Object-----",
							YesNo.No);
					CommonLib.refresh(driver);
					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.AcuityDetails);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName
										+ " record is able to open popup after click on it and verify its data on "
										+ contactRecord + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ contactRecord + ", Reason: " + subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ contactRecord + ", Reason: " + subjectLinkPopUpNegativeResult + "------");

					}

				} else {

					log(LogStatus.ERROR, "-----Contact named: " + contactRecord + " not found in Contact Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Contact named: " + contactRecord + " not found in Contact Object-----");

				}
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc061_VerifyWhenOnlyContactIsSelectedFromCreateRecordPopUpAlsoTheRecordIsEditableAndSingleStringShownByDefault(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FirmLegalName4;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject73;
		String task1Notes = AMNNR_Notes73;
		String relatedTo = AMNNR_RelatedTo73;
		String priority = AMNNR_AdvancePriority73;
		String status = AMNNR_AdvanceStatus73;
		String updatedRelatedToVerify = relatedTo + AMNNR_RelatedTo74 + recordName;
		String task1NotesVerify = task1Notes.replace("@", "");

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp73.split("<break>", -1) };
		String firmRecord1 = AMNNR_CreateNewRecordPopUp73.split("<break>", -1)[4];
		String contactRecord = AMNNR_CreateNewRecordPopUp73.split("<break>", -1)[1];

		String subTabName = "Details";

		String[] labelAndValueSeprateByBreakForContact = { AMNNR_DetailPageRecord3 + "<break>" + firmRecord1 };
		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, firmRecord1 } };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = AMNNR_FirmLegalName4;
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Pitching";
//		String task1Notes = "This is to check @ahmed and @ecostic , quest should be part of the deal";
//		String relatedTo = "Houlihan Lokey<break>Glomez";
//		String priority = "Normal";
//		String status = "In Progress";
//		String updatedRelatedToVerify = relatedTo + "<break>ahmed<break>" + recordName;
//		String task1NotesVerify = task1Notes.replace("@", "");
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = {
//				"checked<break>ahmed<break><AsItIs><break>Contact<break>exrogen<break>Create".split("<break>", -1) };
//		String firmRecord1 = "exrogen";
//		String contactRecord = "ahmed";
//
//		String subTabName = "Details";
//
//		String[] labelAndValueSeprateByBreakForContact = { "Legal Name" + "<break>" + firmRecord1 };
//		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, firmRecord1 } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(contactRecord, "Contacts", false)) {

					log(LogStatus.INFO,
							"-----Verified Contact named: " + contactRecord + " found in Contact Object-----",
							YesNo.No);
					CommonLib.refresh(driver);
					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.AcuityDetails);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName
										+ " record is able to open popup after click on it and verify its data on "
										+ contactRecord + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ contactRecord + ", Reason: " + subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ contactRecord + ", Reason: " + subjectLinkPopUpNegativeResult + "------");

					}

					if (BP.clicktabOnPage(subTabName)) {
						log(LogStatus.PASS, "Clicked on SubTab: " + subTabName, YesNo.No);

						CommonLib.ThreadSleep(8000);
						List<String> contactDetailPageNegativeResult = BP
								.fieldValueVerification(labelAndValueSeprateByBreakForContact);

						if (contactDetailPageNegativeResult.isEmpty()) {
							log(LogStatus.PASS,
									"------" + contactRecord
											+ " labels and their values in Detail page has been verified------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + contactRecord
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ contactDetailPageNegativeResult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + contactRecord
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ contactDetailPageNegativeResult + "------");

						}

					} else {
						log(LogStatus.ERROR, "Not able to click on SubTab: " + subTabName, YesNo.No);
						sa.assertTrue(false, "Not able to click on SubTab: " + subTabName);

					}

				} else {

					log(LogStatus.ERROR, "-----Contact named: " + contactRecord + " not found in Contact Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Contact named: " + contactRecord + " not found in Contact Object-----");

				}

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(firmRecord1, "Firms", false)) {

					log(LogStatus.INFO, "-----Verified Firm named: " + firmRecord1 + " found in Firm Object-----",
							YesNo.No);

				} else {

					log(LogStatus.ERROR, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----");

				}

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
							"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

						String url = driver.getCurrentUrl();
						ThreadSleep(1000);
						ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
								.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
										task1AdvancedSection, null);
						if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
							log(LogStatus.INFO,
									"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
											+ NotesPopUpPrefilledNegativeResultUpdated,
									YesNo.No);
							sa.assertTrue(false,
									"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
											+ NotesPopUpPrefilledNegativeResultUpdated);
						}

					} else {
						log(LogStatus.ERROR,
								"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName,
								YesNo.No);
						sa.assertTrue(false,
								"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
							"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

						ArrayList<String> verifyRelatedToNotTaggedNegativeResults = BP
								.verifyRelatedToNotTagged(relatedAssociationNotContains);
						if (verifyRelatedToNotTaggedNegativeResults.isEmpty()) {
							log(LogStatus.INFO, "RelatedTo Association Not Tagged has been verified in Note Popup",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
											+ verifyRelatedToNotTaggedNegativeResults,
									YesNo.No);
							sa.assertTrue(false,
									"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
											+ verifyRelatedToNotTaggedNegativeResults);
						}

					} else {
						log(LogStatus.ERROR,
								"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName,
								YesNo.No);
						sa.assertTrue(false,
								"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc062_VerifyWhenBothContactAndFirmIsSelectedFromCreateRecordPopup(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		SetupPageBusinessLayer sp = new SetupPageBusinessLayer(driver);

		String contactRecordTypeList = "Contact<break>Banker";
		String contactRecordTypeArray[] = contactRecordTypeList.split(breakSP, -1);
		String[] profileForSelection = { "PE Standard User" };
		boolean isMakeAvailable = false;
		boolean isMakeDefault = true;
		boolean flag = false;
		String recordTypeDescription = "Description Record Type";
		String[][][] contactRecordType = {
				{ { recordTypeLabel.Record_Type_Label.toString(), contactRecordTypeArray[0] },
						{ recordTypeLabel.Description.toString(), contactRecordTypeArray[0] + recordTypeDescription },
						{ recordTypeLabel.Active.toString(), "" } },
				{ { recordTypeLabel.Record_Type_Label.toString(), contactRecordTypeArray[1] },
						{ recordTypeLabel.Description.toString(), contactRecordTypeArray[1] + recordTypeDescription },
						{ recordTypeLabel.Active.toString(), "" } } };

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FirmLegalName4;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject75;
		String task1Notes = AMNNR_Notes75;
		String relatedTo = AMNNR_RelatedTo75;
		String priority = AMNNR_AdvancePriority75;
		String status = AMNNR_AdvanceStatus75;
		String updatedRelatedToVerify = relatedTo + AMNNR_RelatedTo76 + recordName;
		String task1NotesVerify = task1Notes.replace("@", "");

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp75.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp76.split("<break>", -1) };
		String firmRecord1 = AMNNR_CreateNewRecordPopUp76.split("<break>", -1)[1];
		String contactRecord = AMNNR_CreateNewRecordPopUp75.split("<break>", -1)[2];

		String subTabName = "Details";

		String[] labelAndValueSeprateByBreakForContact = { AMNNR_DetailPageRecord4 + "<break>" + contactRecord,
				AMNNR_DetailPageRecord5, AMNNR_DetailPageRecord6 };
		String[] labelAndValueSeprateByBreakForFirm = { AMNNR_DetailPageRecord7 + "<break>" + firmRecord1,
				AMNNR_DetailPageRecord8 };

//		String contactRecordTypeList = "Contact<break>Banker";
//		String contactRecordTypeArray[] = contactRecordTypeList.split(breakSP, -1);
//		String[] profileForSelection = { "PE Standard User" };
//		boolean isMakeAvailable = false;
//		boolean isMakeDefault = true;
//		boolean flag = false;
//		String recordTypeDescription = "Description Record Type";
//		String[][][] contactRecordType = {
//				{ { recordTypeLabel.Record_Type_Label.toString(), contactRecordTypeArray[0] },
//						{ recordTypeLabel.Description.toString(), contactRecordTypeArray[0] + recordTypeDescription },
//						{ recordTypeLabel.Active.toString(), "" } },
//				{ { recordTypeLabel.Record_Type_Label.toString(), contactRecordTypeArray[1] },
//						{ recordTypeLabel.Description.toString(), contactRecordTypeArray[1] + recordTypeDescription },
//						{ recordTypeLabel.Active.toString(), "" } } };
//
//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = AMNNR_FirmLegalName4;
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Pitching 1.1";
//		String task1Notes = "This is to check @Owem and @AQUA quest should be part of the deal";
//		String relatedTo = "Houlihan Lokey<break>Glomez";
//		String priority = "Normal";
//		String status = "Completed";
//		String updatedRelatedToVerify = relatedTo + "<break>Owem D'souza<break>AQUA<break>" + recordName;
//		String task1NotesVerify = task1Notes.replace("@", "");
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = {
//				"checked<break>Owem<break>Owem D'souza<break>Contact<break>Maxtra<existing><break>Create"
//						.split("<break>", -1),
//				"checked<break>AQUA<break><AsItIs><break>Firm<break><break>Create".split("<break>", -1) };
//		String firmRecord1 = "AQUA";
//		String contactRecord = "Owem D'souza";
//
//		String subTabName = "Details";
//
//		String[] labelAndValueSeprateByBreakForContact = { "Name" + "<break>" + contactRecord,
//				"Contact Record Type" + "<break>" + "Contact", "Legal Name" + "<break>" + "Maxtra" };
//		String[] labelAndValueSeprateByBreakForFirm = { "Legal Name" + "<break>" + firmRecord1,
//				"Record Type" + "<break>" + "Company" };

		lp.CRMLogin(superAdminUserName, adminPassword);
		for (int i = 0; i < contactRecordTypeArray.length; i++) {
			home.notificationPopUpClose();
			if (home.clickOnSetUpLink()) {
				flag = false;
				String parentID = switchOnWindow(driver);

				if (parentID != null) {
					if (sp.searchStandardOrCustomObject("", Mode.Lightning.toString(), object.Contact)) {
						if (sp.clickOnObjectFeature("", Mode.Lightning.toString(), object.Contact,
								ObjectFeatureName.recordTypes)) {
							if (i == 0) {
								if (sp.listOfRecordTypes().contains(contactRecordType[i][0][1])) {
									log(LogStatus.INFO, "Record Type: " + contactRecordType[i][0][1]
											+ " is already created, So not going to Create", YesNo.No);
									flag = true;
								} else {
									flag = sp.createRecordTypeForObject(projectName, contactRecordType[i],
											isMakeAvailable, profileForSelection, isMakeDefault, null, 10);
								}
							} else {
								isMakeDefault = false;

								if (sp.listOfRecordTypes().contains(contactRecordType[i][0][1])) {
									log(LogStatus.INFO, "Record Type: " + contactRecordType[i][0][1]
											+ " is already created, So not going to Create", YesNo.No);
									flag = true;
								} else {
									flag = sp.createRecordTypeForObject(projectName, contactRecordType[i],
											isMakeAvailable, profileForSelection, isMakeDefault, null, 10);
								}
							}
							if (flag) {
								log(LogStatus.INFO, "Created Record Type : " + contactRecordTypeArray[i], YesNo.No);
							} else {
								log(LogStatus.ERROR, "Not Able to Create Record Type : " + contactRecordTypeArray[i],
										YesNo.Yes);
								sa.assertTrue(false, "Not Able to Create Record Type : " + contactRecordTypeArray[i]);
							}

						} else {
							log(LogStatus.ERROR,
									"object feature " + ObjectFeatureName.recordTypes + " is not clickable", YesNo.Yes);
							sa.assertTrue(false,
									"object feature " + ObjectFeatureName.recordTypes + " is not clickable");
						}
					} else {
						log(LogStatus.ERROR, object.Deal + " object could not be found in object manager", YesNo.Yes);
						sa.assertTrue(false, object.Deal + " object could not be found in object manager");
					}
					driver.close();
					driver.switchTo().window(parentID);
					switchToDefaultContent(driver);
					refresh(driver);
				} else {
					log(LogStatus.ERROR, "could not find new window to switch", YesNo.Yes);
					sa.assertTrue(false, "could not find new window to switch");
				}
			} else {
				log(LogStatus.ERROR, "could not click on setup link", YesNo.Yes);
				sa.assertTrue(false, "could not click on setup link");
			}

		}

		lp.CRMlogout();
		CommonLib.ThreadSleep(5000);

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

				CommonLib.refresh(driver);
				CommonLib.ThreadSleep(4000);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(contactRecord, "Contacts", false)) {

					log(LogStatus.INFO,
							"-----Verified Contact named: " + contactRecord + " found in Contact Object-----",
							YesNo.No);
					CommonLib.refresh(driver);

					if (BP.clicktabOnPage(subTabName)) {
						log(LogStatus.PASS, "Clicked on SubTab: " + subTabName, YesNo.No);

						CommonLib.ThreadSleep(8000);
						List<String> contactDetailPageNegativeResult = BP
								.fieldValueVerification(labelAndValueSeprateByBreakForContact);

						if (contactDetailPageNegativeResult.isEmpty()) {
							log(LogStatus.PASS,
									"------" + contactRecord
											+ " labels and their values in Detail page has been verified------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + contactRecord
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ contactDetailPageNegativeResult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + contactRecord
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ contactDetailPageNegativeResult + "------");

						}

					} else {
						log(LogStatus.ERROR, "Not able to click on SubTab: " + subTabName, YesNo.No);
						sa.assertTrue(false, "Not able to click on SubTab: " + subTabName);

					}

				} else {

					log(LogStatus.ERROR, "-----Contact named: " + contactRecord + " not found in Contact Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Contact named: " + contactRecord + " not found in Contact Object-----");

				}

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(firmRecord1, "Firms", false)) {

					log(LogStatus.INFO, "-----Verified Firm named: " + firmRecord1 + " found in Firm Object-----",
							YesNo.No);
					CommonLib.refresh(driver);
					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.AcuityDetails);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName
										+ " record is able to open popup after click on it and verify its data on "
										+ firmRecord1 + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ firmRecord1 + ", Reason: " + subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ firmRecord1 + ", Reason: " + subjectLinkPopUpNegativeResult + "------");

					}

					if (BP.clicktabOnPage(subTabName)) {
						log(LogStatus.PASS, "Clicked on SubTab: " + subTabName, YesNo.No);

						CommonLib.ThreadSleep(8000);
						List<String> firmDetailPageNegativeResult = BP
								.fieldValueVerification(labelAndValueSeprateByBreakForFirm);

						if (firmDetailPageNegativeResult.isEmpty()) {
							log(LogStatus.PASS,
									"------" + firmRecord1
											+ " labels and their values in Detail page has been verified------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + firmRecord1
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ firmDetailPageNegativeResult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + firmRecord1
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ firmDetailPageNegativeResult + "------");

						}

					} else {
						log(LogStatus.ERROR, "Not able to click on SubTab: " + subTabName, YesNo.No);
						sa.assertTrue(false, "Not able to click on SubTab: " + subTabName);

					}

				} else {

					log(LogStatus.ERROR, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		lp.CRMlogout();
		CommonLib.ThreadSleep(7000);

		lp.CRMLogin(superAdminUserName, adminPassword);

		for (int i = 0; i < contactRecordTypeArray.length; i++) {
			home.notificationPopUpClose();
			if (home.clickOnSetUpLink()) {
				flag = false;
				String parentID = switchOnWindow(driver);
				if (parentID != null) {

					if (sp.searchStandardOrCustomObject(projectName, mode, object.Profiles)) {
						log(LogStatus.INFO, "Profile has been open", YesNo.Yes);

						if (sp.removeRecordTypeOfObject("PE Standard User",
								com.navatar.generic.EnumConstants.RecordType.Contact)) {
							log(LogStatus.INFO, "The record type of Contact has been removed", YesNo.No);
							break;

						} else {
							log(LogStatus.ERROR, "The record type of Contact is not removed", YesNo.No);
							sa.assertTrue(false, "The record type of Contact is not removed");
						}
					} else {
						log(LogStatus.ERROR, "Not Able to Search the " + object.Profiles + " object", YesNo.Yes);
						sa.assertTrue(false, "Not Able to Search the Object" + object.Profiles + " object");
					}

					driver.close();
					driver.switchTo().window(parentID);
					switchToDefaultContent(driver);
				} else {
					log(LogStatus.ERROR, "could not find new window to switch", YesNo.Yes);
					sa.assertTrue(false, "could not find new window to switch");
				}
			} else {
				log(LogStatus.ERROR, "could not click on setup link", YesNo.Yes);
				sa.assertTrue(false, "could not click on setup link");
			}

		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc063_VerifyWhenBothContactAndFirmIsErasedFromCreateRecordPopUpAndEnteredNewDetails(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FirmLegalName4;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject77;
		String task1Notes = AMNNR_Notes77;
		String relatedTo = AMNNR_RelatedTo77;
		String priority = AMNNR_AdvancePriority77;
		String status = AMNNR_AdvanceStatus77;
		String updatedRelatedToVerify = relatedTo + AMNNR_RelatedTo78 + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);
		String task1NotesVerify = task1Notes.replace("@", "");

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification77 } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp77.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp78.split("<break>", -1) };
		String firmRecord1 = AMNNR_CreateNewRecordPopUp78.split("<break>", -1)[2];
		String contactRecord = AMNNR_CreateNewRecordPopUp77.split("<break>", -1)[2];

		String subTabName = "Details";

		String[] labelAndValueSeprateByBreakForContact = { AMNNR_DetailPageRecord4 + "<break>" + contactRecord,
				AMNNR_DetailPageRecord9 };
		String[] labelAndValueSeprateByBreakForFirm = { AMNNR_DetailPageRecord7 + "<break>" + firmRecord1,
				AMNNR_DetailPageRecord10 };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = AMNNR_FirmLegalName4;
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Pitching 1.10";
//		String task1Notes = "Had been assigned in the task with @Sqwab who belongs to @Qazx firm.";
//		String relatedTo = "Martha<break>Vertica";
//		String priority = "High";
//		String status = "Not Started";
//		String updatedRelatedToVerify = relatedTo + "<break>Mack cronto<break>Cheex<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//		String task1NotesVerify = task1Notes.replace("@", "");
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "B" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = {
//				"checked<break>Sqwab<break>Mack cronto<break>Contact<break><break>Create".split("<break>", -1),
//				"checked<break>Qazx<break>Cheex<break>Firm<break><break>Create".split("<break>", -1) };
//		String firmRecord1 = "Cheex";
//		String contactRecord = "Mack cronto";
//
//		String subTabName = "Details";
//
//		String[] labelAndValueSeprateByBreakForContact = { "Name" + "<break>" + contactRecord,
//				"Legal Name<break>Dummy Account" };
//		String[] labelAndValueSeprateByBreakForFirm = { "Legal Name" + "<break>" + firmRecord1,
//				"Record Type<break>Company" };

		lp.CRMLogin(crmUser1EmailID, adminPassword);
		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

				CommonLib.ThreadSleep(4000);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(contactRecord, "Contacts", false)) {

					log(LogStatus.INFO,
							"-----Verified Contact named: " + contactRecord + " found in Contact Object-----",
							YesNo.No);
					CommonLib.refresh(driver);

					if (BP.clicktabOnPage(subTabName)) {
						log(LogStatus.PASS, "Clicked on SubTab: " + subTabName, YesNo.No);

						CommonLib.ThreadSleep(8000);
						List<String> contactDetailPageNegativeResult = BP
								.fieldValueVerification(labelAndValueSeprateByBreakForContact);

						if (contactDetailPageNegativeResult.isEmpty()) {
							log(LogStatus.PASS,
									"------" + contactRecord
											+ " labels and their values in Detail page has been verified------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + contactRecord
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ contactDetailPageNegativeResult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + contactRecord
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ contactDetailPageNegativeResult + "------");

						}

					} else {
						log(LogStatus.ERROR, "Not able to click on SubTab: " + subTabName, YesNo.No);
						sa.assertTrue(false, "Not able to click on SubTab: " + subTabName);

					}

				} else {

					log(LogStatus.ERROR, "-----Contact named: " + contactRecord + " not found in Contact Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Contact named: " + contactRecord + " not found in Contact Object-----");

				}

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(firmRecord1, "Firms", false)) {

					log(LogStatus.INFO, "-----Verified Firm named: " + firmRecord1 + " found in Firm Object-----",
							YesNo.No);
					CommonLib.refresh(driver);
					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.AcuityDetails);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName
										+ " record is able to open popup after click on it and verify its data on "
										+ firmRecord1 + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ firmRecord1 + ", Reason: " + subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ firmRecord1 + ", Reason: " + subjectLinkPopUpNegativeResult + "------");

					}

					if (BP.clicktabOnPage(subTabName)) {
						log(LogStatus.PASS, "Clicked on SubTab: " + subTabName, YesNo.No);

						CommonLib.ThreadSleep(8000);
						List<String> firmDetailPageNegativeResult = BP
								.fieldValueVerification(labelAndValueSeprateByBreakForFirm);

						if (firmDetailPageNegativeResult.isEmpty()) {
							log(LogStatus.PASS,
									"------" + firmRecord1
											+ " labels and their values in Detail page has been verified------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + firmRecord1
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ firmDetailPageNegativeResult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + firmRecord1
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ firmDetailPageNegativeResult + "------");

						}

					} else {
						log(LogStatus.ERROR, "Not able to click on SubTab: " + subTabName, YesNo.No);
						sa.assertTrue(false, "Not able to click on SubTab: " + subTabName);

					}

				} else {

					log(LogStatus.ERROR, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc064_VerifyWhenAllTheRecordsUnderCreateRecordPopUpIsErasedAndClickedOnCreateButton(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FirmLegalName4;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject79;
		String task1Notes = AMNNR_Notes79;
		String relatedTo = AMNNR_RelatedTo79;
		String priority = AMNNR_AdvancePriority79;
		String status = AMNNR_AdvanceStatus79;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);
		String updatedRelatedToNotContainsVerify = AMNNR_RelatedTo80;
		String task1NotesVerify = task1Notes.replace("@", "");

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification79 } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp79.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp80.split("<break>", -1) };
		String record1 = AMNNR_CreateNewRecordPopUp79.split("<break>", -1)[1];
		String record2 = AMNNR_CreateNewRecordPopUp80.split("<break>", -1)[1];

		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, updatedRelatedToNotContainsVerify } };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = AMNNR_FirmLegalName4;
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Pitching 1.2";
//		String task1Notes = "Had been assigned in the task with @SqwabNew who belongs to @QazxNew firm.";
//		String relatedTo = "Martha<break>Vertica";
//		String priority = "High";
//		String status = "Not Started";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//		String updatedRelatedToNotContainsVerify = "SqwabNew<break>QazxNew";
//		String task1NotesVerify = task1Notes.replace("@", "");
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "C" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = {
//				"checked<break>SqwabNew<break><Error>Complete this field.<break>Contact<break><break>Ignore"
//						.split("<break>", -1),
//				"checked<break>QazxNew<break><Error>Complete this field.<break>Firm<break><break>Ignore"
//						.split("<break>", -1) };
//		String record1 = "SqwabNew";
//		String record2 = "QazxNew";
//
//		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, updatedRelatedToNotContainsVerify } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);
		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

				CommonLib.ThreadSleep(4000);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(record1, "Contacts", true)) {

					log(LogStatus.INFO, "-----Verified Contact named: " + record1 + " not found in Contact Object-----",
							YesNo.No);

				} else {

					log(LogStatus.ERROR, "-----Contact named: " + record1 + " found in Contact Object-----", YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Contact named: " + record1 + " found in Contact Object-----");

				}

				CommonLib.ThreadSleep(4000);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(record2, "Contacts", true)) {

					log(LogStatus.INFO, "-----Verified Contact named: " + record2 + " not found in Contact Object-----",
							YesNo.No);

				} else {

					log(LogStatus.ERROR, "-----Contact named: " + record2 + " found in Contact Object-----", YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Contact named: " + record2 + " found in Contact Object-----");

				}

				CommonLib.refresh(driver);

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(record1, "Firms", true)) {

					log(LogStatus.INFO, "-----Verified Firm named: " + record1 + " not found in Firm Object-----",
							YesNo.No);

				} else {

					log(LogStatus.ERROR, "-----Firm named: " + record1 + " found in Firm Object-----", YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Firm named: " + record1 + " found in Firm Object-----");

				}

				CommonLib.refresh(driver);

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(record2, "Firms", true)) {

					log(LogStatus.INFO, "-----Verified Firm named: " + record2 + " not found in Firm Object-----",
							YesNo.No);

				} else {

					log(LogStatus.ERROR, "-----Firm named: " + record2 + " found in Firm Object-----", YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Firm named: " + record2 + " found in Firm Object-----");

				}

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
							"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

						ArrayList<String> verifyRelatedToNotTaggedNegativeResults = BP
								.verifyRelatedToNotTagged(relatedAssociationNotContains);
						if (verifyRelatedToNotTaggedNegativeResults.isEmpty()) {
							log(LogStatus.INFO, "RelatedTo Association Not Tagged has been verified in Note Popup",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
											+ verifyRelatedToNotTaggedNegativeResults,
									YesNo.No);
							sa.assertTrue(false,
									"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
											+ verifyRelatedToNotTaggedNegativeResults);
						}

					} else {
						log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
						sa.assertTrue(false, "-----Activity timeline record is not created-----");
					}

				} else {
					log(LogStatus.ERROR,
							"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName,
							YesNo.No);
					sa.assertTrue(false,
							"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName);
				}

//				driver.close();
//				driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc065_VerifyWhen14RecordsAreEnteredUsingAtTheRateTaggingAndAllAreSelectedAsFirmFromCreateRecordPopUpAndSaved(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		SetupPageBusinessLayer sp = new SetupPageBusinessLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_Contact3;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject81;
		String task1Notes = AMNNR_Notes81;
		String relatedTo = AMNNR_RelatedTo81;
		String priority = AMNNR_AdvancePriority81;
		String status = AMNNR_AdvanceStatus81;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + AMNNR_SuggestedTag81;
		String updatedRelatedToNotContainsVerify = AMNNR_RelatedTo82;
		String task1NotesVerify = task1Notes.replace("@", "");
		String[] SuggestedTags = AMNNR_SuggestedTag81.split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification81 } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp81.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp82.split("<break>", -1), AMNNR_CreateNewRecordPopUp83.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp84.split("<break>", -1), AMNNR_CreateNewRecordPopUp85.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp86.split("<break>", -1), AMNNR_CreateNewRecordPopUp87.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp88.split("<break>", -1), AMNNR_CreateNewRecordPopUp89.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp90.split("<break>", -1), AMNNR_CreateNewRecordPopUp91.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp92.split("<break>", -1), AMNNR_CreateNewRecordPopUp93.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp94.split("<break>", -1) };
		String firmRecord1 = AMNNR_CreateNewRecordPopUp88.split("<break>", -1)[1];
		String firmRecord2 = AMNNR_CreateNewRecordPopUp92.split("<break>", -1)[1];

		boolean flag = false;

		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, updatedRelatedToNotContainsVerify } };

//		
//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "Max";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Lineup announcement";
//		String task1Notes = "Had a good talk with Litz regarding @THECARLYLEGROUP , @WARBUG ,  @PINCUS , @BAINCAPITAL , @TPGGROWTH CAPITAL , @CVCCAPITALPARTNERS , @THEBLACKSTONEGROUP , @KKR&COMPANY , @EVERSTONECAPITAL , @BARINGPRIVATEEQUITY , @CLSACAPITALPARTNERS , @KOTAKPRIVATEEQUITY , @CHRYSCAPITAL , @TRUENORTH’SINDIAVALUEFUND , @CHRYSCAPITALNEW";
//		String relatedTo = "Martha<break>Vertica<break>Sumo Logic";
//		String priority = "Normal";
//		String status = "In Progress";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + "Litz";
//		String updatedRelatedToNotContainsVerify = "THECARLYLEGROUP<break>WARBUG<break>PINCUS<break>BAINCAPITAL<break>TPGGROWTH<break>CVCCAPITALPARTNERS<break>THEBLACKSTONEGROUP<break>KKR&COMPANY<break>EVERSTONECAPITAL<break>BARINGPRIVATEEQUITY<break>CLSACAPITALPARTNERS<break>CHRYSCAPITAL<break>TRUENORTH’SINDIAVALUEFUND<break>CHRYSCAPITALNEW";
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String[] SuggestedTags = "Litz".split("<break>", -1);
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "A" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = {
//				"checked<break>THECARLYLEGROUP<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>WARBUG<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>PINCUS<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>BAINCAPITAL<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>TPGGROWTH<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>CVCCAPITALPARTNERS<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>THEBLACKSTONEGROUP<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>KKR&COMPANY<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>EVERSTONECAPITAL<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>BARINGPRIVATEEQUITY<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>CLSACAPITALPARTNERS<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>CHRYSCAPITAL<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>TRUENORTH’SINDIAVALUEFUND<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>CHRYSCAPITALNEW<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1) };
//		String firmRecord1 = "KKR&COMPANY";
//		String firmRecord2 = "CHRYSCAPITAL";
//
//		boolean flag = false;
//
//		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, updatedRelatedToNotContainsVerify } };

		lp.CRMLogin(superAdminUserName, adminPassword);
		if (home.clickOnSetUpLink()) {
			flag = false;
			String parentID = switchOnWindow(driver);
			if (parentID != null) {

				if (sp.searchStandardOrCustomObject(projectName, mode, object.Profiles)) {
					log(LogStatus.INFO, "Profile has been open", YesNo.Yes);

					if (sp.defaultRecordTypeSelect("PE Standard User", "Account", "Institution")) {
						log(LogStatus.INFO,
								"-----The record type of Account has been selected to: " + "Institution" + "-----",
								YesNo.No);
						flag = true;

					} else {
						log(LogStatus.ERROR,
								"-----The record type of Account has not been selected to: " + "Institution" + "-----",
								YesNo.No);
						sa.assertTrue(false,
								"-----The record type of Account has not been selected to: " + "Institution" + "-----");
					}
				} else {
					log(LogStatus.ERROR, "Not Able to Search the " + object.Profiles + " object", YesNo.Yes);
					sa.assertTrue(false, "Not Able to Search the Object" + object.Profiles + " object");
				}

				driver.close();
				driver.switchTo().window(parentID);
				switchToDefaultContent(driver);
			} else {
				log(LogStatus.ERROR, "could not find new window to switch", YesNo.Yes);
				sa.assertTrue(false, "could not find new window to switch");
			}
		} else {
			log(LogStatus.ERROR, "could not click on setup link", YesNo.Yes);
			sa.assertTrue(false, "could not click on setup link");
		}

		lp.CRMlogout();
		ThreadSleep(5000);
		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (flag) {

			if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj2, recordName, null)) {
				log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

				if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection,
						task1AdvancedSection, null, SuggestedTags, false, null, null, createNewRecordPopUp, null, null,
						null)) {
					log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
					CommonLib.refresh(driver);
					lp.clickOnTab(projectName, TabName.HomeTab);
					if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

						log(LogStatus.INFO,
								"-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
								YesNo.No);

						ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
								task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
								PageName.TaskPage);

						if (subjectLinkPopUpNegativeResult.isEmpty()) {
							log(LogStatus.PASS, "------" + task1SubjectName
									+ " record is able to open popup after click on it and verify its data" + "------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------",
									YesNo.Yes);
							sa.assertTrue(false,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------");

						}

//						driver.close();
//						driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
						CommonLib.ThreadSleep(4000);
					} else {

						log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
								YesNo.Yes);
						BaseLib.sa.assertTrue(false,
								"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

					}

					lp.clickOnTab(projectName, TabName.HomeTab);
					if (home.globalSearchAndNavigate(firmRecord1, "Firms", false)) {

						log(LogStatus.INFO, "-----Verified Firm named: " + firmRecord1 + " found in Firm Object-----",
								YesNo.No);

					} else {

						log(LogStatus.ERROR, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----",
								YesNo.Yes);
						BaseLib.sa.assertTrue(false,
								"-----Firm named: " + firmRecord1 + " not found in Firm Object-----");

					}

					lp.clickOnTab(projectName, TabName.HomeTab);
					if (home.globalSearchAndNavigate(firmRecord2, "Firms", false)) {

						log(LogStatus.INFO, "-----Verified Firm named: " + firmRecord2 + " found in Firm Object-----",
								YesNo.No);

					} else {

						log(LogStatus.ERROR, "-----Firm named: " + firmRecord2 + " not found in Firm Object-----",
								YesNo.Yes);
						BaseLib.sa.assertTrue(false,
								"-----Firm named: " + firmRecord2 + " not found in Firm Object-----");

					}

					lp.clickOnTab(projectName, TabName.HomeTab);
					if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

						log(LogStatus.INFO,
								"-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
								YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							ArrayList<String> verifyRelatedToNotTaggedNegativeResults = BP
									.verifyRelatedToNotTagged(relatedAssociationNotContains);
							if (verifyRelatedToNotTaggedNegativeResults.isEmpty()) {
								log(LogStatus.INFO, "RelatedTo Association Not Tagged has been verified in Note Popup",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
												+ verifyRelatedToNotTaggedNegativeResults,
										YesNo.No);
								sa.assertTrue(false,
										"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
												+ verifyRelatedToNotTaggedNegativeResults);
							}

						} else {
							log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
							sa.assertTrue(false, "-----Activity timeline record is not created-----");
						}

					} else {
						log(LogStatus.ERROR,
								"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName,
								YesNo.No);
						sa.assertTrue(false,
								"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

				} else {
					log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
					sa.assertTrue(false, "-----Activity timeline record is not created-----");
				}

			} else

			{
				log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
				sa.assertTrue(false, "Not able to Open the Record: " + recordName);
			}

		} else {
			log(LogStatus.ERROR, "-----Not able to Select Default record Type, So not able to proceed further-----",
					YesNo.No);
			sa.assertTrue(false, "-----Not able to Select Default record Type, So not able to proceed further-----");
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })
	@Test
	public void AcuityMNNRTc066_VerifyWhen51RecordsAreEnteredUsingAtTheRateTaggingAndAllAreSelectedAsContactFromCreateRecordPopUpAndSaved(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_Contact3;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject95;
		String task1Notes = AMNNR_Notes95;
		String relatedTo = AMNNR_RelatedTo95;
		String priority = AMNNR_AdvancePriority95;
		String status = AMNNR_AdvanceStatus95;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + AMNNR_SuggestedTag95;
		String updatedRelatedToNotContainsVerify = "";
		for (int i = 1; i <= 51; i++) {
			updatedRelatedToNotContainsVerify = updatedRelatedToNotContainsVerify + AMNNR_RelatedTo96 + i + "<break>";
			if (i == 51)
				updatedRelatedToNotContainsVerify = updatedRelatedToNotContainsVerify.substring(0,
						(updatedRelatedToNotContainsVerify.length() - 7));
		}
		String task1NotesVerify = task1Notes.replace("@", "");
		String[] SuggestedTags = AMNNR_SuggestedTag95.split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification95 } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		ArrayList<String[]> createRecordPopupRecordsList = new ArrayList<String[]>();

		for (int i = 1; i <= 51; i++) {

			String temp = AMNNR_CreateNewRecordPopUp95 + i + AMNNR_CreateNewRecordPopUp96;
			createRecordPopupRecordsList.add(temp.split("<break>", -1));

		}

		Integer createRecordPopupRecordsListSize = createRecordPopupRecordsList.size();
		String[][] createNewRecordPopUp = new String[createRecordPopupRecordsListSize][];
		for (int i = 0; i < createRecordPopupRecordsListSize; i++) {
			createNewRecordPopUp[i] = createRecordPopupRecordsList.get(i);

		}

		System.out.println(createNewRecordPopUp.length);
		String contactRecord1 = AMNNR_RelatedTo96 + (new Random().nextInt(51) + 1);
		String contactRecord2 = AMNNR_RelatedTo96 + (new Random().nextInt(51) + 1);

		System.out.println(contactRecord1);
		System.out.println(contactRecord2);

		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, updatedRelatedToNotContainsVerify } };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = AMNNR_Contact3;
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Lineup announcement 2";
//		String task1Notes = "Had a good talk with Litz regarding @smith1 @smith2 @smith3 @smith4 @smith5 @smith6 @smith7 @smith8  @smith9 @smith10 @smith11 @smith12 @smith13 @smith14 @smith15 @smith16 @smith17 @smith18 @smith19 @smith20 @smith21 @smith22 @smith23 @smith24 @smith25 @smith26 @smith27 @smith28 @smith29 @smith30 @smith31 @smith32 @smith33 @smith34 @smith35 @smith36 @smith37 @smith38 @smith39 @smith40 @smith41 @smith42 @smith43 @smith44 @smith45 @smith46 @smith47 @smith48 @smith49 @smith50 @smith51";
//		String relatedTo = "Martha<break>Vertica<break>Sumo Logic";
//		String priority = "Normal";
//		String status = "In Progress";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + "Litz";
//		String updatedRelatedToNotContainsVerify = "";
//		for (int i = 1; i <= 51; i++) {
//			updatedRelatedToNotContainsVerify = updatedRelatedToNotContainsVerify + "smith" + i + "<break>";
//			if (i == 51)
//				updatedRelatedToNotContainsVerify = updatedRelatedToNotContainsVerify.substring(0,
//						(updatedRelatedToNotContainsVerify.length() - 7));
//		}
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String[] SuggestedTags = "Litz".split("<break>", -1);
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "A" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		ArrayList<String[]> createRecordPopupRecordsList = new ArrayList<String[]>();
//
//		for (int i = 1; i <= 51; i++) {
//
//			String temp = "checked<break>smith" + i
//					+ "<break><AsItIs><break>Contact<break>Maxjonic<existing><break>Create";
//			createRecordPopupRecordsList.add(temp.split("<break>", -1));
//
//		}
//
//		Integer createRecordPopupRecordsListSize = createRecordPopupRecordsList.size();
//		String[][] createNewRecordPopUp = new String[createRecordPopupRecordsListSize][];
//		for (int i = 0; i < createRecordPopupRecordsListSize; i++) {
//			createNewRecordPopUp[i] = createRecordPopupRecordsList.get(i);
//
//		}
//
//		System.out.println(createNewRecordPopUp.length);
//		String contactRecord1 = "smith2";
//		String contactRecord2 = "smith51";
//
//		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, updatedRelatedToNotContainsVerify } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj2, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(contactRecord1, "Contacts", false)) {

					log(LogStatus.INFO,
							"-----Verified Contact named: " + contactRecord1 + " found in Contact Object-----",
							YesNo.No);

				} else {

					log(LogStatus.ERROR, "-----Contact named: " + contactRecord1 + " not found in Contact Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Contact named: " + contactRecord1 + " not found in Contact Object-----");

				}
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(contactRecord2, "Contacts", false)) {

					log(LogStatus.INFO,
							"-----Verified Contact named: " + contactRecord2 + " found in Contact Object-----",
							YesNo.No);

				} else {

					log(LogStatus.ERROR, "-----Contact named: " + contactRecord2 + " not found in Contact Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Contact named: " + contactRecord2 + " not found in Contact Object-----");

				}

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
							"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

						ArrayList<String> verifyRelatedToNotTaggedNegativeResults = BP
								.verifyRelatedToNotTagged(relatedAssociationNotContains);
						if (verifyRelatedToNotTaggedNegativeResults.isEmpty()) {
							log(LogStatus.INFO, "RelatedTo Association Not Tagged has been verified in Note Popup",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
											+ verifyRelatedToNotTaggedNegativeResults,
									YesNo.No);
							sa.assertTrue(false,
									"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
											+ verifyRelatedToNotTaggedNegativeResults);
						}

					} else {
						log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
						sa.assertTrue(false, "-----Activity timeline record is not created-----");
					}

				} else {
					log(LogStatus.ERROR,
							"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName,
							YesNo.No);
					sa.assertTrue(false,
							"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName);
				}

//				driver.close();
//				driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc067_VerifyWhenUserClicksOnIgnoreButtonOnCreateRecordsPopUpAndAgainTagsTheSameRecord(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FirmLegalName11;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject97;
		String task1Notes = AMNNR_Notes97;
		String relatedTo = AMNNR_RelatedTo97;
		String priority = AMNNR_AdvancePriority97;
		String status = AMNNR_AdvanceStatus97;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);
		String updatedRelatedToNotContainsVerify = BP.matcherOfAtTheRate(task1Notes);

		String task1NotesVerify = task1Notes.replace("@", "");
		String[] SuggestedTags = AMNNR_SuggestedTag97.split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification97 } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp97.split("<break>", -1) };

		String updatedNotesOfTask = AMNNR_Notes98;
		String[][] task1UpdateBasicSection = { { AMNNR_TaskLabel2, updatedNotesOfTask } };

		String[][] updateCreateNewRecordPopUp = { AMNNR_CreateNewRecordPopUp98.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp99.split("<break>", -1), AMNNR_CreateNewRecordPopUp100.split("<break>", -1) };

		String updatedRelatedToAfterUpdate = BP.matcherOfAtTheRate(updatedNotesOfTask);
		String updatedRelatedToVerifyAfterUpdate = updatedRelatedToVerify + "<break>" + updatedRelatedToAfterUpdate;

		String[][] task1BasicSectionVerificationAfterUpdate = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, updatedNotesOfTask.replace("@", "") },
				{ AMNNR_TaskLabel3, updatedRelatedToVerifyAfterUpdate } };

		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, updatedRelatedToNotContainsVerify } };

//		
//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "Acc 1";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 1";
//		String task1Notes = "Had been assigned in task with @jenkins who belongs to @MAVEN firm Acc .";
//		String relatedTo = "Martha<break>Vertica";
//		String priority = "Normal";
//		String status = "In Progress";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//		String updatedRelatedToNotContainsVerify = BP.matcherOfAtTheRate(task1Notes);
//
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String[] SuggestedTags = "Cancel".split("<break>", -1);
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "A" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = {
//				"checked<break>jenkins<break><AsItIs><break>Firm<break><break>Ignore".split("<break>", -1) };
//
//		String updatedNotesOfTask = "Had been assigned in the task with @jenkins @williams who belongs to @MAVEN firm";
//		String[][] task1UpdateBasicSection = { { AMNNR_TaskLabel2, updatedNotesOfTask } };
//
//		String[][] updateCreateNewRecordPopUp = {
//				"checked<break>jenkins<break><AsItIs><break>Contact<break><break>Create".split("<break>", -1),
//				"checked<break>williams<break><AsItIs><break>Contact<break><break>Create".split("<break>", -1),
//				"checked<break>MAVEN<break><AsItIs><break>Contact<break><break>Create".split("<break>", -1) };
//
//		String updatedRelatedToAfterUpdate = BP.matcherOfAtTheRate(updatedNotesOfTask);
//		String updatedRelatedToVerifyAfterUpdate = updatedRelatedToVerify + "<break>" + updatedRelatedToAfterUpdate;
//
//		String[][] task1BasicSectionVerificationAfterUpdate = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, updatedNotesOfTask.replace("@", "") },
//				{ AMNNR_TaskLabel3, updatedRelatedToVerifyAfterUpdate } };
//
//		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, updatedRelatedToNotContainsVerify } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);
					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);
						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							ArrayList<String> verifyRelatedToNotTaggedNegativeResults = BP
									.verifyRelatedToNotTagged(relatedAssociationNotContains);
							if (verifyRelatedToNotTaggedNegativeResults.isEmpty()) {
								log(LogStatus.INFO, "RelatedTo Association Not Tagged has been verified in Note Popup",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
												+ verifyRelatedToNotTaggedNegativeResults,
										YesNo.No);
								sa.assertTrue(false,
										"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
												+ verifyRelatedToNotTaggedNegativeResults);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}
					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);
					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null, null, null,
									null, false, null, null, updateCreateNewRecordPopUp, null, null, null)) {
								log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

							} else {
								log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
								sa.assertTrue(false, "Activity timeline record has not Updated");
							}
							CommonLib.refresh(driver);

							ArrayList<String> subjectLinkPopUpNegativeResult2 = BP.verifySubjectLinkPopUpOnIntraction(
									driver, task1SubjectName, task1BasicSectionVerificationAfterUpdate,
									task1AdvancedSection, IconType.Task, PageName.TaskPage);

							if (subjectLinkPopUpNegativeResult2.isEmpty()) {
								log(LogStatus.PASS,
										"------" + task1SubjectName
												+ " record is able to open popup after click on it and verify its data"
												+ "------",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"------" + task1SubjectName + " record link popup is not verified, Reason: "
												+ subjectLinkPopUpNegativeResult2 + "------",
										YesNo.Yes);
								sa.assertTrue(false,
										"------" + task1SubjectName + " record link popup is not verified, Reason: "
												+ subjectLinkPopUpNegativeResult2 + "------");

							}

							if (BP.verifyRecordInTab(projectName, tabObj2, updatedRelatedToAfterUpdate, null)) {
								log(LogStatus.INFO, "Able to Open the Record: " + updatedRelatedToAfterUpdate,
										YesNo.No);

							} else

							{
								log(LogStatus.ERROR, "Not able to Open the Record: " + updatedRelatedToAfterUpdate,
										YesNo.No);
								sa.assertTrue(false, "Not able to Open the Record: " + updatedRelatedToAfterUpdate);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}
					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc068_VerifyWhenSuggestionBoxOnNotesWhenUserTaggsTheSameRecordWhichIsCreatedThroughCreateRecordPopUpUsingAtTheRateTagging(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FirmLegalName12;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject101;
		String task1Notes = AMNNR_Notes101;
		String relatedTo = AMNNR_RelatedTo101;
		String priority = AMNNR_AdvancePriority101;
		String status = AMNNR_AdvanceStatus101;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + AMNNR_RelatedTo102;

		String task1NotesVerify = task1Notes.split("<Section>", -1)[1].replace("@", "");
		String[] SuggestedTags = AMNNR_SuggestedTag101.split("<break>", -1);

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp101.split("<break>") };

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification101 } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "Nexus";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 2";
//		String task1Notes = "@Mack cronto<break>@Cheex<Section>Had been assigned in task with @Mack cronto who belongs to , @Cheex firm also need to check on Maven";
//		String relatedTo = "Martha<break>Vertica<break>jenkins<break>williams";
//		String priority = "High";
//		String status = "Not Started";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + "MAVEN<break>Mack cronto<break>Cheex";
//
//		String task1NotesVerify = task1Notes.split("<Section>", -1)[1].replace("@", "");
//		String[] SuggestedTags = "MAVEN".split("<break>", -1);
//
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "C" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc069_VerifySuggestedTagPopUpWhenTaskIsCreatedAndNotesAreEnteredWithoutUsingAtTheRateWithAllKindOfDataType(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FirmLegalName13;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject103;
		String task1Notes = AMNNR_Notes103;
		String relatedTo = AMNNR_RelatedTo103;
		String priority = AMNNR_AdvancePriority103;
		String status = AMNNR_AdvanceStatus103;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);

		String task1NotesVerify = task1Notes;
		String[] SuggestedTags = AMNNR_SuggestedTag103.split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification103 } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp103.split("<break>") };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "THECARLYLEGROUP";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 4";
//		String task1Notes = "Contact having email id : Dealroom1.3+mst@gmail.com, Phone : 9889767655 , Fax :8767653 enagaged  with firm Maven and having stage of the LOI";
//		String relatedTo = "Martha<break>Vertica<break>jenkins<break>williams";
//		String priority = "High";
//		String status = "Not Started";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//
//		String task1NotesVerify = task1Notes;
//		String[] SuggestedTags = "Cancel".split("<break>", -1);
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "A" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc070_WhenMoreThan13RecordsAndMoreThan50ContactsAreSelectedFromSuggestedTagPopUpAndTaskIsCreated(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FirmLegalName13;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject104;
		String task1Notes = AMNNR_Notes104;
		String relatedTo = AMNNR_RelatedTo104;
		String priority = AMNNR_AdvancePriority104;
		String status = AMNNR_AdvanceStatus104;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);

		String task1NotesVerify = task1Notes.replace("@", "");
		String[] SuggestedTags = AMNNR_SuggestedTag104.split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification104 } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp104.split("<break>") };
		String updatedRelatedToNotContainsVerify = AMNNR_SuggestedTag104;
		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, updatedRelatedToNotContainsVerify } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag105.split("<break>", -1);

		String updatedRelatedToVerifyAfterUpdate = updatedRelatedToVerify + "<break>" + AMNNR_SuggestedTag105;

		String[][] task1BasicSectionVerificationAfterUpdate = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerifyAfterUpdate } };

		String[][][] detailSectionVerifcation = { { { AMNNR_TaskLabel1, task1SubjectName } },
				task1BasicSectionVerification, task1AdvancedSection };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "THECARLYLEGROUP";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 5";
//		String task1Notes = AMNNR_Notes33;
//		String relatedTo = "Martha<break>Vertica<break>jenkins<break>williams";
//		String priority = "High";
//		String status = "Not Started";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String[] SuggestedTags = "Con 1<break>con 2<break>con 3<break>con 4<break>con 5<break>con 6<break>con 7<break>con 8<break>con 9<break>con 10<break>con 11<break>con 12<break>con 13<break>con 14<break>con 15<break>con 16<break>con 17<break>con 18<break>con 19<break>con 20<break>con 21<break>con 22<break>con 23<break>con 24<break>con 25<break>con 26<break>con 27<break>con 28<break>con 29<break>con 30<break>con 31<break>con 32<break>con 33<break>con 34<break>con 35<break>con 36<break>con 37<break>con 38<break>con 39<break>con 40<break>con 41<break>con 42<break>con 43<break>con 44<break>con 45<break>con 46<break>con 47<break>con 48<break>con 49<break>con 50<break>Acc 1<break>Acc 2<break>Acc 3<break>Acc 4<break>Acc 5<break>Acc 6<break>Acc 7<break>Acc 8<break>Acc 9<break>Acc 10<break>Acc 11<break>Acc 12<break>Acc 13"
//				.split("<break>", -1);
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "A" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String updatedRelatedToNotContainsVerify = "Con 1<break>con 2<break>con 3<break>con 4<break>con 5<break>con 6<break>con 7<break>con 8<break>con 9<break>con 10<break>con 11<break>con 12<break>con 13<break>con 14<break>con 15<break>con 16<break>con 17<break>con 18<break>con 19<break>con 20<break>con 21<break>con 22<break>con 23<break>con 24<break>con 25<break>con 26<break>con 27<break>con 28<break>con 29<break>con 30<break>con 31<break>con 32<break>con 33<break>con 34<break>con 35<break>con 36<break>con 37<break>con 38<break>con 39<break>con 40<break>con 41<break>con 42<break>con 43<break>con 44<break>con 45<break>con 46<break>con 47<break>con 48<break>con 49<break>con 50<break>Acc 1<break>Acc 2<break>Acc 3<break>Acc 4<break>Acc 5<break>Acc 6<break>Acc 7<break>Acc 8<break>Acc 9<break>Acc 10<break>Acc 11<break>Acc 12<break>Acc 13";
//		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, updatedRelatedToNotContainsVerify } };
//		String[] updatedSuggestedTags = "Con 1<break>con 2<break>con 3<break>con 4<break>con 5<break>con 6<break>con 7<break>con 8<break>con 9<break>con 10<break>con 11<break>con 12<break>con 13<break>con 14<break>con 15<break>con 16<break>con 17<break>con 18<break>con 19<break>con 20<break>con 21<break>con 22<break>con 23<break>con 24<break>con 25<break>con 26<break>con 27<break>con 28<break>con 29<break>con 30<break>con 31<break>con 32<break>con 33<break>con 34<break>con 35<break>con 36<break>con 37<break>con 38<break>con 39<break>con 40<break>con 41<break>con 42<break>con 43<break>con 44<break>con 45<break>con 46<break>Acc 1<break>Acc 2<break>Acc 3<break>Acc 4<break>Acc 5<break>Acc 6<break>Acc 7<break>Acc 8<break>Acc 9<break>Acc 10<break>Acc 11"
//				.split("<break>", -1);
//
//		String updatedRelatedToVerifyAfterUpdate = updatedRelatedToVerify + "<break>"
//				+ "Con 1<break>con 2<break>con 3<break>con 4<break>con 5<break>con 6<break>con 7<break>con 8<break>con 9<break>con 10<break>con 11<break>con 12<break>con 13<break>con 14<break>con 15<break>con 16<break>con 17<break>con 18<break>con 19<break>con 20<break>con 21<break>con 22<break>con 23<break>con 24<break>con 25<break>con 26<break>con 27<break>con 28<break>con 29<break>con 30<break>con 31<break>con 32<break>con 33<break>con 34<break>con 35<break>con 36<break>con 37<break>con 38<break>con 39<break>con 40<break>con 41<break>con 42<break>con 43<break>con 44<break>con 45<break>con 46<break>Acc 1<break>Acc 2<break>Acc 3<break>Acc 4<break>Acc 5<break>Acc 6<break>Acc 7<break>Acc 8<break>Acc 9<break>Acc 10<break>Acc 11";
//
//		String[][] task1BasicSectionVerificationAfterUpdate = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerifyAfterUpdate } };
//
//		String[][][] detailSectionVerifcation = { { { AMNNR_TaskLabel1, task1SubjectName } },
//				task1BasicSectionVerification, task1AdvancedSection };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, null, null,
					detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);
					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);
						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							ArrayList<String> verifyRelatedToNotTaggedNegativeResults = BP
									.verifyRelatedToNotTagged(relatedAssociationNotContains);
							if (verifyRelatedToNotTaggedNegativeResults.isEmpty()) {
								log(LogStatus.INFO, "RelatedTo Association Not Tagged has been verified in Note Popup",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
												+ verifyRelatedToNotTaggedNegativeResults,
										YesNo.No);
								sa.assertTrue(false,
										"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
												+ verifyRelatedToNotTaggedNegativeResults);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}
					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);
						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							if (BP.updateActivityTimelineRecord(projectName, null, null, null, updatedSuggestedTags,
									null, false, null, null, null, null, null, null)) {
								log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

							} else {
								log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
								sa.assertTrue(false, "Activity timeline record has not Updated");
							}
							CommonLib.refresh(driver);

							ArrayList<String> subjectLinkPopUpNegativeResult2 = BP.verifySubjectLinkPopUpOnIntraction(
									driver, task1SubjectName, task1BasicSectionVerificationAfterUpdate,
									task1AdvancedSection, IconType.Task, PageName.TaskPage);

							if (subjectLinkPopUpNegativeResult2.isEmpty()) {
								log(LogStatus.PASS,
										"------" + task1SubjectName
												+ " record is able to open popup after click on it and verify its data"
												+ "------",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"------" + task1SubjectName + " record link popup is not verified, Reason: "
												+ subjectLinkPopUpNegativeResult2 + "------",
										YesNo.Yes);
								sa.assertTrue(false,
										"------" + task1SubjectName + " record link popup is not verified, Reason: "
												+ subjectLinkPopUpNegativeResult2 + "------");

							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}
					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc071_VerifyWhenTaskIsCreatedWith1Deal1FundraisingAnd7ContactsAreTagged(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FirmLegalName13;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject106;
		String task1Notes = AMNNR_Notes106;
		String relatedTo = AMNNR_RelatedTo106;
		String priority = AMNNR_AdvancePriority106;
		String status = AMNNR_AdvanceStatus106;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);

		String task1NotesVerify = task1Notes.replace("@", "");
		String[] SuggestedTags = AMNNR_SuggestedTag106.split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification106 } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = null;

		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp106.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp107.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp108.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp109.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp110.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp111.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp112.split("<break>", -1) };

		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup106.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup107.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup108.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup109.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup110.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup111.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup112.split("<break>", -1) };

		String[][][] detailSectionVerifcation = { { { AMNNR_TaskLabel1, task1SubjectName } },
				task1BasicSectionVerification, task1AdvancedSection };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "THECARLYLEGROUP";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 6";
//		String task1Notes = "Had a good talk with smith1 smith2 smith3 smith4 smith5 about vitara deal and FCR 1";
//		String relatedTo = "Martha<break>Vertica<break>jenkins";
//		String priority = "High";
//		String status = "Not Started";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String[] SuggestedTags = "smith1<break>smith2<break>smith3<break>smith4<break>smith5<break>Vitara Deal<break>FCR 1"
//				.split("<break>", -1);
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "B" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = null;
//
//		String[][] addContactsToDealTeamPopUp = { "checked<break>smith1<break>Partner<break>Add".split("<break>", -1),
//				"checked<break>smith2<break>Vice President<break>Add".split("<break>", -1),
//				"checked<break>smith3<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>smith4<break>Accountant<break>Add".split("<break>", -1),
//				"checked<break>smith5<break>Attorney<break>Add".split("<break>", -1),
//				"checked<break>Martha<break>Banker<break>Add".split("<break>", -1),
//				"checked<break>jenkins<break>Consultant<break>Add".split("<break>", -1) };
//
//		String[][] addContactsToFundraisingObjectPopup = {
//				"checked<break>smith1<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>smith2<break>Business User<break>Add".split("<break>", -1),
//				"checked<break>smith3<break>Decision Maker<break>Add".split("<break>", -1),
//				"checked<break>smith4<break>Evaluator<break>Add".split("<break>", -1),
//				"checked<break>smith5<break>Executive Sponsor<break>Add".split("<break>", -1),
//				"checked<break>Martha<break>Gatekeeper<break>Add".split("<break>", -1),
//				"checked<break>jenkins<break>Other<break>Add".split("<break>", -1) };
//
//		String[][][] detailSectionVerifcation = { { { AMNNR_TaskLabel1, task1SubjectName } },
//				task1BasicSectionVerification, task1AdvancedSection };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		List<String> beforeCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
		List<String> beforeCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
				"Fundraising Contacts");

		log(LogStatus.INFO, "Before Deal Team Records: " + beforeCreateDealTeamList, YesNo.No);
		log(LogStatus.INFO, "Before Deal Team Records Size: " + beforeCreateDealTeamList.size(), YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records: " + beforeCreateFundraisingContactList, YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records Size: " + beforeCreateFundraisingContactList.size(),
				YesNo.No);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);
					List<String> afterCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
					List<String> afterCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
							"Fundraising Contacts");

					log(LogStatus.INFO, "After Deal Team Records: " + afterCreateDealTeamList, YesNo.No);
					log(LogStatus.INFO, "After Deal Team Records Size: " + afterCreateDealTeamList.size(), YesNo.No);
					log(LogStatus.INFO, "After Fundraising Contacts Records: " + afterCreateFundraisingContactList,
							YesNo.No);
					log(LogStatus.INFO,
							"After Fundraising Contacts Records Size: " + afterCreateFundraisingContactList.size(),
							YesNo.No);

					List<String> dealTeamDifference = CommonLib.getDifference(afterCreateDealTeamList,
							beforeCreateDealTeamList);
					List<String> fundraisingContactDifference = CommonLib
							.getDifference(afterCreateFundraisingContactList, beforeCreateFundraisingContactList);

					if (dealTeamDifference.size() == 7) {

						log(LogStatus.INFO, "Same no. of Deal Team Created and i.e. " + dealTeamDifference.size(),
								YesNo.No);
					} else {
						log(LogStatus.ERROR, "No. of Deal Team Created not matched, Expected size: "
								+ addContactsToDealTeamPopUp.length + " but Actual: " + dealTeamDifference.size(),
								YesNo.Yes);
						BaseLib.sa.assertTrue(false, "No. of Deal Team Created not matched, Expected size: "
								+ addContactsToDealTeamPopUp.length + " but Actual: " + dealTeamDifference.size());
					}

					if (fundraisingContactDifference.size() == 7) {

						log(LogStatus.INFO, "Same no. of Fundraising Contacts Created and i.e. "
								+ fundraisingContactDifference.size(), YesNo.No);
					} else {
						log(LogStatus.ERROR,
								"No. of Fundraising Contacts Created not matched, Expected size: "
										+ addContactsToFundraisingObjectPopup.length + " but Actual: "
										+ fundraisingContactDifference.size(),
								YesNo.Yes);
						BaseLib.sa.assertTrue(false,
								"No. of Fundraising Contacts Created not matched, Expected size: "
										+ addContactsToFundraisingObjectPopup.length + " but Actual: "
										+ fundraisingContactDifference.size());
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
//					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc072_VerifyWhenTaskIsCreatedWith3Deal4FundraisingAnd10ContactsAreTagged(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FirmLegalName13;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject113;
		String task1Notes = AMNNR_Notes113;
		String relatedTo = AMNNR_RelatedTo113;
		String priority = AMNNR_AdvancePriority113;
		String status = AMNNR_AdvanceStatus113;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);

		String task1NotesVerify = task1Notes.replace("@", "");
		String[] SuggestedTags = AMNNR_SuggestedTag113.split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification113 } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp113.split("<break>") };

		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp113.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp114.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp115.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp116.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp117.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp118.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp119.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp120.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp121.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp122.split("<break>", -1) };

		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup113.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup114.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup115.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup116.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup117.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup118.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup119.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup120.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup121.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup122.split("<break>", -1) };

		String[][][] detailSectionVerifcation = null;

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = AMNNR_FirmLegalName13;
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 7";
//		String task1Notes = "";
//		String relatedTo = "Martha<break>Vertica<break>jenkins<break>smith1<break>smith2<break>smith3<break>smith4<break>smith5<break>smith8<break>smith9<break>smith10<break>Vitara Deal<break>Breeza Deal<break>Conved Deal<break>FCR 1<break>FCR 2<break>FCR 3<break>FCR 4";
//		String priority = "High";
//		String status = "Completed";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "A" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//
//		String[][] addContactsToDealTeamPopUp = { "checked<break>smith1<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>smith2<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>smith3<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>smith4<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>smith5<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>smith8<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>smith9<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>smith10<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>Martha<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>jenkins<break>Analyst<break>Add".split("<break>", -1) };
//
//		String[][] addContactsToFundraisingObjectPopup = {
//				"checked<break>smith1<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>smith2<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>smith3<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>smith4<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>smith5<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>smith8<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>smith9<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>smith10<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>Martha<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>jenkins<break>Advisor<break>Add".split("<break>", -1) };
//
//		String[][][] detailSectionVerifcation = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		List<String> beforeCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
		List<String> beforeCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
				"Fundraising Contacts");

		log(LogStatus.INFO, "Before Deal Team Records: " + beforeCreateDealTeamList, YesNo.No);
		log(LogStatus.INFO, "Before Deal Team Records Size: " + beforeCreateDealTeamList.size(), YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records: " + beforeCreateFundraisingContactList, YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records Size: " + beforeCreateFundraisingContactList.size(),
				YesNo.No);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);
					List<String> afterCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
					List<String> afterCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
							"Fundraising Contacts");

					log(LogStatus.INFO, "After Deal Team Records: " + afterCreateDealTeamList, YesNo.No);
					log(LogStatus.INFO, "After Deal Team Records Size: " + afterCreateDealTeamList.size(), YesNo.No);
					log(LogStatus.INFO, "After Fundraising Contacts Records: " + afterCreateFundraisingContactList,
							YesNo.No);
					log(LogStatus.INFO,
							"After Fundraising Contacts Records Size: " + afterCreateFundraisingContactList.size(),
							YesNo.No);

					List<String> dealTeamDifference = CommonLib.getDifference(afterCreateDealTeamList,
							beforeCreateDealTeamList);
					List<String> fundraisingContactDifference = CommonLib
							.getDifference(afterCreateFundraisingContactList, beforeCreateFundraisingContactList);

					if (dealTeamDifference.size() == 30) {

						log(LogStatus.INFO, "Same no. of Deal Team Created and i.e. " + dealTeamDifference.size(),
								YesNo.No);
					} else {
						log(LogStatus.ERROR, "No. of Deal Team Created not matched, Expected size: " + 30
								+ " but Actual: " + dealTeamDifference.size(), YesNo.Yes);
						BaseLib.sa.assertTrue(false, "No. of Deal Team Created not matched, Expected size: " + 30
								+ " but Actual: " + dealTeamDifference.size());
					}

					if (fundraisingContactDifference.size() == 40) {

						log(LogStatus.INFO, "Same no. of Fundraising Contacts Created and i.e. "
								+ fundraisingContactDifference.size(), YesNo.No);
					} else {
						log(LogStatus.ERROR, "No. of Fundraising Contacts Created not matched, Expected size: " + 40
								+ " but Actual: " + fundraisingContactDifference.size(), YesNo.Yes);
						BaseLib.sa.assertTrue(false, "No. of Fundraising Contacts Created not matched, Expected size: "
								+ 40 + " but Actual: " + fundraisingContactDifference.size());
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
//					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc073_VerifyAddContactsToDealTeamAndAddToFundraisingContactsPopUpWhenAddingAlreadyAddedContactToDealTeamAndFundraisingContacts(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1SubjectName = AMNNR_Subject113;

		String[] SuggestedTags = AMNNR_SuggestedTag123.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp123.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp123.split("<break>") };
		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup123.split("<break>") };

		String[][] task1BasicSection = null;

		String[][] task1AdvancedSection = null;

		String[][][] detailSectionVerifcation = null;

//		String task1SubjectName = "Task 7";
//
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = { "addContactsToDealTeamPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToFundraisingObjectPopup = {
//				"addContactsToFundraisingPopUpShouldNotThere".split("<break>") };
//
//		String[][] task1BasicSection = null;
//
//		String[][] task1AdvancedSection = null;
//
//		String[][][] detailSectionVerifcation = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);
		lp.clickOnTab(projectName, TabName.HomeTab);
		if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

			log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
					YesNo.No);

			if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
					"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
				log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
				if (BP.updateActivityTimelineRecord(projectName, task1BasicSection, task1AdvancedSection, null,
						SuggestedTags, null, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
						addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
					log(LogStatus.PASS,
							"-----Activity timeline record has been updated for Subject: " + task1SubjectName + "-----",
							YesNo.No);

				} else {
					log(LogStatus.FAIL,
							"-----Activity timeline record is not updated for Subject: " + task1SubjectName + "-----",
							YesNo.No);
					sa.assertTrue(false,
							"-----Activity timeline record is not updated for Subject: " + task1SubjectName + "-----");
				}

			} else {
				log(LogStatus.ERROR,
						"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName,
						YesNo.No);
				sa.assertTrue(false,
						"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName);
			}

//			driver.close();
//			driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

		} else {

			log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----", YesNo.Yes);
			BaseLib.sa.assertTrue(false, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc074_VerifyWhenTaskIsCreatedWithDealsAndFundraisingTaggedAndNoContactsAreTaggedContactsTaggedWhileUpdatingTheTask(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_DealName2;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject124;
		String task1Notes = AMNNR_Notes124;
		String relatedTo = AMNNR_RelatedTo124;
		String priority = AMNNR_AdvancePriority124;
		String status = AMNNR_AdvanceStatus124;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification124 } };

		String updatedRelatedTo = AMNNR_RelatedTo125;

		String[] SuggestedTags = AMNNR_SuggestedTag124.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp124.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp124.split("<break>") };
		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup124.split("<break>") };

		String[][] updateTask1BasicSection = { { AMNNR_TaskLabel3, updatedRelatedTo } };

		String[][] updateTask1AdvancedSection = null;

		String[][][] detailSectionVerifcation = null;

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "Vitara Deal";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 8";
//		String task1Notes = "";
//		String relatedTo = "Vertica<break>Ispro Deal<break>FCR 5";
//		String priority = "High";
//		String status = "Completed";
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "A" } };
//
//		String updatedRelatedTo = "smith11<break>smith12";
//
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = { "addContactsToDealTeamPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToFundraisingObjectPopup = {
//				"addContactsToFundraisingPopUpShouldNotThere".split("<break>") };
//
//		String[][] updateTask1BasicSection = { { AMNNR_TaskLabel3, updatedRelatedTo } };
//
//		String[][] updateTask1AdvancedSection = null;
//
//		String[][][] detailSectionVerifcation = null;
//		

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, "Deals", recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);

				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
							"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
						if (BP.updateActivityTimelineRecord(projectName, updateTask1BasicSection,
								updateTask1AdvancedSection, null, SuggestedTags, null, false, null, null,
								createNewRecordPopUp, addContactsToDealTeamPopUp, addContactsToFundraisingObjectPopup,
								detailSectionVerifcation)) {
							log(LogStatus.PASS, "-----Activity timeline record has been updated for Subject: "
									+ task1SubjectName + "-----", YesNo.No);

						} else {
							log(LogStatus.FAIL, "-----Activity timeline record is not updated for Subject: "
									+ task1SubjectName + "-----", YesNo.No);
							sa.assertTrue(false, "-----Activity timeline record is not updated for Subject: "
									+ task1SubjectName + "-----");
						}

					} else {
						log(LogStatus.ERROR,
								"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName,
								YesNo.No);
						sa.assertTrue(false,
								"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}
			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc075_VerifyWhenTaskIsCreatedWithDealsAndFundraisingTaggedAndClickedOnCancelForAddContactsToDealTeamAndAddToFundraisingContactsPopUp(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_DealName2;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("4"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject126;
		String task1Notes = AMNNR_Notes126;
		String relatedTo = AMNNR_RelatedTo126;
		String priority = AMNNR_AdvancePriority126;
		String status = AMNNR_AdvanceStatus126;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification126 } };

		String[] SuggestedTags = AMNNR_SuggestedTag126.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp126.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp126.split("<break>", -1) };

		String[][] addContactsToFundraisingObjectPopup = {
				AMNNR_AddContactsToFundraisingPopup126.split("<break>", -1) };

		String[][][] detailSectionVerifcation = null;

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "Vitara Deal";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("4"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 9";
//		String task1Notes = "";
//		String relatedTo = "Vertica<break>Ispro Deal<break>FCR 4<break>smith15";
//		String priority = "Normal";
//		String status = "Not Started";
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "A" } };
//
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = {
//				"checked<break>smith15<break>Partner<break>Cancel".split("<break>", -1) };
//
//		String[][] addContactsToFundraisingObjectPopup = {
//				"checked<break>smith15<break>Advisor<break>Cancel".split("<break>", -1) };
//
//		String[][][] detailSectionVerifcation = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		List<String> beforeCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
		List<String> beforeCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
				"Fundraising Contacts");

		log(LogStatus.INFO, "Before Deal Team Records: " + beforeCreateDealTeamList, YesNo.No);
		log(LogStatus.INFO, "Before Deal Team Records Size: " + beforeCreateDealTeamList.size(), YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records: " + beforeCreateFundraisingContactList, YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records Size: " + beforeCreateFundraisingContactList.size(),
				YesNo.No);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, "Deals", recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);

				List<String> afterCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
				List<String> afterCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
						"Fundraising Contacts");

				log(LogStatus.INFO, "After Deal Team Records: " + afterCreateDealTeamList, YesNo.No);
				log(LogStatus.INFO, "After Deal Team Records Size: " + afterCreateDealTeamList.size(), YesNo.No);
				log(LogStatus.INFO, "After Fundraising Contacts Records: " + afterCreateFundraisingContactList,
						YesNo.No);
				log(LogStatus.INFO,
						"After Fundraising Contacts Records Size: " + afterCreateFundraisingContactList.size(),
						YesNo.No);

				List<String> dealTeamDifference = CommonLib.getDifference(afterCreateDealTeamList,
						beforeCreateDealTeamList);
				List<String> fundraisingContactDifference = CommonLib.getDifference(afterCreateFundraisingContactList,
						beforeCreateFundraisingContactList);

				if (dealTeamDifference.size() == 0) {

					log(LogStatus.INFO, "Same no. of Deal Team Created and i.e. " + dealTeamDifference.size(),
							YesNo.No);
				} else {
					log(LogStatus.ERROR, "No. of Deal Team Created not matched, Expected size: " + 0 + " but Actual: "
							+ dealTeamDifference.size(), YesNo.Yes);
					BaseLib.sa.assertTrue(false, "No. of Deal Team Created not matched, Expected size: " + 0
							+ " but Actual: " + dealTeamDifference.size());
				}

				if (fundraisingContactDifference.size() == 0) {

					log(LogStatus.INFO,
							"Same no. of Fundraising Contacts Created and i.e. " + fundraisingContactDifference.size(),
							YesNo.No);
				} else {
					log(LogStatus.ERROR, "No. of Fundraising Contacts Created not matched, Expected size: " + 0
							+ " but Actual: " + fundraisingContactDifference.size(), YesNo.Yes);
					BaseLib.sa.assertTrue(false, "No. of Fundraising Contacts Created not matched, Expected size: " + 0
							+ " but Actual: " + fundraisingContactDifference.size());
				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc076_VerifyAddContactsToDealTeamAndAddToFundraisingContactsPopUpWhenSameTaskIsEditedAndNewDealIsTaggedAndClickedOnSave(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1SubjectName = AMNNR_Subject126;

		String[] SuggestedTags = AMNNR_SuggestedTag127.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp127.split("<break>") };
		String[][] addContactsToDealTeamPopUp1 = { AMNNR_AddContactsToDealTeamPopUp127.split("<break>", -1) };

		String[][] addContactsToFundraisingObjectPopup1 = null;

		String[][] addContactsToDealTeamPopUp2 = null;

		String[][] addContactsToFundraisingObjectPopup2 = {
				AMNNR_AddContactsToFundraisingPopup127.split("<break>", -1) };

		String[][][] detailSectionVerifcation = null;

		String updatedRelatedTo1 = AMNNR_RelatedTo127;
		String[][] updateTask1BasicSection1 = { { AMNNR_TaskLabel3, updatedRelatedTo1 } };

		String updatedRelatedTo2 = AMNNR_RelatedTo128;
		String[][] updateTask1BasicSection2 = { { AMNNR_TaskLabel3, updatedRelatedTo2 } };

		String[][] updateTask1AdvancedSection = null;

//		String task1SubjectName = "Task 9";
//
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp1 = {
//				"checked<break>smith15<break>Analyst<break>Add".split("<break>", -1) };
//
//		String[][] addContactsToFundraisingObjectPopup1 = null;
//
//		String[][] addContactsToDealTeamPopUp2 = null;
//
//		String[][] addContactsToFundraisingObjectPopup2 = {
//				"checked<break>smith15<break>Advisor<break>Add".split("<break>", -1) };
//
//		String[][][] detailSectionVerifcation = null;
//
//		String updatedRelatedTo1 = "Breeza Deal";
//		String[][] updateTask1BasicSection1 = { { AMNNR_TaskLabel3, updatedRelatedTo1 } };
//
//		String updatedRelatedTo2 = "FCR 1";
//		String[][] updateTask1BasicSection2 = { { AMNNR_TaskLabel3, updatedRelatedTo2 } };
//
//		String[][] updateTask1AdvancedSection = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		List<String> beforeCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
		List<String> beforeCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
				"Fundraising Contacts");

		log(LogStatus.INFO, "Before Deal Team Records: " + beforeCreateDealTeamList, YesNo.No);
		log(LogStatus.INFO, "Before Deal Team Records Size: " + beforeCreateDealTeamList.size(), YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records: " + beforeCreateFundraisingContactList, YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records Size: " + beforeCreateFundraisingContactList.size(),
				YesNo.No);

		CommonLib.refresh(driver);
		lp.clickOnTab(projectName, TabName.HomeTab);
		if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

			log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
					YesNo.No);

			if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
					"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
				log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
				if (BP.updateActivityTimelineRecord(projectName, updateTask1BasicSection1, updateTask1AdvancedSection,
						null, SuggestedTags, null, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp1,
						addContactsToFundraisingObjectPopup1, detailSectionVerifcation)) {
					log(LogStatus.PASS,
							"-----Activity timeline record has been updated for Subject: " + task1SubjectName + "-----",
							YesNo.No);
					List<String> afterCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");

					log(LogStatus.INFO, "After Deal Team Records: " + afterCreateDealTeamList, YesNo.No);
					log(LogStatus.INFO, "After Deal Team Records Size: " + afterCreateDealTeamList.size(), YesNo.No);

					List<String> dealTeamDifference = CommonLib.getDifference(afterCreateDealTeamList,
							beforeCreateDealTeamList);
					if (dealTeamDifference.size() == 1) {

						log(LogStatus.INFO, "Same no. of Deal Team Created and i.e. " + dealTeamDifference.size(),
								YesNo.No);
					} else {
						log(LogStatus.ERROR, "No. of Deal Team Created not matched, Expected size: " + 1
								+ " but Actual: " + dealTeamDifference.size(), YesNo.Yes);
						BaseLib.sa.assertTrue(false, "No. of Deal Team Created not matched, Expected size: " + 1
								+ " but Actual: " + dealTeamDifference.size());
					}

				} else {
					log(LogStatus.FAIL,
							"-----Activity timeline record is not updated for Subject: " + task1SubjectName + "-----",
							YesNo.No);
					sa.assertTrue(false,
							"-----Activity timeline record is not updated for Subject: " + task1SubjectName + "-----");
				}

			} else {
				log(LogStatus.ERROR,
						"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName,
						YesNo.No);
				sa.assertTrue(false,
						"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName);
			}

//			driver.close();
//			driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

		} else {

			log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----", YesNo.Yes);
			BaseLib.sa.assertTrue(false, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

		}

		CommonLib.refresh(driver);
		lp.clickOnTab(projectName, TabName.HomeTab);
		if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

			log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
					YesNo.No);

			if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
					"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
				log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
				if (BP.updateActivityTimelineRecord(projectName, updateTask1BasicSection2, updateTask1AdvancedSection,
						null, SuggestedTags, null, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp2,
						addContactsToFundraisingObjectPopup2, detailSectionVerifcation)) {
					log(LogStatus.PASS,
							"-----Activity timeline record has been updated for Subject: " + task1SubjectName + "-----",
							YesNo.No);
					List<String> afterCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
							"Fundraising Contacts");

					log(LogStatus.INFO, "After Fundraising Contacts Records: " + afterCreateFundraisingContactList,
							YesNo.No);
					log(LogStatus.INFO,
							"After Fundraising Contacts Records Size: " + afterCreateFundraisingContactList.size(),
							YesNo.No);

					List<String> fundraisingContactDifference = CommonLib
							.getDifference(afterCreateFundraisingContactList, beforeCreateFundraisingContactList);

					if (fundraisingContactDifference.size() == 1) {

						log(LogStatus.INFO, "Same no. of Fundraising Contacts Created and i.e. "
								+ fundraisingContactDifference.size(), YesNo.No);
					} else {
						log(LogStatus.ERROR, "No. of Fundraising Contacts Created not matched, Expected size: " + 1
								+ " but Actual: " + fundraisingContactDifference.size(), YesNo.Yes);
						BaseLib.sa.assertTrue(false, "No. of Fundraising Contacts Created not matched, Expected size: "
								+ 1 + " but Actual: " + fundraisingContactDifference.size());
					}

				} else {
					log(LogStatus.FAIL,
							"-----Activity timeline record is not updated for Subject: " + task1SubjectName + "-----",
							YesNo.No);
					sa.assertTrue(false,
							"-----Activity timeline record is not updated for Subject: " + task1SubjectName + "-----");
				}

			} else {
				log(LogStatus.ERROR,
						"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName,
						YesNo.No);
				sa.assertTrue(false,
						"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName);
			}

//			driver.close();
//			driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

		} else {

			log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----", YesNo.Yes);
			BaseLib.sa.assertTrue(false, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc077_VerifyWhenTheTaggedDealAndFundraisingIsRemovedCheckTheImpactOnDealTeamAndFundraisingContactPage(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1SubjectName = AMNNR_Subject126;

		String[] SuggestedTags = AMNNR_SuggestedTag129.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp129.split("<break>") };
		String[][] addContactsToDealTeamPopUp1 = null;

		String[][] addContactsToFundraisingObjectPopup1 = null;

		String[][][] detailSectionVerifcation = null;

		String updatedRelatedTo1 = AMNNR_RelatedTo129;
		String[][] updateTask1BasicSection1 = { { AMNNR_TaskLabel3, updatedRelatedTo1 } };

		String[][] updateTask1AdvancedSection = null;
		String[] updatedRemoveRelatedAssociation = AMNNR_RelatedTo130.split("<break>", -1);

//		String task1SubjectName = "Task 9";
//
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp1 = null;
//
//		String[][] addContactsToFundraisingObjectPopup1 = null;
//
//		String[][][] detailSectionVerifcation = null;
//
//		String updatedRelatedTo1 = "smith16";
//		String[][] updateTask1BasicSection1 = { { AMNNR_TaskLabel3, updatedRelatedTo1 } };
//
//		String[][] updateTask1AdvancedSection = null;
//		String[] updatedRemoveRelatedAssociation = "Breeza Deal<break>FCR 1".split("<break>", -1);
//		

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		List<String> beforeCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
		List<String> beforeCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
				"Fundraising Contacts");

		log(LogStatus.INFO, "Before Deal Team Records: " + beforeCreateDealTeamList, YesNo.No);
		log(LogStatus.INFO, "Before Deal Team Records Size: " + beforeCreateDealTeamList.size(), YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records: " + beforeCreateFundraisingContactList, YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records Size: " + beforeCreateFundraisingContactList.size(),
				YesNo.No);

		CommonLib.refresh(driver);
		lp.clickOnTab(projectName, TabName.HomeTab);
		if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

			log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
					YesNo.No);

			if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
					"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
				log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
				if (BP.updateActivityTimelineRecord(projectName, updateTask1BasicSection1, updateTask1AdvancedSection,
						null, SuggestedTags, updatedRemoveRelatedAssociation, false, null, null, createNewRecordPopUp,
						addContactsToDealTeamPopUp1, addContactsToFundraisingObjectPopup1, detailSectionVerifcation)) {
					log(LogStatus.PASS,
							"-----Activity timeline record has been updated for Subject: " + task1SubjectName + "-----",
							YesNo.No);
					List<String> afterCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
					List<String> afterCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
							"Fundraising Contacts");

					log(LogStatus.INFO, "After Deal Team Records: " + afterCreateDealTeamList, YesNo.No);
					log(LogStatus.INFO, "After Deal Team Records Size: " + afterCreateDealTeamList.size(), YesNo.No);
					log(LogStatus.INFO, "After Fundraising Contacts Records: " + afterCreateFundraisingContactList,
							YesNo.No);
					log(LogStatus.INFO,
							"After Fundraising Contacts Records Size: " + afterCreateFundraisingContactList.size(),
							YesNo.No);

					List<String> dealTeamDifference = CommonLib.getDifference(afterCreateDealTeamList,
							beforeCreateDealTeamList);

					List<String> fundraisingContactDifference = CommonLib
							.getDifference(afterCreateFundraisingContactList, beforeCreateFundraisingContactList);

					if (dealTeamDifference.size() == 0) {

						log(LogStatus.INFO, "Same no. of Deal Team Created and i.e. " + dealTeamDifference.size(),
								YesNo.No);
					} else {
						log(LogStatus.ERROR, "No. of Deal Team Created not matched, Expected size: " + 0
								+ " but Actual: " + dealTeamDifference.size(), YesNo.Yes);
						BaseLib.sa.assertTrue(false, "No. of Deal Team Created not matched, Expected size: " + 0
								+ " but Actual: " + dealTeamDifference.size());
					}

					if (fundraisingContactDifference.size() == 0) {

						log(LogStatus.INFO, "Same no. of Fundraising Contacts Created and i.e. "
								+ fundraisingContactDifference.size(), YesNo.No);
					} else {
						log(LogStatus.ERROR, "No. of Fundraising Contacts Created not matched, Expected size: " + 0
								+ " but Actual: " + fundraisingContactDifference.size(), YesNo.Yes);
						BaseLib.sa.assertTrue(false, "No. of Fundraising Contacts Created not matched, Expected size: "
								+ 0 + " but Actual: " + fundraisingContactDifference.size());
					}

				} else {
					log(LogStatus.FAIL,
							"-----Activity timeline record is not updated for Subject: " + task1SubjectName + "-----",
							YesNo.No);
					sa.assertTrue(false,
							"-----Activity timeline record is not updated for Subject: " + task1SubjectName + "-----");
				}

			} else {
				log(LogStatus.ERROR,
						"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName,
						YesNo.No);
				sa.assertTrue(false,
						"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName);
			}

//			driver.close();
//			driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

		} else {

			log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----", YesNo.Yes);
			BaseLib.sa.assertTrue(false, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc078_VerifyWhenUserDoesNotSelectAnyContactAndClicksOnAddButtonFromAddContactsToDealTeamAndAddToFundraisingContactsPopUp(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FundraisingNames2;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject131;
		String task1Notes = AMNNR_Notes131;
		String relatedTo = AMNNR_RelatedTo131;
		String priority = AMNNR_AdvancePriority131;
		String status = AMNNR_AdvanceStatus131;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification131 } };

		String[] SuggestedTags = AMNNR_SuggestedTag131.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp131.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp131.split("<break>", -1) };

		String[][] addContactsToFundraisingObjectPopup = {
				AMNNR_AddContactsToFundraisingPopup131.split("<break>", -1) };

		String[][][] detailSectionVerifcation = null;

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "FCR 1";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 11";
//		String task1Notes = "Had a good talk with smith1 smith2 vitara deal and FCR 1";
//		String relatedTo = "Martha<break>Vertica<break>jenkins";
//		String priority = "High";
//		String status = "Not Started";
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "B" } };
//
//		String[] SuggestedTags = "Vitara Deal<break>FCR 2".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = {
//				"<break>Martha<break><break>Add<Select atleast a record>".split("<break>", -1) };
//
//		String[][] addContactsToFundraisingObjectPopup = {
//				"<break>Martha<break><break>Add<Select atleast a record>".split("<break>", -1) };
//
//		String[][][] detailSectionVerifcation = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, "Fundraisings", recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc079_VerifyWhenATaskIsCreatedWithTheContactsTaggedWhichIsAlreadyADealContactAndAFundraisingContactAndItsImpactOnRespectiveDealAndFundraisingWhenTheDealAndFundraisingAreActive(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FundNames2;
		String dealRecordName = AMNNR_DealName2;
		String fundraisingRecordName = AMNNR_FundraisingNames2;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("10"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject132;
		String task1Notes = AMNNR_Notes132;
		String relatedTo = AMNNR_RelatedTo132;
		String priority = AMNNR_AdvancePriority132;
		String status = AMNNR_AdvanceStatus132;
		String task1NotesVerify = task1Notes.replace("@", "");
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + AMNNR_RelatedTo133;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification132 } };

		String[] SuggestedTags = AMNNR_SuggestedTag132.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp132.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp132.split("<break>") };
		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup132.split("<break>") };

		String[][][] detailSectionVerifcation = null;

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "Mutual Fund";
//		String dealRecordName = "Vitara Deal";
//		String fundraisingRecordName = "FCR 1";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("10"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 10";
//		String task1Notes = "Jenkins and Martha ";
//		String relatedTo = "Martha<break>Vertica<break>jenkins";
//		String priority = "High";
//		String status = "Not Started";
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>"
//				+ "Vitara Deal<break>Breeza Deal<break>Conved Deal<break>FCR 1<break>FCR 2<break>FCR 3<break>FCR 4";
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "C" } };
//
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = { "addContactsToDealTeamPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToFundraisingObjectPopup = {
//				"addContactsToFundraisingPopUpShouldNotThere".split("<break>") };
//
//		String[][][] detailSectionVerifcation = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, "Funds", recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
							if (BP.updateActivityTimelineRecord(projectName, null, null, null, SuggestedTags, null,
									false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
									addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
								log(LogStatus.PASS, "-----Activity timeline record has been updated for Subject: "
										+ task1SubjectName + "-----", YesNo.No);

							} else {
								log(LogStatus.FAIL, "-----Activity timeline record is not updated for Subject: "
										+ task1SubjectName + "-----", YesNo.No);
								sa.assertTrue(false, "-----Activity timeline record is not updated for Subject: "
										+ task1SubjectName + "-----");
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					if (BP.navigateToRecordAndClickOnSubTab(projectName, "Deals", dealRecordName, null)) {
						log(LogStatus.INFO, "Able to Open the Record: " + dealRecordName, YesNo.No);

						ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(getAdvanceDueDate,
								IconType.Task, task1SubjectName, task1NotesVerify, true, false, null, null);
						if (updatedresult.isEmpty()) {
							log(LogStatus.PASS, "------" + task1SubjectName
									+ " record has been verified on intraction of Record: " + dealRecordName + "------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + task1SubjectName + " record is not verified on intraction of Record: "
											+ dealRecordName + ", Reason: " + updatedresult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + task1SubjectName + " record is not verified on intraction of Record: "
											+ dealRecordName + ", Reason: " + updatedresult + "------");
						}
					} else

					{
						log(LogStatus.ERROR, "Not able to Open the Record: " + dealRecordName, YesNo.No);
						sa.assertTrue(false, "Not able to Open the Record: " + dealRecordName);
					}

					if (BP.navigateToRecordAndClickOnSubTab(projectName, "Fundraisings", fundraisingRecordName, null)) {
						log(LogStatus.INFO, "Able to Open the Record: " + fundraisingRecordName, YesNo.No);

						ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(getAdvanceDueDate,
								IconType.Task, task1SubjectName, task1NotesVerify, true, false, null, null);
						if (updatedresult.isEmpty()) {
							log(LogStatus.PASS,
									"------" + task1SubjectName + " record has been verified on intraction of Record: "
											+ fundraisingRecordName + "------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + task1SubjectName + " record is not verified on intraction of Record: "
											+ fundraisingRecordName + ", Reason: " + updatedresult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + task1SubjectName + " record is not verified on intraction of Record: "
											+ fundraisingRecordName + ", Reason: " + updatedresult + "------");
						}
					} else

					{
						log(LogStatus.ERROR, "Not able to Open the Record: " + fundraisingRecordName, YesNo.No);
						sa.assertTrue(false, "Not able to Open the Record: " + fundraisingRecordName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
//					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----",
						YesNo.No);
				sa.assertTrue(false,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc080_VerifyWhenATaskIsCreatedWithTheContactsTaggedWhichIsAlreadyADealContactAndAFundraisingContactAndItsImpactOnRespectiveDealAndFundraisingWhenTheDealAndFundraisingAreInActive(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FundNames2;
		String dealRecordName = AMNNR_DealName3;
		String fundraisingRecordName = AMNNR_FundraisingNames3;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("10"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject134;
		String task1Notes = AMNNR_Notes134;
		String relatedTo = AMNNR_RelatedTo134;
		String priority = AMNNR_AdvancePriority134;
		String status = AMNNR_AdvanceStatus134;
		String task1NotesVerify = task1Notes.replace("@", "");
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + AMNNR_RelatedTo135;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification134 } };

		String[] SuggestedTags = AMNNR_SuggestedTag134.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp134.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp134.split("<break>") };
		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup134.split("<break>") };
		String updatedRelatedToNotContainsVerify = AMNNR_RelatedTo136;
		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, updatedRelatedToNotContainsVerify } };

		String[][][] detailSectionVerifcation = null;

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "Mutual Fund";
//		String dealRecordName = "Ispro Deal";
//		String fundraisingRecordName = "FCR 5";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("10"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 12";
//		String task1Notes = "smith11 smith12 smith15";
//		String relatedTo = "smith11<break>smith12<break>smith15";
//		String priority = "High";
//		String status = "Not Started";
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + "Breeza Deal<break>FCR 1";
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "A" } };
//
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = { "addContactsToDealTeamPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToFundraisingObjectPopup = {
//				"addContactsToFundraisingPopUpShouldNotThere".split("<break>") };
//		String updatedRelatedToNotContainsVerify = "Ispro Deal<break>FCR 5";
//		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, updatedRelatedToNotContainsVerify } };
//
//		String[][][] detailSectionVerifcation = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, "Funds", recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
							if (BP.updateActivityTimelineRecord(projectName, null, null, null, SuggestedTags, null,
									false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
									addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
								log(LogStatus.PASS, "-----Activity timeline record has been updated for Subject: "
										+ task1SubjectName + "-----", YesNo.No);

							} else {
								log(LogStatus.FAIL, "-----Activity timeline record is not updated for Subject: "
										+ task1SubjectName + "-----", YesNo.No);
								sa.assertTrue(false, "-----Activity timeline record is not updated for Subject: "
										+ task1SubjectName + "-----");
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							ArrayList<String> verifyRelatedToNotTaggedNegativeResults = BP
									.verifyRelatedToNotTagged(relatedAssociationNotContains);
							if (verifyRelatedToNotTaggedNegativeResults.isEmpty()) {
								log(LogStatus.INFO, "RelatedTo Association Not Tagged has been verified in Note Popup",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
												+ verifyRelatedToNotTaggedNegativeResults,
										YesNo.No);
								sa.assertTrue(false,
										"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
												+ verifyRelatedToNotTaggedNegativeResults);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subjec Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subjec Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					if (BP.navigateToRecordAndClickOnSubTab(projectName, "Deals", dealRecordName, null)) {
						log(LogStatus.INFO, "Able to Open the Record: " + dealRecordName, YesNo.No);

						if (BP.taskSubjectOfInteractionCard(task1SubjectName, 6) == null) {
							log(LogStatus.PASS,
									"------" + task1SubjectName + " record has not been there on intraction of Record: "
											+ dealRecordName + "------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR, "------" + task1SubjectName
									+ " record is there on intraction of Record: " + dealRecordName + "------",
									YesNo.No);
							sa.assertTrue(false, "------" + task1SubjectName
									+ " record is there on intraction of Record: " + dealRecordName + "------");
						}
					} else

					{
						log(LogStatus.ERROR, "Not able to Open the Record: " + dealRecordName, YesNo.No);
						sa.assertTrue(false, "Not able to Open the Record: " + dealRecordName);
					}

					if (BP.navigateToRecordAndClickOnSubTab(projectName, "Fundraisings", fundraisingRecordName, null)) {
						log(LogStatus.INFO, "Able to Open the Record: " + fundraisingRecordName, YesNo.No);

						if (BP.taskSubjectOfInteractionCard(task1SubjectName, 6) == null) {
							log(LogStatus.PASS,
									"------" + task1SubjectName + " record has not been there on intraction of Record: "
											+ fundraisingRecordName + "------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR, "------" + task1SubjectName
									+ " record is there on intraction of Record: " + fundraisingRecordName + "------",
									YesNo.No);
							sa.assertTrue(false, "------" + task1SubjectName
									+ " record is there on intraction of Record: " + fundraisingRecordName + "------");
						}
					} else

					{
						log(LogStatus.ERROR, "Not able to Open the Record: " + fundraisingRecordName, YesNo.No);
						sa.assertTrue(false, "Not able to Open the Record: " + fundraisingRecordName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
//					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----",
						YesNo.No);
				sa.assertTrue(false,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc081_VerifyWhenUsersAreTaggedUsingAtTheRateTaggingWithoutUsingTaggingAndFromTaggedButton(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_Contact8;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("2"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject137;
		String task1Notes = AMNNR_Notes137 + "@" + (crmUser2FirstName + " " + crmUser2LastName);

		String priority = AMNNR_AdvancePriority137;
		String status = AMNNR_AdvanceStatus137;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification137 } };

		String[] SuggestedTags = null;
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp137.split("<break>") };
		String[][] addContactsToDealTeamPopUp = null;
		String[][] addContactsToFundraisingObjectPopup = null;

		String[][][] detailSectionVerifcation = null;

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "Con 1";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("2"));
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 13";
//		String task1Notes = "<suggestionShouldNotThere><Section>" + "@" + (crmUser2FirstName + " " + crmUser2LastName);
//
//		String priority = "High";
//		String status = "Not Started";
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "B" } };
//
//		String[] SuggestedTags = null;
//		String[][] createNewRecordPopUp = { "Ignore".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = null;
//		String[][] addContactsToFundraisingObjectPopup = null;
//
//		String[][][] detailSectionVerifcation = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj2, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

			} else {
				log(LogStatus.FAIL,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----",
						YesNo.No);
				sa.assertTrue(false,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc082_VerifyWhenATaskIsCreatedByTaggingThemeFirmDealFundraisingFund(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FundNames3;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("2"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject138;
		String task1Notes = AMNNR_Notes138;
		String relatedTo = AMNNR_RelatedTo138;
		String priority = AMNNR_AdvancePriority138;
		String status = AMNNR_AdvanceStatus138;
		String task1NotesVerify = task1Notes.replace("@", "");
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + AMNNR_RelatedTo139;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification138 } };

		String[] SuggestedTags = AMNNR_SuggestedTag138.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp138.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp138.split("<break>") };
		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup138.split("<break>") };

		String[][][] detailSectionVerifcation = null;

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "Vertix Fund";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("2"));
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 13A";
//		String task1Notes = "Mutual Fund , Ispro Deal , Litz , Maxtra , FCR 3 , Theme A , Theme B , Theme C";
//		String relatedTo = "smith11<break>smith12<break>smith15";
//		String priority = "High";
//		String status = "Not Started";
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>"
//				+ "Mutual Fund<break>Ispro Deal<break>Litz<break>Maxtra<break>FCR 3<break>Theme A<break>Theme B<break>Theme C";
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "B" } };
//
//		String[] SuggestedTags = "Mutual Fund<break>Ispro Deal<break>Litz<break>Maxtra<break>FCR 3<break>Theme A<break>Theme B<break>Theme C"
//				.split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = { "<break>smith11<break><break>Cancel".split("<break>") };
//		String[][] addContactsToFundraisingObjectPopup = { "<break>smith11<break><break>Cancel".split("<break>") };
//
//		String[][][] detailSectionVerifcation = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, "Funds", recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					CommonLib.refresh(driver);

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
//					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----",
						YesNo.No);
				sa.assertTrue(false,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc083_VerifyWhenMultipleFollowUpTaskIsCreatedUnderTheParentTaskAndRecordsAreEnteredUsingAtTheRateUnderNotesSectionWhichDoesNotExistInTheOrgAndContactThemeFirmDealFundraisingFundAndCustomObjectsAreTagged(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = AMNNR_FundNames3;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("2"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject140;
		String task1Notes = AMNNR_Notes140;
		String relatedTo = AMNNR_RelatedTo140;
		String priority = AMNNR_AdvancePriority140;
		String status = AMNNR_AdvanceStatus140;
		String task1NotesVerify = task1Notes.replace("@", "");
		String updatedRelatedToVerifyForDetails = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);
		String updatedRelatedToVerify = updatedRelatedToVerifyForDetails + "<break>" + AMNNR_RelatedTo141;

		String followUptask1SubjectName = AMNNR_Subject141;
		String followUpAdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy",
				Integer.parseInt("0"));
		String followUpgetAdvanceDueDate = followUpAdvanceDueDate;
		String followUpStatus = AMNNR_AdvanceStatus141;

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1BasicSectionVerificationForDetailsSection = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerifyForDetails } };
		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, AMNNR_Classification140 } };

		String[][] followUptask1 = { { AMNNR_TaskLabel1, followUptask1SubjectName },
				{ AMNNR_TaskLabel5, followUpStatus }, { AMNNR_TaskLabel4, followUpgetAdvanceDueDate } };

		String[][] followUptask1BasicSectionVerification = { { AMNNR_TaskLabel1, followUptask1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] followUptask1AdvancedSectionVerification = { { AMNNR_TaskLabel4, followUpgetAdvanceDueDate },
				{ AMNNR_TaskLabel5, followUpStatus }, { AMNNR_TaskLabel6, priority },
				{ AMNNR_TaskLabel8, AMNNR_Classification140 } };

		String[] SuggestedTags = AMNNR_SuggestedTag140.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp140.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp140.split("<break>") };
		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup140.split("<break>") };

		String[][][] detailSectionVerifcation = { { { AMNNR_TaskLabel1, task1SubjectName } },
				task1BasicSectionVerificationForDetailsSection, task1AdvancedSection };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "Vertix Fund";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("2"));
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 14";
//		String task1Notes = "Mutual Fund , Ispro Deal , Litz , Maxtra , FCR 3 ,  Theme A , Theme B , Theme C , Golden Ret , Smuklin , @jhonson";
//		String relatedTo = "smith11<break>smith12<break>smith15";
//		String priority = "High";
//		String status = "Not Started";
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String updatedRelatedToVerifyForDetails = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//		String updatedRelatedToVerify = updatedRelatedToVerifyForDetails + "<break>"
//				+ "Mutual Fund<break>Ispro Deal<break>Litz<break>Maxtra<break>FCR 3<break>Theme A<break>Theme B<break>Theme C<break>Golden Ret<break>Smuklin";
//
//		String followUptask1SubjectName = "Task 14.1";
//		String followUpAdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy",
//				Integer.parseInt("0"));
//		String followUpgetAdvanceDueDate = followUpAdvanceDueDate;
//		String followUpStatus = "In Progress";
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1BasicSectionVerificationForDetailsSection = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerifyForDetails } };
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "A" } };
//
//		String[][] followUptask1 = { { AMNNR_TaskLabel1, followUptask1SubjectName },
//				{ AMNNR_TaskLabel5, followUpStatus }, { AMNNR_TaskLabel4, followUpgetAdvanceDueDate } };
//
//		String[][] followUptask1BasicSectionVerification = { { AMNNR_TaskLabel1, followUptask1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] followUptask1AdvancedSectionVerification = { { AMNNR_TaskLabel4, followUpgetAdvanceDueDate },
//				{ AMNNR_TaskLabel5, followUpStatus }, { AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "A" } };
//
//		String[] SuggestedTags = "Mutual Fund<break>Ispro Deal<break>Litz<break>Maxtra<break>FCR 3<break>Theme A<break>Theme B<break>Theme C<break>Golden Ret<break>Smuklin"
//				.split("<break>", -1);
//		String[][] createNewRecordPopUp = {
//				"checked<break>jhonson<break><AsItIs><break>Contact<break><break>Create".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = { "allRecords<break>smith11<break><break>Add".split("<break>") };
//		String[][] addContactsToFundraisingObjectPopup = {
//				"allRecords<break>smith11<break><break>Add".split("<break>") };
//
//		String[][][] detailSectionVerifcation = { { { AMNNR_TaskLabel1, task1SubjectName } },
//				task1BasicSectionVerificationForDetailsSection, task1AdvancedSection };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, "Funds", recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					followUptask1, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					CommonLib.refresh(driver);

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
//					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(followUptask1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO,
							"-----Verified Task named: " + followUptask1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							followUptask1SubjectName, followUptask1BasicSectionVerification,
							followUptask1AdvancedSectionVerification, IconType.Task, PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + followUptask1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + followUptask1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + followUptask1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					CommonLib.refresh(driver);

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(followUptask1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + followUptask1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + followUptask1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url,
											followUptask1BasicSectionVerification,
											followUptask1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ followUptask1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ followUptask1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + followUptask1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + followUptask1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
//					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR,
							"-----Task named: " + followUptask1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + followUptask1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----",
						YesNo.No);
				sa.assertTrue(false,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc084_VerifyWhenMaxCharLengthTaskIsCreatedWithMaxCharLengthRecordsEnteredUnderNotesSectionUsingAtTheRateWhenRecordDoesNotExistInTheOrg(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType59;
		String recordName = "WARBUG";
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("2"));
		String getAdvanceDueDate = AdvanceDueDate;

//		String notes = "@Jhon<break>@Max<Section>Hi @Jhon and @Max doing so far";

		String task1SubjectName = "nsuser firm record 1608 updated nsuser firm record 1608 updated nsuser firm record 1608 updated nsuser firm record 1608 updated nsuser firm record 1608 updated nsuser firm record 1608 updated nsuser firm record 1608 updated  nsuser firm record 1608 updated";
		String task1Notes = "Jasbinder singh krupal hsdghg sdhjhj twerty sdv sdvbv svdh hvv rwqtyrtqy djh sdgg"
				+ "nsuser firm record 1608 updated nsuser firm record 1608 updated nsuser firm record 1608 updated"
				+ "nsuser firm record 1608 updated nsuser firm record 1608 updated nsuser firm record 1608 updated nsuser firm record 1608 updated "
				+ "nsuser firm record 1608 updated" + "@Jasbinder";
		String relatedTo = "Vitara Deal<break>FCR 1";
		String priority = "High";
		String status = "Not Started";
		String task1NotesVerify = task1Notes.replace("@", "");
		String updatedRelatedToVerifyForDetails = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);
		String updatedRelatedToVerify = updatedRelatedToVerifyForDetails + "<break>"
				+ "jaspreet singh krupal hsdghg sdhjhj twerty sdv sdvbv svdh hvv rwqtyrtqy djh sdgg" + "break"
				+ "<break>"
				+ "nsuser firm record 1608 updated nsuser firm record 1608 updated nsuser firm record 1608 updated"
				+ "nsuser firm record 1608 updated nsuser firm record 1608 updated nsuser firm record 1608 updated nsuser firm record 1608 updated "
				+ "nsuser firm record 1608 updated";

		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
				{ AMNNR_TaskLabel3, relatedTo } };

		String[][] task1BasicSectionVerificationForDetailsSection = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerifyForDetails } };
		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "C" } };

		String[][] followUptask1 = null;

		String[] SuggestedTags = "All Records Select".split("<break>", -1);
		String[][] createNewRecordPopUp = {
				("checked<break>Jasbinder<break>jaspreet singh krupal hsdghg sdhjhj twerty sdv sdvbv svdh hvv rwqtyrtqy djh sdgg<break>Contact<break>nsuser firm record 1608 updated nsuser firm record 1608 updated nsuser firm record 1608 updated"
						+ "nsuser firm record 1608 updated nsuser firm record 1608 updated nsuser firm record 1608 updated nsuser firm record 1608 updated "
						+ "nsuser firm record 1608 updated<existing><break>Create").split("<break>") };
		String[][] addContactsToDealTeamPopUp = {
				"allRecords<break>Jasbinder singh krupal hsdghg sdhjhj twerty sdv sdvbv svdh hvv rwqtyrtqy djh sdg<break><break>Add"
						.split("<break>") };
		String[][] addContactsToFundraisingObjectPopup = {
				"allRecords<break>Jasbinder singh krupal hsdghg sdhjhj twerty sdv sdvbv svdh hvv rwqtyrtqy djh sdg<break><break>Add"
						.split("<break>") };

		String[][][] detailSectionVerifcation = { { { AMNNR_TaskLabel1, task1SubjectName } },
				task1BasicSectionVerificationForDetailsSection, task1AdvancedSection };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, "Firms", recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					followUptask1, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					CommonLib.refresh(driver);

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
//					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----",
						YesNo.No);
				sa.assertTrue(false,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc085_VerifyTheUIOfMeetingNotesPopUpOfCallFromLogACallButtonPlacedOnAcuityTabInteractionSection(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String task1SubjectName = AMNNR_Subject54;
		String task1Notes = AMNNR_Notes54;

		String getAdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT-08:00", "M/d/yyyy", Integer.parseInt("0"));

		String priority = AMNNR_AdvancePriority54;
		String status = AMNNR_AdvanceStatus54;

		String taskSectionSubject = AMNNR_TaskSubject54;
		String taskSectionStatus = AMNNR_TaskStatus54;
		String taskSectionDueDateOnly = "";

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel5, crmUser1FirstName + " " + crmUser1LastName }, { AMNNR_TaskLabel8, "-None-" } };

		String[][] task1TaskSection = { { AMNNR_TaskLabel1, taskSectionSubject },
				{ AMNNR_TaskLabel5, taskSectionStatus }, { AMNNR_TaskLabel4, taskSectionDueDateOnly } };

		String recordPageButtonName = AMNNR_ActivityType142;

		String recordName = AMNNR_FirmLegalName1;
		String url = "";

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		log(LogStatus.INFO, "---------Now Going to Verify UI of Task: " + task1SubjectName
				+ " in Activity Timeline Section---------", YesNo.No);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.clickOnRecordPageButtonForNewRecordCreation(recordPageButtonName, 30)) {
				log(LogStatus.INFO, "Clicked on Button: " + recordPageButtonName + " of Record Page: " + recordName,
						YesNo.No);
				url = getURL(driver, 10);
				BP.verifyUIOfCallPopUp(url, task1BasicSection, task1AdvancedSection, task1TaskSection);

			} else {
				log(LogStatus.ERROR,
						"Not able to Click on Button: " + recordPageButtonName + " of Record Page: " + recordName,
						YesNo.No);
				sa.assertTrue(false,
						"Not able to Click on Button: " + recordPageButtonName + " of Record Page: " + recordName);
			}

		} else {
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc086_VerifyWhenCallIsCreatedAndNoNotesAreMaintained(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject65 + " " + AMNNR_ActivityType54;
		;
		String task1Notes = AMNNR_Notes65;
		String relatedTo = AMNNR_RelatedTo65;
		String priority = AMNNR_AdvancePriority65;
		String status = AMNNR_AdvanceStatus65;
		String classification = AMNNR_Classification65;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, classification } };

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FirmLegalName1;

//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Prepare Invoice";
//		String task1Notes = "";
//		String relatedTo = "Houlihan Lokey<break>Glomez";
//		String priority = "Normal";
//		String status = "Not Started";
//		String classification = "A";
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, classification } };
//
//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "Sumo Logic";

		lp.CRMLogin(crmUser1EmailID, adminPassword);
		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);
			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, null, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSection, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSection,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}
		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc087_VerifyWhenCallIsCreatedAndNotesAreMaintainedUsingAtTheRateTaggingAndTaggedRecordExistsInTheOrg(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FirmLegalName1;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject66 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes66;
		String relatedTo = AMNNR_RelatedTo66;
		String priority = AMNNR_AdvancePriority66;
		String status = AMNNR_AdvanceStatus66;
		String classification = AMNNR_Classification66;
		String task1NotesVerify = task1Notes.split("<Section>", -1)[1].replace("@", "");

		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + AMNNR_RelatedTo67;

		String[] SuggestedTags = AMNNR_SuggestedTag66.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp66.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp66.split("<break>") };
		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup66.split("<break>") };

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };
		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, classification } };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "Sumo Logic";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Send Invoice Tagged";
//		String task1Notes = "@Max<break>@James<Section>This is to take into consideration about @Max and @James should be linked in the task";
//		String relatedTo = "Houlihan Lokey<break>Glomez";
//		String priority = "Normal";
//		String status = "Completed";
//		String classification = "B";
//		String task1NotesVerify = task1Notes.split("<Section>", -1)[1].replace("@", "");
//
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + "Max<break>James";
//
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = { "addContactsToDealTeamPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToFundraisingObjectPopup = {
//				"addContactsToFundraisingPopUpShouldNotThere".split("<break>") };
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, classification } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);
		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);
			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, null)) {
				log(LogStatus.PASS,
						"-----Activity timeline record has been created for Activity: " + task1SubjectName + "-----",
						YesNo.No);

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}
//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL,
						"-----Activity timeline record is not created for Activity: " + task1SubjectName + "-----",
						YesNo.No);
				sa.assertTrue(false,
						"-----Activity timeline record is not created for Activity: " + task1SubjectName + "-----");
			}
		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc088_VerifyWhenCallIsCreatedAndNotesAreMaintainedWithoutUsingAtTheRateTagging(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FirmLegalName4;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject68 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes68;
		String relatedTo = AMNNR_RelatedTo68;
		String priority = AMNNR_AdvancePriority68;
		String status = AMNNR_AdvanceStatus68;
		String classification = AMNNR_Classification68;
		String task1NotesVerify = task1Notes.replace("@", "");

		String updatedRelatedToVerifyBeforeTagging = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);

		String updatedRelatedToVerify = updatedRelatedToVerifyBeforeTagging + "<break>" + AMNNR_RelatedTo69;

		String[] SuggestedTags = AMNNR_SuggestedTag68.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp68.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp68.split("<break>") };
		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup68.split("<break>") };

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };
		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] task1BasicSectionVerificationForDetailsSection = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerifyBeforeTagging } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, classification } };
		String[][][] detailSectionVerifcation = { { { AMNNR_CallLabel1, task1SubjectName } },
				task1BasicSectionVerificationForDetailsSection, task1AdvancedSection };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = AMNNR_FirmLegalName4;
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Send Letter Not Tagged";
//		String task1Notes = "This is to check Con 2 , Con 3 , Logic should be the part of the kind";
//		String relatedTo = "Houlihan Lokey<break>Glomez";
//		String priority = "Normal";
//		String status = "Completed";
//		String classification = "A";
//		String task1NotesVerify = task1Notes.replace("@", "");
//
//		String updatedRelatedToVerifyBeforeTagging = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//
//		String updatedRelatedToVerify = updatedRelatedToVerifyBeforeTagging + "<break>"
//				+ "con 2<break>con 3<break>Sumo Kind<break>Sumo Logic";
//
//		String[] SuggestedTags = "con 2==Contact<break>con 3==Contact<break>Sumo Kind==Firm<break>Sumo Logic==Firm"
//				.split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = { "addContactsToDealTeamPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToFundraisingObjectPopup = {
//				"addContactsToFundraisingPopUpShouldNotThere".split("<break>") };
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] task1BasicSectionVerificationForDetailsSection = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerifyBeforeTagging } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, classification } };
//		String[][][] detailSectionVerifcation = { { { AMNNR_TaskLabel1, task1SubjectName } },
//				task1BasicSectionVerificationForDetailsSection, task1AdvancedSection };

		lp.CRMLogin(crmUser1EmailID, adminPassword);
		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);
			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS,
						"-----Activity timeline record has been created for Activity: " + task1SubjectName + "-----",
						YesNo.No);

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}
//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL,
						"-----Activity timeline record is not created for Activity: " + task1SubjectName + "-----",
						YesNo.No);
				sa.assertTrue(false,
						"-----Activity timeline record is not created for Activity: " + task1SubjectName + "-----");
			}
		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc089_VerifyWhenCallIsCreatedAndNotesAreMaintainedWithAndWithoutAtTheRatetaggingAndTaggedRecordDoesNotExistInTheOrg(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FirmLegalName4;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject70 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes143;
		String relatedTo = AMNNR_RelatedTo70;
		String priority = AMNNR_AdvancePriority70;
		String status = AMNNR_AdvanceStatus70;
		String updatedRelatedToVerify = relatedTo + AMNNR_RelatedTo143 + recordName;
		String task1NotesVerify = task1Notes.replace("@", "");

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp143.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp144.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp145.split("<break>", -1) };
		String firmRecord1 = AMNNR_CreateNewRecordPopUp143.split("<break>", -1)[1];
		String firmRecord2 = AMNNR_CreateNewRecordPopUp145.split("<break>", -1)[1];
		String firmRecord3ShouldNotThere = AMNNR_FirmLegalName16;
		String contactRecord = AMNNR_CreateNewRecordPopUp144.split("<break>", -1)[1];
		String subTabName = "Details";

		String[] labelAndValueSeprateByBreak1 = { AMNNR_DetailPageRecord1 };
		String[] labelAndValueSeprateByBreak2 = { AMNNR_DetailPageRecord2 };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = AMNNR_FirmLegalName4;
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "IntroductionNewRecordPopup";
//		String task1Notes = "This is to check @Alaksa ahemd and @Bruno ecostic , quest should be part of the deal, @ahemd and @ecostic";
//		String relatedTo = "Houlihan Lokey<break>Glomez";
//		String priority = "Normal";
//		String status = "Completed";
//		String updatedRelatedToVerify = relatedTo + "<break>Alaska<break>Bruno<break>" + recordName;
//		String task1NotesVerify = task1Notes.replace("@", "");
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = {
//				"checked<break>Alaksa<break><AsItIs><break>Firm<break><break>Create".split("<break>", -1),
//				"checked<break>Bruno<break><AsItIs><break>Contact<break>Alaksa<break>Create".split("<break>", -1),
//				"checked<break>ecostic<break><AsItIs><break>Firm<break>Private Equity<break>Create".split("<break>",
//						-1) };
//		String firmRecord1 = "Alaksa";
//		String firmRecord2 = "ecostic";
//		String firmRecord3ShouldNotThere = "ahemd";
//		String contactRecord = "Bruno";
//		String subTabName = "Details";
//
//		String[] labelAndValueSeprateByBreak1 = { "Record Type" + "<break>" + "Company" };
//		String[] labelAndValueSeprateByBreak2 = { "Record Type" + "<break>" + "Private Equity" };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(firmRecord1, "Firms", false)) {

					log(LogStatus.INFO, "-----Verified Firm named: " + firmRecord1 + " found in Firm Object-----",
							YesNo.No);
					CommonLib.refresh(driver);
					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.AcuityDetails);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName
										+ " record is able to open popup after click on it and verify its data on "
										+ firmRecord1 + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ firmRecord1 + ", Reason: " + subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ firmRecord1 + ", Reason: " + subjectLinkPopUpNegativeResult + "------");

					}

					if (BP.clicktabOnPage(subTabName)) {
						log(LogStatus.PASS, "Clicked on SubTab: " + subTabName, YesNo.No);

						CommonLib.ThreadSleep(8000);
						List<String> firmDetailPageNegativeResult = BP
								.fieldValueVerification(labelAndValueSeprateByBreak1);

						if (firmDetailPageNegativeResult.isEmpty()) {
							log(LogStatus.PASS,
									"------" + firmRecord1
											+ " labels and their values in Detail page has been verified------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + firmRecord1
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ firmDetailPageNegativeResult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + firmRecord1
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ firmDetailPageNegativeResult + "------");

						}

					} else {
						log(LogStatus.ERROR, "Not able to click on SubTab: " + subTabName, YesNo.No);
						sa.assertTrue(false, "Not able to click on SubTab: " + subTabName);

					}

				} else {

					log(LogStatus.ERROR, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----");

				}
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(firmRecord2, "Firms", false)) {
					log(LogStatus.INFO, "-----Verified Firm named: " + firmRecord2 + " found in Firm Object-----",
							YesNo.No);
					CommonLib.refresh(driver);
					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.AcuityDetails);
					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName
										+ " record is able to open popup after click on it and verify its data on "
										+ firmRecord2 + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ firmRecord2 + ", Reason: " + subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ firmRecord2 + ", Reason: " + subjectLinkPopUpNegativeResult + "------");

					}

					if (BP.clicktabOnPage(subTabName)) {
						log(LogStatus.PASS, "Clicked on SubTab: " + subTabName, YesNo.No);

						CommonLib.ThreadSleep(8000);
						List<String> firmDetailPageNegativeResult = BP
								.fieldValueVerification(labelAndValueSeprateByBreak2);

						if (firmDetailPageNegativeResult.isEmpty()) {
							log(LogStatus.PASS,
									"------" + firmRecord2
											+ " labels and their values in Detail page has been verified------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + firmRecord2
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ firmDetailPageNegativeResult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + firmRecord2
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ firmDetailPageNegativeResult + "------");

						}

					} else {
						log(LogStatus.ERROR, "Not able to click on SubTab: " + subTabName, YesNo.No);
						sa.assertTrue(false, "Not able to click on SubTab: " + subTabName);

					}

				} else {

					log(LogStatus.ERROR, "-----Firm named: " + firmRecord2 + " not found in Firm Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Firm named: " + firmRecord2 + " not found in Firm Object-----");

				}

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(firmRecord3ShouldNotThere, "Firms", true)) {

					log(LogStatus.INFO,
							"-----Verified Firm named: " + firmRecord3ShouldNotThere + " not found in Firm Object-----",
							YesNo.No);

				} else {

					log(LogStatus.ERROR, "-----Firm named: " + firmRecord3ShouldNotThere + " found in Firm Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Firm named: " + firmRecord3ShouldNotThere + " found in Firm Object-----");

				}

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(contactRecord, "Contacts", false)) {

					log(LogStatus.INFO,
							"-----Verified Contact named: " + contactRecord + " found in Contact Object-----",
							YesNo.No);
					CommonLib.refresh(driver);
					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.AcuityDetails);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName
										+ " record is able to open popup after click on it and verify its data on "
										+ contactRecord + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ contactRecord + ", Reason: " + subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ contactRecord + ", Reason: " + subjectLinkPopUpNegativeResult + "------");

					}

				} else {

					log(LogStatus.ERROR, "-----Contact named: " + contactRecord + " not found in Contact Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Contact named: " + contactRecord + " not found in Contact Object-----");

				}
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc090_VerifyWhenOnlyContactIsSelectedFromCreateRecordPopUpAlsoTheRecordIsEditableAndSingleStringShownByDefaultInCaseOfCall(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FirmLegalName4;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject73 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes146;
		String relatedTo = AMNNR_RelatedTo73;
		String priority = AMNNR_AdvancePriority73;
		String status = AMNNR_AdvanceStatus73;
		String updatedRelatedToVerify = relatedTo + AMNNR_RelatedTo146 + recordName;
		String task1NotesVerify = task1Notes.replace("@", "");

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp146.split("<break>", -1) };
		String firmRecord1 = AMNNR_CreateNewRecordPopUp146.split("<break>", -1)[4];
		String contactRecord = AMNNR_CreateNewRecordPopUp146.split("<break>", -1)[1];

		String subTabName = "Details";

		String[] labelAndValueSeprateByBreakForContact = { AMNNR_DetailPageRecord3 + "<break>" + firmRecord1 };
		String[][] relatedAssociationNotContains = { { AMNNR_CallLabel3, firmRecord1 } };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = AMNNR_FirmLegalName4;
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Pitching";
//		String task1Notes = "This is to check @ahmed and @ecostic , quest should be part of the deal";
//		String relatedTo = "Houlihan Lokey<break>Glomez";
//		String priority = "Normal";
//		String status = "In Progress";
//		String updatedRelatedToVerify = relatedTo + "<break>ahmed<break>" + recordName;
//		String task1NotesVerify = task1Notes.replace("@", "");
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = {
//				"checked<break>ahmed<break><AsItIs><break>Contact<break>exrogen<break>Create".split("<break>", -1) };
//		String firmRecord1 = "exrogen";
//		String contactRecord = "ahmed";
//
//		String subTabName = "Details";
//
//		String[] labelAndValueSeprateByBreakForContact = { "Legal Name" + "<break>" + firmRecord1 };
//		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, firmRecord1 } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(contactRecord, "Contacts", false)) {

					log(LogStatus.INFO,
							"-----Verified Contact named: " + contactRecord + " found in Contact Object-----",
							YesNo.No);
					CommonLib.refresh(driver);
					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.AcuityDetails);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName
										+ " record is able to open popup after click on it and verify its data on "
										+ contactRecord + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ contactRecord + ", Reason: " + subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ contactRecord + ", Reason: " + subjectLinkPopUpNegativeResult + "------");

					}

					if (BP.clicktabOnPage(subTabName)) {
						log(LogStatus.PASS, "Clicked on SubTab: " + subTabName, YesNo.No);

						CommonLib.ThreadSleep(8000);
						List<String> contactDetailPageNegativeResult = BP
								.fieldValueVerification(labelAndValueSeprateByBreakForContact);

						if (contactDetailPageNegativeResult.isEmpty()) {
							log(LogStatus.PASS,
									"------" + contactRecord
											+ " labels and their values in Detail page has been verified------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + contactRecord
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ contactDetailPageNegativeResult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + contactRecord
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ contactDetailPageNegativeResult + "------");

						}

					} else {
						log(LogStatus.ERROR, "Not able to click on SubTab: " + subTabName, YesNo.No);
						sa.assertTrue(false, "Not able to click on SubTab: " + subTabName);

					}

				} else {

					log(LogStatus.ERROR, "-----Contact named: " + contactRecord + " not found in Contact Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Contact named: " + contactRecord + " not found in Contact Object-----");

				}

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(firmRecord1, "Firms", false)) {

					log(LogStatus.INFO, "-----Verified Firm named: " + firmRecord1 + " found in Firm Object-----",
							YesNo.No);

				} else {

					log(LogStatus.ERROR, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----");

				}

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
							"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

						String url = driver.getCurrentUrl();
						ThreadSleep(1000);
						ArrayList<String> NotesPopUpPrefilledNegativeResultUpdated = BP
								.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
										task1AdvancedSection, null);
						if (NotesPopUpPrefilledNegativeResultUpdated.isEmpty()) {
							log(LogStatus.INFO,
									"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
											+ NotesPopUpPrefilledNegativeResultUpdated,
									YesNo.No);
							sa.assertTrue(false,
									"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
											+ NotesPopUpPrefilledNegativeResultUpdated);
						}

					} else {
						log(LogStatus.ERROR,
								"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName,
								YesNo.No);
						sa.assertTrue(false,
								"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
							"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

						ArrayList<String> verifyRelatedToNotTaggedNegativeResults = BP
								.verifyRelatedToNotTagged(relatedAssociationNotContains);
						if (verifyRelatedToNotTaggedNegativeResults.isEmpty()) {
							log(LogStatus.INFO, "RelatedTo Association Not Tagged has been verified in Note Popup",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
											+ verifyRelatedToNotTaggedNegativeResults,
									YesNo.No);
							sa.assertTrue(false,
									"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
											+ verifyRelatedToNotTaggedNegativeResults);
						}

					} else {
						log(LogStatus.ERROR,
								"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName,
								YesNo.No);
						sa.assertTrue(false,
								"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc091_VerifyWhenBothContactAndFirmIsSelectedFromCreateRecordPopupInCaseOfCall(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		SetupPageBusinessLayer sp = new SetupPageBusinessLayer(driver);

		String contactRecordTypeList = "ContactCall<break>BankerCall";
		String contactRecordTypeArray[] = contactRecordTypeList.split(breakSP, -1);
		String[] profileForSelection = { "PE Standard User" };
		boolean isMakeAvailable = false;
		boolean isMakeDefault = true;
		boolean flag = false;
		String recordTypeDescription = "Description Record Type";
		String[][][] contactRecordType = {
				{ { recordTypeLabel.Record_Type_Label.toString(), contactRecordTypeArray[0] },
						{ recordTypeLabel.Description.toString(), contactRecordTypeArray[0] + recordTypeDescription },
						{ recordTypeLabel.Active.toString(), "" } },
				{ { recordTypeLabel.Record_Type_Label.toString(), contactRecordTypeArray[1] },
						{ recordTypeLabel.Description.toString(), contactRecordTypeArray[1] + recordTypeDescription },
						{ recordTypeLabel.Active.toString(), "" } } };

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FirmLegalName4;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject75 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes147;
		String relatedTo = AMNNR_RelatedTo75;
		String priority = AMNNR_AdvancePriority75;
		String status = AMNNR_AdvanceStatus75;
		String updatedRelatedToVerify = relatedTo + AMNNR_RelatedTo147 + recordName;
		String task1NotesVerify = task1Notes.replace("@", "");

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp147.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp148.split("<break>", -1) };
		String firmRecord1 = AMNNR_CreateNewRecordPopUp148.split("<break>", -1)[1];
		String contactRecord = AMNNR_CreateNewRecordPopUp147.split("<break>", -1)[2];

		String subTabName = "Details";

		String[] labelAndValueSeprateByBreakForContact = { AMNNR_DetailPageRecord4 + "<break>" + contactRecord,
				AMNNR_DetailPageRecord11, AMNNR_DetailPageRecord6 };
		String[] labelAndValueSeprateByBreakForFirm = { AMNNR_DetailPageRecord7 + "<break>" + firmRecord1,
				AMNNR_DetailPageRecord8 };

//		String contactRecordTypeList = "Contact<break>Banker";
//		String contactRecordTypeArray[] = contactRecordTypeList.split(breakSP, -1);
//		String[] profileForSelection = { "PE Standard User" };
//		boolean isMakeAvailable = false;
//		boolean isMakeDefault = true;
//		boolean flag = false;
//		String recordTypeDescription = "Description Record Type";
//		String[][][] contactRecordType = {
//				{ { recordTypeLabel.Record_Type_Label.toString(), contactRecordTypeArray[0] },
//						{ recordTypeLabel.Description.toString(), contactRecordTypeArray[0] + recordTypeDescription },
//						{ recordTypeLabel.Active.toString(), "" } },
//				{ { recordTypeLabel.Record_Type_Label.toString(), contactRecordTypeArray[1] },
//						{ recordTypeLabel.Description.toString(), contactRecordTypeArray[1] + recordTypeDescription },
//						{ recordTypeLabel.Active.toString(), "" } } };
//
//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = AMNNR_FirmLegalName4;
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("-1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Pitching 1.1";
//		String task1Notes = "This is to check @Owem and @AQUA quest should be part of the deal";
//		String relatedTo = "Houlihan Lokey<break>Glomez";
//		String priority = "Normal";
//		String status = "Completed";
//		String updatedRelatedToVerify = relatedTo + "<break>Owem D'souza<break>AQUA<break>" + recordName;
//		String task1NotesVerify = task1Notes.replace("@", "");
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = {
//				"checked<break>Owem<break>Owem D'souza<break>Contact<break>Maxtra<existing><break>Create"
//						.split("<break>", -1),
//				"checked<break>AQUA<break><AsItIs><break>Firm<break><break>Create".split("<break>", -1) };
//		String firmRecord1 = "AQUA";
//		String contactRecord = "Owem D'souza";
//
//		String subTabName = "Details";
//
//		String[] labelAndValueSeprateByBreakForContact = { "Name" + "<break>" + contactRecord,
//				"Contact Record Type" + "<break>" + "Contact", "Legal Name" + "<break>" + "Maxtra" };
//		String[] labelAndValueSeprateByBreakForFirm = { "Legal Name" + "<break>" + firmRecord1,
//				"Record Type" + "<break>" + "Company" };

		lp.CRMLogin(superAdminUserName, adminPassword);
		for (int i = 0; i < contactRecordTypeArray.length; i++) {
			home.notificationPopUpClose();
			if (home.clickOnSetUpLink()) {
				flag = false;
				String parentID = switchOnWindow(driver);

				if (parentID != null) {
					if (sp.searchStandardOrCustomObject("", Mode.Lightning.toString(), object.Contact)) {
						if (sp.clickOnObjectFeature("", Mode.Lightning.toString(), object.Contact,
								ObjectFeatureName.recordTypes)) {
							if (i == 0) {
								if (sp.listOfRecordTypes().contains(contactRecordType[i][0][1])) {
									log(LogStatus.INFO, "Record Type: " + contactRecordType[i][0][1]
											+ " is already created, So not going to Create", YesNo.No);
									flag = true;
								} else {
									flag = sp.createRecordTypeForObject(projectName, contactRecordType[i],
											isMakeAvailable, profileForSelection, isMakeDefault, null, 10);
								}
							} else {
								isMakeDefault = false;

								if (sp.listOfRecordTypes().contains(contactRecordType[i][0][1])) {
									log(LogStatus.INFO, "Record Type: " + contactRecordType[i][0][1]
											+ " is already created, So not going to Create", YesNo.No);
									flag = true;
								} else {
									flag = sp.createRecordTypeForObject(projectName, contactRecordType[i],
											isMakeAvailable, profileForSelection, isMakeDefault, null, 10);
								}
							}
							if (flag) {
								log(LogStatus.INFO, "Created Record Type : " + contactRecordTypeArray[i], YesNo.No);
							} else {
								log(LogStatus.ERROR, "Not Able to Create Record Type : " + contactRecordTypeArray[i],
										YesNo.Yes);
								sa.assertTrue(false, "Not Able to Create Record Type : " + contactRecordTypeArray[i]);
							}

						} else {
							log(LogStatus.ERROR,
									"object feature " + ObjectFeatureName.recordTypes + " is not clickable", YesNo.Yes);
							sa.assertTrue(false,
									"object feature " + ObjectFeatureName.recordTypes + " is not clickable");
						}
					} else {
						log(LogStatus.ERROR, object.Deal + " object could not be found in object manager", YesNo.Yes);
						sa.assertTrue(false, object.Deal + " object could not be found in object manager");
					}
					driver.close();
					driver.switchTo().window(parentID);
					switchToDefaultContent(driver);
					refresh(driver);
				} else {
					log(LogStatus.ERROR, "could not find new window to switch", YesNo.Yes);
					sa.assertTrue(false, "could not find new window to switch");
				}
			} else {
				log(LogStatus.ERROR, "could not click on setup link", YesNo.Yes);
				sa.assertTrue(false, "could not click on setup link");
			}

		}

		lp.CRMlogout();
		CommonLib.ThreadSleep(5000);

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

				CommonLib.refresh(driver);
				CommonLib.ThreadSleep(4000);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(contactRecord, "Contacts", false)) {

					log(LogStatus.INFO,
							"-----Verified Contact named: " + contactRecord + " found in Contact Object-----",
							YesNo.No);
					CommonLib.refresh(driver);

					if (BP.clicktabOnPage(subTabName)) {
						log(LogStatus.PASS, "Clicked on SubTab: " + subTabName, YesNo.No);

						CommonLib.ThreadSleep(8000);
						List<String> contactDetailPageNegativeResult = BP
								.fieldValueVerification(labelAndValueSeprateByBreakForContact);

						if (contactDetailPageNegativeResult.isEmpty()) {
							log(LogStatus.PASS,
									"------" + contactRecord
											+ " labels and their values in Detail page has been verified------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + contactRecord
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ contactDetailPageNegativeResult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + contactRecord
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ contactDetailPageNegativeResult + "------");

						}

					} else {
						log(LogStatus.ERROR, "Not able to click on SubTab: " + subTabName, YesNo.No);
						sa.assertTrue(false, "Not able to click on SubTab: " + subTabName);

					}

				} else {

					log(LogStatus.ERROR, "-----Contact named: " + contactRecord + " not found in Contact Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Contact named: " + contactRecord + " not found in Contact Object-----");

				}

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(firmRecord1, "Firms", false)) {

					log(LogStatus.INFO, "-----Verified Firm named: " + firmRecord1 + " found in Firm Object-----",
							YesNo.No);
					CommonLib.refresh(driver);
					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.AcuityDetails);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName
										+ " record is able to open popup after click on it and verify its data on "
										+ firmRecord1 + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ firmRecord1 + ", Reason: " + subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ firmRecord1 + ", Reason: " + subjectLinkPopUpNegativeResult + "------");

					}

					if (BP.clicktabOnPage(subTabName)) {
						log(LogStatus.PASS, "Clicked on SubTab: " + subTabName, YesNo.No);

						CommonLib.ThreadSleep(8000);
						List<String> firmDetailPageNegativeResult = BP
								.fieldValueVerification(labelAndValueSeprateByBreakForFirm);

						if (firmDetailPageNegativeResult.isEmpty()) {
							log(LogStatus.PASS,
									"------" + firmRecord1
											+ " labels and their values in Detail page has been verified------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + firmRecord1
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ firmDetailPageNegativeResult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + firmRecord1
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ firmDetailPageNegativeResult + "------");

						}

					} else {
						log(LogStatus.ERROR, "Not able to click on SubTab: " + subTabName, YesNo.No);
						sa.assertTrue(false, "Not able to click on SubTab: " + subTabName);

					}

				} else {

					log(LogStatus.ERROR, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		lp.CRMlogout();
		CommonLib.ThreadSleep(7000);

		lp.CRMLogin(superAdminUserName, adminPassword);

		for (int i = 0; i < contactRecordTypeArray.length; i++) {
			home.notificationPopUpClose();
			if (home.clickOnSetUpLink()) {
				flag = false;
				String parentID = switchOnWindow(driver);
				if (parentID != null) {

					if (sp.searchStandardOrCustomObject(projectName, mode, object.Profiles)) {
						log(LogStatus.INFO, "Profile has been open", YesNo.Yes);

						if (sp.removeRecordTypeOfObject("PE Standard User",
								com.navatar.generic.EnumConstants.RecordType.Contact)) {
							log(LogStatus.INFO, "The record type of Contact has been removed", YesNo.No);
							break;

						} else {
							log(LogStatus.ERROR, "The record type of Contact is not removed", YesNo.No);
							sa.assertTrue(false, "The record type of Contact is not removed");
						}
					} else {
						log(LogStatus.ERROR, "Not Able to Search the " + object.Profiles + " object", YesNo.Yes);
						sa.assertTrue(false, "Not Able to Search the Object" + object.Profiles + " object");
					}

					driver.close();
					driver.switchTo().window(parentID);
					switchToDefaultContent(driver);
				} else {
					log(LogStatus.ERROR, "could not find new window to switch", YesNo.Yes);
					sa.assertTrue(false, "could not find new window to switch");
				}
			} else {
				log(LogStatus.ERROR, "could not click on setup link", YesNo.Yes);
				sa.assertTrue(false, "could not click on setup link");
			}

		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc092_VerifyWhenBothContactAndFirmIsErasedFromCreateRecordPopUpAndEnteredNewDetailsInCaseOfCall(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FirmLegalName4;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject77 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes149;
		String relatedTo = AMNNR_RelatedTo77;
		String priority = AMNNR_AdvancePriority77;
		String status = AMNNR_AdvanceStatus77;
		String updatedRelatedToVerify = relatedTo + AMNNR_RelatedTo149 + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);
		String task1NotesVerify = task1Notes.replace("@", "");

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification77 } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp149.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp150.split("<break>", -1) };
		String firmRecord1 = AMNNR_CreateNewRecordPopUp150.split("<break>", -1)[2];
		String contactRecord = AMNNR_CreateNewRecordPopUp149.split("<break>", -1)[2];

		String subTabName = "Details";

		String[] labelAndValueSeprateByBreakForContact = { AMNNR_DetailPageRecord4 + "<break>" + contactRecord,
				AMNNR_DetailPageRecord9 };
		String[] labelAndValueSeprateByBreakForFirm = { AMNNR_DetailPageRecord7 + "<break>" + firmRecord1,
				AMNNR_DetailPageRecord10 };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = AMNNR_FirmLegalName4;
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Pitching 1.10";
//		String task1Notes = "Had been assigned in the task with @Sqwab who belongs to @Qazx firm.";
//		String relatedTo = "Martha<break>Vertica";
//		String priority = "High";
//		String status = "Not Started";
//		String updatedRelatedToVerify = relatedTo + "<break>Mack cronto<break>Cheex<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//		String task1NotesVerify = task1Notes.replace("@", "");
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "B" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = {
//				"checked<break>Sqwab<break>Mack cronto<break>Contact<break><break>Create".split("<break>", -1),
//				"checked<break>Qazx<break>Cheex<break>Firm<break><break>Create".split("<break>", -1) };
//		String firmRecord1 = "Cheex";
//		String contactRecord = "Mack cronto";
//
//		String subTabName = "Details";
//
//		String[] labelAndValueSeprateByBreakForContact = { "Name" + "<break>" + contactRecord,
//				"Legal Name<break>Dummy Account" };
//		String[] labelAndValueSeprateByBreakForFirm = { "Legal Name" + "<break>" + firmRecord1,
//				"Record Type<break>Company" };

		lp.CRMLogin(crmUser1EmailID, adminPassword);
		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

				CommonLib.ThreadSleep(4000);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(contactRecord, "Contacts", false)) {

					log(LogStatus.INFO,
							"-----Verified Contact named: " + contactRecord + " found in Contact Object-----",
							YesNo.No);
					CommonLib.refresh(driver);

					if (BP.clicktabOnPage(subTabName)) {
						log(LogStatus.PASS, "Clicked on SubTab: " + subTabName, YesNo.No);

						CommonLib.ThreadSleep(8000);
						List<String> contactDetailPageNegativeResult = BP
								.fieldValueVerification(labelAndValueSeprateByBreakForContact);

						if (contactDetailPageNegativeResult.isEmpty()) {
							log(LogStatus.PASS,
									"------" + contactRecord
											+ " labels and their values in Detail page has been verified------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + contactRecord
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ contactDetailPageNegativeResult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + contactRecord
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ contactDetailPageNegativeResult + "------");

						}

					} else {
						log(LogStatus.ERROR, "Not able to click on SubTab: " + subTabName, YesNo.No);
						sa.assertTrue(false, "Not able to click on SubTab: " + subTabName);

					}

				} else {

					log(LogStatus.ERROR, "-----Contact named: " + contactRecord + " not found in Contact Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Contact named: " + contactRecord + " not found in Contact Object-----");

				}

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(firmRecord1, "Firms", false)) {

					log(LogStatus.INFO, "-----Verified Firm named: " + firmRecord1 + " found in Firm Object-----",
							YesNo.No);
					CommonLib.refresh(driver);
					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.AcuityDetails);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS,
								"------" + task1SubjectName
										+ " record is able to open popup after click on it and verify its data on "
										+ firmRecord1 + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ firmRecord1 + ", Reason: " + subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified on Record: "
										+ firmRecord1 + ", Reason: " + subjectLinkPopUpNegativeResult + "------");

					}

					if (BP.clicktabOnPage(subTabName)) {
						log(LogStatus.PASS, "Clicked on SubTab: " + subTabName, YesNo.No);

						CommonLib.ThreadSleep(8000);
						List<String> firmDetailPageNegativeResult = BP
								.fieldValueVerification(labelAndValueSeprateByBreakForFirm);

						if (firmDetailPageNegativeResult.isEmpty()) {
							log(LogStatus.PASS,
									"------" + firmRecord1
											+ " labels and their values in Detail page has been verified------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + firmRecord1
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ firmDetailPageNegativeResult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + firmRecord1
											+ " labels and their values in Detail page has not been verified, Reason: "
											+ firmDetailPageNegativeResult + "------");

						}

					} else {
						log(LogStatus.ERROR, "Not able to click on SubTab: " + subTabName, YesNo.No);
						sa.assertTrue(false, "Not able to click on SubTab: " + subTabName);

					}

				} else {

					log(LogStatus.ERROR, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc093_VerifyWhenAllTheRecordsUnderCreateRecordPopUpIsErasedAndClickedOnCreateButtonInCaseOfCall(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FirmLegalName4;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject79 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes151;
		String relatedTo = AMNNR_RelatedTo79;
		String priority = AMNNR_AdvancePriority79;
		String status = AMNNR_AdvanceStatus79;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);
		String updatedRelatedToNotContainsVerify = AMNNR_RelatedTo151;
		String task1NotesVerify = task1Notes.replace("@", "");

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification79 } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp151.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp152.split("<break>", -1) };
		String record1 = AMNNR_CreateNewRecordPopUp151.split("<break>", -1)[1];
		String record2 = AMNNR_CreateNewRecordPopUp152.split("<break>", -1)[1];

		String[][] relatedAssociationNotContains = { { AMNNR_CallLabel3, updatedRelatedToNotContainsVerify } };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = AMNNR_FirmLegalName4;
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Pitching 1.2";
//		String task1Notes = "Had been assigned in the task with @SqwabNew who belongs to @QazxNew firm.";
//		String relatedTo = "Martha<break>Vertica";
//		String priority = "High";
//		String status = "Not Started";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//		String updatedRelatedToNotContainsVerify = "SqwabNew<break>QazxNew";
//		String task1NotesVerify = task1Notes.replace("@", "");
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "C" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = {
//				"checked<break>SqwabNew<break><Error>Complete this field.<break>Contact<break><break>Ignore"
//						.split("<break>", -1),
//				"checked<break>QazxNew<break><Error>Complete this field.<break>Firm<break><break>Ignore"
//						.split("<break>", -1) };
//		String record1 = "SqwabNew";
//		String record2 = "QazxNew";
//
//		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, updatedRelatedToNotContainsVerify } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);
		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, null, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

				CommonLib.ThreadSleep(4000);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(record1, "Contacts", true)) {

					log(LogStatus.INFO, "-----Verified Contact named: " + record1 + " not found in Contact Object-----",
							YesNo.No);

				} else {

					log(LogStatus.ERROR, "-----Contact named: " + record1 + " found in Contact Object-----", YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Contact named: " + record1 + " found in Contact Object-----");

				}

				CommonLib.ThreadSleep(4000);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(record2, "Contacts", true)) {

					log(LogStatus.INFO, "-----Verified Contact named: " + record2 + " not found in Contact Object-----",
							YesNo.No);

				} else {

					log(LogStatus.ERROR, "-----Contact named: " + record2 + " found in Contact Object-----", YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Contact named: " + record2 + " found in Contact Object-----");

				}

				CommonLib.refresh(driver);

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(record1, "Firms", true)) {

					log(LogStatus.INFO, "-----Verified Firm named: " + record1 + " not found in Firm Object-----",
							YesNo.No);

				} else {

					log(LogStatus.ERROR, "-----Firm named: " + record1 + " found in Firm Object-----", YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Firm named: " + record1 + " found in Firm Object-----");

				}

				CommonLib.refresh(driver);

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(record2, "Firms", true)) {

					log(LogStatus.INFO, "-----Verified Firm named: " + record2 + " not found in Firm Object-----",
							YesNo.No);

				} else {

					log(LogStatus.ERROR, "-----Firm named: " + record2 + " found in Firm Object-----", YesNo.Yes);
					BaseLib.sa.assertTrue(false, "-----Firm named: " + record2 + " found in Firm Object-----");

				}

				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
							"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

						ArrayList<String> verifyRelatedToNotTaggedNegativeResults = BP
								.verifyRelatedToNotTagged(relatedAssociationNotContains);
						if (verifyRelatedToNotTaggedNegativeResults.isEmpty()) {
							log(LogStatus.INFO, "RelatedTo Association Not Tagged has been verified in Note Popup",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
											+ verifyRelatedToNotTaggedNegativeResults,
									YesNo.No);
							sa.assertTrue(false,
									"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
											+ verifyRelatedToNotTaggedNegativeResults);
						}

					} else {
						log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
						sa.assertTrue(false, "-----Activity timeline record is not created-----");
					}

				} else {
					log(LogStatus.ERROR,
							"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName,
							YesNo.No);
					sa.assertTrue(false,
							"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName);
				}

//				driver.close();
//				driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc094_VerifyWhen14RecordsAreEnteredUsingAtTheRateTaggingAndAllAreSelectedAsFirmFromCreateRecordPopUpAndSavedInCaseOfCall(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		SetupPageBusinessLayer sp = new SetupPageBusinessLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_Contact3;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject81 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes153;
		String relatedTo = AMNNR_RelatedTo81;
		String priority = AMNNR_AdvancePriority81;
		String status = AMNNR_AdvanceStatus81;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + AMNNR_SuggestedTag81;
		String updatedRelatedToNotContainsVerify = AMNNR_RelatedTo153;
		String task1NotesVerify = task1Notes.replace("@", "");
		String[] SuggestedTags = AMNNR_SuggestedTag81.split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification81 } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp153.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp154.split("<break>", -1), AMNNR_CreateNewRecordPopUp155.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp156.split("<break>", -1), AMNNR_CreateNewRecordPopUp157.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp158.split("<break>", -1), AMNNR_CreateNewRecordPopUp159.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp160.split("<break>", -1), AMNNR_CreateNewRecordPopUp161.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp162.split("<break>", -1), AMNNR_CreateNewRecordPopUp163.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp164.split("<break>", -1), AMNNR_CreateNewRecordPopUp165.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp166.split("<break>", -1) };
		String firmRecord1 = AMNNR_CreateNewRecordPopUp160.split("<break>", -1)[1];
		String firmRecord2 = AMNNR_CreateNewRecordPopUp164.split("<break>", -1)[1];

		boolean flag = false;

		String[][] relatedAssociationNotContains = { { AMNNR_CallLabel3, updatedRelatedToNotContainsVerify } };

//		
//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "Max";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Lineup announcement";
//		String task1Notes = "Had a good talk with Litz regarding @THECARLYLEGROUP , @WARBUG ,  @PINCUS , @BAINCAPITAL , @TPGGROWTH CAPITAL , @CVCCAPITALPARTNERS , @THEBLACKSTONEGROUP , @KKR&COMPANY , @EVERSTONECAPITAL , @BARINGPRIVATEEQUITY , @CLSACAPITALPARTNERS , @KOTAKPRIVATEEQUITY , @CHRYSCAPITAL , @TRUENORTH’SINDIAVALUEFUND , @CHRYSCAPITALNEW";
//		String relatedTo = "Martha<break>Vertica<break>Sumo Logic";
//		String priority = "Normal";
//		String status = "In Progress";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + "Litz";
//		String updatedRelatedToNotContainsVerify = "THECARLYLEGROUP<break>WARBUG<break>PINCUS<break>BAINCAPITAL<break>TPGGROWTH<break>CVCCAPITALPARTNERS<break>THEBLACKSTONEGROUP<break>KKR&COMPANY<break>EVERSTONECAPITAL<break>BARINGPRIVATEEQUITY<break>CLSACAPITALPARTNERS<break>CHRYSCAPITAL<break>TRUENORTH’SINDIAVALUEFUND<break>CHRYSCAPITALNEW";
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String[] SuggestedTags = "Litz".split("<break>", -1);
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "A" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = {
//				"checked<break>THECARLYLEGROUP<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>WARBUG<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>PINCUS<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>BAINCAPITAL<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>TPGGROWTH<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>CVCCAPITALPARTNERS<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>THEBLACKSTONEGROUP<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>KKR&COMPANY<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>EVERSTONECAPITAL<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>BARINGPRIVATEEQUITY<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>CLSACAPITALPARTNERS<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>CHRYSCAPITAL<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>TRUENORTH’SINDIAVALUEFUND<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1),
//				"checked<break>CHRYSCAPITALNEW<break><AsItIs><break>Firm<break><Default>Institution<break>Create"
//						.split("<break>", -1) };
//		String firmRecord1 = "KKR&COMPANY";
//		String firmRecord2 = "CHRYSCAPITAL";
//
//		boolean flag = false;
//
//		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, updatedRelatedToNotContainsVerify } };

		lp.CRMLogin(superAdminUserName, adminPassword);
		if (home.clickOnSetUpLink()) {
			flag = false;
			String parentID = switchOnWindow(driver);
			if (parentID != null) {

				if (sp.searchStandardOrCustomObject(projectName, mode, object.Profiles)) {
					log(LogStatus.INFO, "Profile has been open", YesNo.Yes);

					if (sp.defaultRecordTypeSelect("PE Standard User", "Account", "Institution")) {
						log(LogStatus.INFO,
								"-----The record type of Account has been selected to: " + "Institution" + "-----",
								YesNo.No);
						flag = true;

					} else {
						log(LogStatus.ERROR,
								"-----The record type of Account has not been selected to: " + "Institution" + "-----",
								YesNo.No);
						sa.assertTrue(false,
								"-----The record type of Account has not been selected to: " + "Institution" + "-----");
					}
				} else {
					log(LogStatus.ERROR, "Not Able to Search the " + object.Profiles + " object", YesNo.Yes);
					sa.assertTrue(false, "Not Able to Search the Object" + object.Profiles + " object");
				}

				driver.close();
				driver.switchTo().window(parentID);
				switchToDefaultContent(driver);
			} else {
				log(LogStatus.ERROR, "could not find new window to switch", YesNo.Yes);
				sa.assertTrue(false, "could not find new window to switch");
			}
		} else {
			log(LogStatus.ERROR, "could not click on setup link", YesNo.Yes);
			sa.assertTrue(false, "could not click on setup link");
		}

		lp.CRMlogout();
		ThreadSleep(5000);
		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (flag) {

			if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj2, recordName, null)) {
				log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

				if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection,
						task1AdvancedSection, null, SuggestedTags, false, null, null, createNewRecordPopUp, null, null,
						null)) {
					log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
					CommonLib.refresh(driver);
					lp.clickOnTab(projectName, TabName.HomeTab);
					if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

						log(LogStatus.INFO,
								"-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
								YesNo.No);

						ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
								task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
								PageName.TaskPage);

						if (subjectLinkPopUpNegativeResult.isEmpty()) {
							log(LogStatus.PASS, "------" + task1SubjectName
									+ " record is able to open popup after click on it and verify its data" + "------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------",
									YesNo.Yes);
							sa.assertTrue(false,
									"------" + task1SubjectName + " record link popup is not verified, Reason: "
											+ subjectLinkPopUpNegativeResult + "------");

						}

//						driver.close();
//						driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
						CommonLib.ThreadSleep(4000);
					} else {

						log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
								YesNo.Yes);
						BaseLib.sa.assertTrue(false,
								"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

					}

					lp.clickOnTab(projectName, TabName.HomeTab);
					if (home.globalSearchAndNavigate(firmRecord1, "Firms", false)) {

						log(LogStatus.INFO, "-----Verified Firm named: " + firmRecord1 + " found in Firm Object-----",
								YesNo.No);

					} else {

						log(LogStatus.ERROR, "-----Firm named: " + firmRecord1 + " not found in Firm Object-----",
								YesNo.Yes);
						BaseLib.sa.assertTrue(false,
								"-----Firm named: " + firmRecord1 + " not found in Firm Object-----");

					}

					lp.clickOnTab(projectName, TabName.HomeTab);
					if (home.globalSearchAndNavigate(firmRecord2, "Firms", false)) {

						log(LogStatus.INFO, "-----Verified Firm named: " + firmRecord2 + " found in Firm Object-----",
								YesNo.No);

					} else {

						log(LogStatus.ERROR, "-----Firm named: " + firmRecord2 + " not found in Firm Object-----",
								YesNo.Yes);
						BaseLib.sa.assertTrue(false,
								"-----Firm named: " + firmRecord2 + " not found in Firm Object-----");

					}

					lp.clickOnTab(projectName, TabName.HomeTab);
					if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

						log(LogStatus.INFO,
								"-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
								YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							ArrayList<String> verifyRelatedToNotTaggedNegativeResults = BP
									.verifyRelatedToNotTagged(relatedAssociationNotContains);
							if (verifyRelatedToNotTaggedNegativeResults.isEmpty()) {
								log(LogStatus.INFO, "RelatedTo Association Not Tagged has been verified in Note Popup",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
												+ verifyRelatedToNotTaggedNegativeResults,
										YesNo.No);
								sa.assertTrue(false,
										"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
												+ verifyRelatedToNotTaggedNegativeResults);
							}

						} else {
							log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
							sa.assertTrue(false, "-----Activity timeline record is not created-----");
						}

					} else {
						log(LogStatus.ERROR,
								"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName,
								YesNo.No);
						sa.assertTrue(false,
								"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

				} else {
					log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
					sa.assertTrue(false, "-----Activity timeline record is not created-----");
				}

			} else

			{
				log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
				sa.assertTrue(false, "Not able to Open the Record: " + recordName);
			}

		} else {
			log(LogStatus.ERROR, "-----Not able to Select Default record Type, So not able to proceed further-----",
					YesNo.No);
			sa.assertTrue(false, "-----Not able to Select Default record Type, So not able to proceed further-----");
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })
	@Test
	public void AcuityMNNRTc095_VerifyWhen51RecordsAreEnteredUsingAtTheRateTaggingAndAllAreSelectedAsContactFromCreateRecordPopUpAndSavedInCaseOfCall(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_Contact3;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject95 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes167;
		String relatedTo = AMNNR_RelatedTo95;
		String priority = AMNNR_AdvancePriority95;
		String status = AMNNR_AdvanceStatus95;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + AMNNR_SuggestedTag95;
		String updatedRelatedToNotContainsVerify = "";
		for (int i = 1; i <= 51; i++) {
			updatedRelatedToNotContainsVerify = updatedRelatedToNotContainsVerify + AMNNR_RelatedTo167 + i + "<break>";
			if (i == 51)
				updatedRelatedToNotContainsVerify = updatedRelatedToNotContainsVerify.substring(0,
						(updatedRelatedToNotContainsVerify.length() - 7));
		}
		String task1NotesVerify = task1Notes.replace("@", "");
		String[] SuggestedTags = AMNNR_SuggestedTag95.split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification95 } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		ArrayList<String[]> createRecordPopupRecordsList = new ArrayList<String[]>();

		for (int i = 1; i <= 51; i++) {

			String temp = AMNNR_CreateNewRecordPopUp167 + i + AMNNR_CreateNewRecordPopUp96;
			createRecordPopupRecordsList.add(temp.split("<break>", -1));

		}

		Integer createRecordPopupRecordsListSize = createRecordPopupRecordsList.size();
		String[][] createNewRecordPopUp = new String[createRecordPopupRecordsListSize][];
		for (int i = 0; i < createRecordPopupRecordsListSize; i++) {
			createNewRecordPopUp[i] = createRecordPopupRecordsList.get(i);

		}

		System.out.println(createNewRecordPopUp.length);
		String contactRecord1 = AMNNR_RelatedTo167 + (new Random().nextInt(51) + 1);
		String contactRecord2 = AMNNR_RelatedTo167 + (new Random().nextInt(51) + 1);

		System.out.println(contactRecord1);
		System.out.println(contactRecord2);

		String[][] relatedAssociationNotContains = { { AMNNR_CallLabel3, updatedRelatedToNotContainsVerify } };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = AMNNR_Contact3;
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Lineup announcement 2";
//		String task1Notes = "Had a good talk with Litz regarding @smith1 @smith2 @smith3 @smith4 @smith5 @smith6 @smith7 @smith8  @smith9 @smith10 @smith11 @smith12 @smith13 @smith14 @smith15 @smith16 @smith17 @smith18 @smith19 @smith20 @smith21 @smith22 @smith23 @smith24 @smith25 @smith26 @smith27 @smith28 @smith29 @smith30 @smith31 @smith32 @smith33 @smith34 @smith35 @smith36 @smith37 @smith38 @smith39 @smith40 @smith41 @smith42 @smith43 @smith44 @smith45 @smith46 @smith47 @smith48 @smith49 @smith50 @smith51";
//		String relatedTo = "Martha<break>Vertica<break>Sumo Logic";
//		String priority = "Normal";
//		String status = "In Progress";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + "Litz";
//		String updatedRelatedToNotContainsVerify = "";
//		for (int i = 1; i <= 51; i++) {
//			updatedRelatedToNotContainsVerify = updatedRelatedToNotContainsVerify + "smith" + i + "<break>";
//			if (i == 51)
//				updatedRelatedToNotContainsVerify = updatedRelatedToNotContainsVerify.substring(0,
//						(updatedRelatedToNotContainsVerify.length() - 7));
//		}
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String[] SuggestedTags = "Litz".split("<break>", -1);
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "A" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		ArrayList<String[]> createRecordPopupRecordsList = new ArrayList<String[]>();
//
//		for (int i = 1; i <= 51; i++) {
//
//			String temp = "checked<break>smith" + i
//					+ "<break><AsItIs><break>Contact<break>Maxjonic<existing><break>Create";
//			createRecordPopupRecordsList.add(temp.split("<break>", -1));
//
//		}
//
//		Integer createRecordPopupRecordsListSize = createRecordPopupRecordsList.size();
//		String[][] createNewRecordPopUp = new String[createRecordPopupRecordsListSize][];
//		for (int i = 0; i < createRecordPopupRecordsListSize; i++) {
//			createNewRecordPopUp[i] = createRecordPopupRecordsList.get(i);
//
//		}
//
//		System.out.println(createNewRecordPopUp.length);
//		String contactRecord1 = "smith2";
//		String contactRecord2 = "smith51";
//
//		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, updatedRelatedToNotContainsVerify } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj2, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(contactRecord1, "Contacts", false)) {

					log(LogStatus.INFO,
							"-----Verified Contact named: " + contactRecord1 + " found in Contact Object-----",
							YesNo.No);

				} else {

					log(LogStatus.ERROR, "-----Contact named: " + contactRecord1 + " not found in Contact Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Contact named: " + contactRecord1 + " not found in Contact Object-----");

				}
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(contactRecord2, "Contacts", false)) {

					log(LogStatus.INFO,
							"-----Verified Contact named: " + contactRecord2 + " found in Contact Object-----",
							YesNo.No);

				} else {

					log(LogStatus.ERROR, "-----Contact named: " + contactRecord2 + " not found in Contact Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Contact named: " + contactRecord2 + " not found in Contact Object-----");

				}

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
							"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

						ArrayList<String> verifyRelatedToNotTaggedNegativeResults = BP
								.verifyRelatedToNotTagged(relatedAssociationNotContains);
						if (verifyRelatedToNotTaggedNegativeResults.isEmpty()) {
							log(LogStatus.INFO, "RelatedTo Association Not Tagged has been verified in Note Popup",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
											+ verifyRelatedToNotTaggedNegativeResults,
									YesNo.No);
							sa.assertTrue(false,
									"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
											+ verifyRelatedToNotTaggedNegativeResults);
						}

					} else {
						log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
						sa.assertTrue(false, "-----Activity timeline record is not created-----");
					}

				} else {
					log(LogStatus.ERROR,
							"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName,
							YesNo.No);
					sa.assertTrue(false,
							"Not able to click on Edit button on Subjec Link Popup of Task: " + task1SubjectName);
				}

//				driver.close();
//				driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc096_VerifyWhenUserClicksOnIgnoreButtonOnCreateRecordsPopUpAndAgainTagsTheSameRecordInCaseOfCall(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FirmLegalName11;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject97 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes168;
		String relatedTo = AMNNR_RelatedTo97;
		String priority = AMNNR_AdvancePriority97;
		String status = AMNNR_AdvanceStatus97;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);
		String updatedRelatedToNotContainsVerify = BP.matcherOfAtTheRate(task1Notes);

		String task1NotesVerify = task1Notes.replace("@", "");
		String[] SuggestedTags = AMNNR_SuggestedTag97.split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification97 } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp168.split("<break>", -1) };

		String updatedNotesOfTask = AMNNR_Notes169;
		String[][] task1UpdateBasicSection = { { AMNNR_CallLabel2, updatedNotesOfTask } };

		String[][] updateCreateNewRecordPopUp = { AMNNR_CreateNewRecordPopUp169.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp170.split("<break>", -1),
				AMNNR_CreateNewRecordPopUp171.split("<break>", -1) };

		String updatedRelatedToAfterUpdate = BP.matcherOfAtTheRate(updatedNotesOfTask);
		String updatedRelatedToVerifyAfterUpdate = updatedRelatedToVerify + "<break>" + updatedRelatedToAfterUpdate;

		String[][] task1BasicSectionVerificationAfterUpdate = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, updatedNotesOfTask.replace("@", "") },
				{ AMNNR_CallLabel3, updatedRelatedToVerifyAfterUpdate } };

		String[][] relatedAssociationNotContains = { { AMNNR_CallLabel3, updatedRelatedToNotContainsVerify } };

//		
//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "Acc 1";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 1";
//		String task1Notes = "Had been assigned in task with @jenkins who belongs to @MAVEN firm Acc .";
//		String relatedTo = "Martha<break>Vertica";
//		String priority = "Normal";
//		String status = "In Progress";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//		String updatedRelatedToNotContainsVerify = BP.matcherOfAtTheRate(task1Notes);
//
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String[] SuggestedTags = "Cancel".split("<break>", -1);
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "A" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = {
//				"checked<break>jenkins<break><AsItIs><break>Firm<break><break>Ignore".split("<break>", -1) };
//
//		String updatedNotesOfTask = "Had been assigned in the task with @jenkins @williams who belongs to @MAVEN firm";
//		String[][] task1UpdateBasicSection = { { AMNNR_TaskLabel2, updatedNotesOfTask } };
//
//		String[][] updateCreateNewRecordPopUp = {
//				"checked<break>jenkins<break><AsItIs><break>Contact<break><break>Create".split("<break>", -1),
//				"checked<break>williams<break><AsItIs><break>Contact<break><break>Create".split("<break>", -1),
//				"checked<break>MAVEN<break><AsItIs><break>Contact<break><break>Create".split("<break>", -1) };
//
//		String updatedRelatedToAfterUpdate = BP.matcherOfAtTheRate(updatedNotesOfTask);
//		String updatedRelatedToVerifyAfterUpdate = updatedRelatedToVerify + "<break>" + updatedRelatedToAfterUpdate;
//
//		String[][] task1BasicSectionVerificationAfterUpdate = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, updatedNotesOfTask.replace("@", "") },
//				{ AMNNR_TaskLabel3, updatedRelatedToVerifyAfterUpdate } };
//
//		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, updatedRelatedToNotContainsVerify } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);
					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);
						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							ArrayList<String> verifyRelatedToNotTaggedNegativeResults = BP
									.verifyRelatedToNotTagged(relatedAssociationNotContains);
							if (verifyRelatedToNotTaggedNegativeResults.isEmpty()) {
								log(LogStatus.INFO, "RelatedTo Association Not Tagged has been verified in Note Popup",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
												+ verifyRelatedToNotTaggedNegativeResults,
										YesNo.No);
								sa.assertTrue(false,
										"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
												+ verifyRelatedToNotTaggedNegativeResults);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}
					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);
					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							if (BP.updateActivityTimelineRecord(projectName, task1UpdateBasicSection, null, null, null,
									null, false, null, null, updateCreateNewRecordPopUp, null, null, null)) {
								log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

							} else {
								log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
								sa.assertTrue(false, "Activity timeline record has not Updated");
							}
							CommonLib.refresh(driver);

							ArrayList<String> subjectLinkPopUpNegativeResult2 = BP.verifySubjectLinkPopUpOnIntraction(
									driver, task1SubjectName, task1BasicSectionVerificationAfterUpdate,
									task1AdvancedSection, IconType.Task, PageName.TaskPage);

							if (subjectLinkPopUpNegativeResult2.isEmpty()) {
								log(LogStatus.PASS,
										"------" + task1SubjectName
												+ " record is able to open popup after click on it and verify its data"
												+ "------",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"------" + task1SubjectName + " record link popup is not verified, Reason: "
												+ subjectLinkPopUpNegativeResult2 + "------",
										YesNo.Yes);
								sa.assertTrue(false,
										"------" + task1SubjectName + " record link popup is not verified, Reason: "
												+ subjectLinkPopUpNegativeResult2 + "------");

							}

							if (BP.verifyRecordInTab(projectName, tabObj2, updatedRelatedToAfterUpdate, null)) {
								log(LogStatus.INFO, "Able to Open the Record: " + updatedRelatedToAfterUpdate,
										YesNo.No);

							} else

							{
								log(LogStatus.ERROR, "Not able to Open the Record: " + updatedRelatedToAfterUpdate,
										YesNo.No);
								sa.assertTrue(false, "Not able to Open the Record: " + updatedRelatedToAfterUpdate);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}
					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })
	@Test
	public void AcuityMNNRTc097_VerifyWhenSuggestionBoxOnNotesWhenUserTaggsTheSameRecordWhichIsCreatedThroughCreateRecordPopUpUsingAtTheRateTagging(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FirmLegalName12;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject101 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes172;
		String relatedTo = AMNNR_RelatedTo172;
		String priority = AMNNR_AdvancePriority101;
		String status = AMNNR_AdvanceStatus101;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + AMNNR_RelatedTo173;

		String task1NotesVerify = task1Notes.split("<Section>", -1)[1].replace("@", "");
		String[] SuggestedTags = AMNNR_SuggestedTag172.split("<break>", -1);

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp101.split("<break>") };

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification101 } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "Nexus";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 2";
//		String task1Notes = "@Mack cronto<break>@Cheex<Section>Had been assigned in task with @Mack cronto who belongs to , @Cheex firm also need to check on Maven";
//		String relatedTo = "Martha<break>Vertica<break>jenkins<break>williams";
//		String priority = "High";
//		String status = "Not Started";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + "MAVEN<break>Mack cronto<break>Cheex";
//
//		String task1NotesVerify = task1Notes.split("<Section>", -1)[1].replace("@", "");
//		String[] SuggestedTags = "MAVEN".split("<break>", -1);
//
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "C" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc098_VerifySuggestedTagPopUpWhenTaskIsCreatedAndNotesAreEnteredWithoutUsingAtTheRateWithAllKindOfDataTypeInCaseOfCall(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FirmLegalName15;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject103 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes103;
		String relatedTo = AMNNR_RelatedTo174;
		String priority = AMNNR_AdvancePriority103;
		String status = AMNNR_AdvanceStatus103;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);

		String task1NotesVerify = task1Notes;
		String[] SuggestedTags = AMNNR_SuggestedTag103.split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification103 } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp103.split("<break>") };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "THECARLYLEGROUP";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 4";
//		String task1Notes = "Contact having email id : Dealroom1.3+mst@gmail.com, Phone : 9889767655 , Fax :8767653 enagaged  with firm Maven and having stage of the LOI";
//		String relatedTo = "Martha<break>Vertica<break>jenkins<break>williams";
//		String priority = "High";
//		String status = "Not Started";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//
//		String task1NotesVerify = task1Notes;
//		String[] SuggestedTags = "Cancel".split("<break>", -1);
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "A" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, null, null, null)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc099_WhenMoreThan13RecordsAndMoreThan50ContactsAreSelectedFromSuggestedTagPopUpAndCallIsCreated(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FirmLegalName15;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject104 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes104;
		String relatedTo = AMNNR_RelatedTo175;
		String priority = AMNNR_AdvancePriority104;
		String status = AMNNR_AdvanceStatus104;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);

		String task1NotesVerify = task1Notes.replace("@", "");
		String[] SuggestedTags = AMNNR_SuggestedTag104.split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification104 } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp104.split("<break>") };
		String updatedRelatedToNotContainsVerify = AMNNR_SuggestedTag104;
		String[][] relatedAssociationNotContains = { { AMNNR_CallLabel3, updatedRelatedToNotContainsVerify } };
		String[] updatedSuggestedTags = AMNNR_SuggestedTag105.split("<break>", -1);

		String updatedRelatedToVerifyAfterUpdate = updatedRelatedToVerify + "<break>" + AMNNR_SuggestedTag105;

		String[][] task1BasicSectionVerificationAfterUpdate = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerifyAfterUpdate } };

		String[][][] detailSectionVerifcation = { { { AMNNR_CallLabel1, task1SubjectName } },
				task1BasicSectionVerification, task1AdvancedSection };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "THECARLYLEGROUP";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 5";
//		String task1Notes = AMNNR_Notes33;
//		String relatedTo = "Martha<break>Vertica<break>jenkins<break>williams";
//		String priority = "High";
//		String status = "Not Started";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String[] SuggestedTags = "Con 1<break>con 2<break>con 3<break>con 4<break>con 5<break>con 6<break>con 7<break>con 8<break>con 9<break>con 10<break>con 11<break>con 12<break>con 13<break>con 14<break>con 15<break>con 16<break>con 17<break>con 18<break>con 19<break>con 20<break>con 21<break>con 22<break>con 23<break>con 24<break>con 25<break>con 26<break>con 27<break>con 28<break>con 29<break>con 30<break>con 31<break>con 32<break>con 33<break>con 34<break>con 35<break>con 36<break>con 37<break>con 38<break>con 39<break>con 40<break>con 41<break>con 42<break>con 43<break>con 44<break>con 45<break>con 46<break>con 47<break>con 48<break>con 49<break>con 50<break>Acc 1<break>Acc 2<break>Acc 3<break>Acc 4<break>Acc 5<break>Acc 6<break>Acc 7<break>Acc 8<break>Acc 9<break>Acc 10<break>Acc 11<break>Acc 12<break>Acc 13"
//				.split("<break>", -1);
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "A" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String updatedRelatedToNotContainsVerify = "Con 1<break>con 2<break>con 3<break>con 4<break>con 5<break>con 6<break>con 7<break>con 8<break>con 9<break>con 10<break>con 11<break>con 12<break>con 13<break>con 14<break>con 15<break>con 16<break>con 17<break>con 18<break>con 19<break>con 20<break>con 21<break>con 22<break>con 23<break>con 24<break>con 25<break>con 26<break>con 27<break>con 28<break>con 29<break>con 30<break>con 31<break>con 32<break>con 33<break>con 34<break>con 35<break>con 36<break>con 37<break>con 38<break>con 39<break>con 40<break>con 41<break>con 42<break>con 43<break>con 44<break>con 45<break>con 46<break>con 47<break>con 48<break>con 49<break>con 50<break>Acc 1<break>Acc 2<break>Acc 3<break>Acc 4<break>Acc 5<break>Acc 6<break>Acc 7<break>Acc 8<break>Acc 9<break>Acc 10<break>Acc 11<break>Acc 12<break>Acc 13";
//		String[][] relatedAssociationNotContains = { { AMNNR_TaskLabel3, updatedRelatedToNotContainsVerify } };
//		String[] updatedSuggestedTags = "Con 1<break>con 2<break>con 3<break>con 4<break>con 5<break>con 6<break>con 7<break>con 8<break>con 9<break>con 10<break>con 11<break>con 12<break>con 13<break>con 14<break>con 15<break>con 16<break>con 17<break>con 18<break>con 19<break>con 20<break>con 21<break>con 22<break>con 23<break>con 24<break>con 25<break>con 26<break>con 27<break>con 28<break>con 29<break>con 30<break>con 31<break>con 32<break>con 33<break>con 34<break>con 35<break>con 36<break>con 37<break>con 38<break>con 39<break>con 40<break>con 41<break>con 42<break>con 43<break>con 44<break>con 45<break>con 46<break>Acc 1<break>Acc 2<break>Acc 3<break>Acc 4<break>Acc 5<break>Acc 6<break>Acc 7<break>Acc 8<break>Acc 9<break>Acc 10<break>Acc 11"
//				.split("<break>", -1);
//
//		String updatedRelatedToVerifyAfterUpdate = updatedRelatedToVerify + "<break>"
//				+ "Con 1<break>con 2<break>con 3<break>con 4<break>con 5<break>con 6<break>con 7<break>con 8<break>con 9<break>con 10<break>con 11<break>con 12<break>con 13<break>con 14<break>con 15<break>con 16<break>con 17<break>con 18<break>con 19<break>con 20<break>con 21<break>con 22<break>con 23<break>con 24<break>con 25<break>con 26<break>con 27<break>con 28<break>con 29<break>con 30<break>con 31<break>con 32<break>con 33<break>con 34<break>con 35<break>con 36<break>con 37<break>con 38<break>con 39<break>con 40<break>con 41<break>con 42<break>con 43<break>con 44<break>con 45<break>con 46<break>Acc 1<break>Acc 2<break>Acc 3<break>Acc 4<break>Acc 5<break>Acc 6<break>Acc 7<break>Acc 8<break>Acc 9<break>Acc 10<break>Acc 11";
//
//		String[][] task1BasicSectionVerificationAfterUpdate = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerifyAfterUpdate } };
//
//		String[][][] detailSectionVerifcation = { { { AMNNR_TaskLabel1, task1SubjectName } },
//				task1BasicSectionVerification, task1AdvancedSection };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, null, null,
					detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);
					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);
						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							ArrayList<String> verifyRelatedToNotTaggedNegativeResults = BP
									.verifyRelatedToNotTagged(relatedAssociationNotContains);
							if (verifyRelatedToNotTaggedNegativeResults.isEmpty()) {
								log(LogStatus.INFO, "RelatedTo Association Not Tagged has been verified in Note Popup",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
												+ verifyRelatedToNotTaggedNegativeResults,
										YesNo.No);
								sa.assertTrue(false,
										"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
												+ verifyRelatedToNotTaggedNegativeResults);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}
					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);
						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							if (BP.updateActivityTimelineRecord(projectName, null, null, null, updatedSuggestedTags,
									null, false, null, null, null, null, null, null)) {
								log(LogStatus.PASS, "Activity timeline record has been Updated", YesNo.No);

							} else {
								log(LogStatus.FAIL, "Activity timeline record has not Updated", YesNo.No);
								sa.assertTrue(false, "Activity timeline record has not Updated");
							}
							CommonLib.refresh(driver);

							ArrayList<String> subjectLinkPopUpNegativeResult2 = BP.verifySubjectLinkPopUpOnIntraction(
									driver, task1SubjectName, task1BasicSectionVerificationAfterUpdate,
									task1AdvancedSection, IconType.Task, PageName.TaskPage);

							if (subjectLinkPopUpNegativeResult2.isEmpty()) {
								log(LogStatus.PASS,
										"------" + task1SubjectName
												+ " record is able to open popup after click on it and verify its data"
												+ "------",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"------" + task1SubjectName + " record link popup is not verified, Reason: "
												+ subjectLinkPopUpNegativeResult2 + "------",
										YesNo.Yes);
								sa.assertTrue(false,
										"------" + task1SubjectName + " record link popup is not verified, Reason: "
												+ subjectLinkPopUpNegativeResult2 + "------");

							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}
					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc100_VerifyWhenCallIsCreatedWith1Deal1FundraisingAnd7ContactsAreTagged(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FirmLegalName15;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject106 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes176;
		String relatedTo = AMNNR_RelatedTo176;
		String priority = AMNNR_SuggestedTag176;
		String status = AMNNR_AdvanceStatus106;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);

		String task1NotesVerify = task1Notes.replace("@", "");
		String[] SuggestedTags = AMNNR_SuggestedTag106.split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification106 } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = null;

		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp176.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp177.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp178.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp179.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp180.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp181.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp182.split("<break>", -1) };

		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup176.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup177.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup178.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup179.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup180.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup181.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup182.split("<break>", -1) };

		String[][][] detailSectionVerifcation = { { { AMNNR_CallLabel1, task1SubjectName } },
				task1BasicSectionVerification, task1AdvancedSection };

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = "THECARLYLEGROUP";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("1"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 6";
//		String task1Notes = "Had a good talk with smith1 smith2 smith3 smith4 smith5 about vitara deal and FCR 1";
//		String relatedTo = "Martha<break>Vertica<break>jenkins";
//		String priority = "High";
//		String status = "Not Started";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String[] SuggestedTags = "smith1<break>smith2<break>smith3<break>smith4<break>smith5<break>Vitara Deal<break>FCR 1"
//				.split("<break>", -1);
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "B" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = null;
//
//		String[][] addContactsToDealTeamPopUp = { "checked<break>smith1<break>Partner<break>Add".split("<break>", -1),
//				"checked<break>smith2<break>Vice President<break>Add".split("<break>", -1),
//				"checked<break>smith3<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>smith4<break>Accountant<break>Add".split("<break>", -1),
//				"checked<break>smith5<break>Attorney<break>Add".split("<break>", -1),
//				"checked<break>Martha<break>Banker<break>Add".split("<break>", -1),
//				"checked<break>jenkins<break>Consultant<break>Add".split("<break>", -1) };
//
//		String[][] addContactsToFundraisingObjectPopup = {
//				"checked<break>smith1<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>smith2<break>Business User<break>Add".split("<break>", -1),
//				"checked<break>smith3<break>Decision Maker<break>Add".split("<break>", -1),
//				"checked<break>smith4<break>Evaluator<break>Add".split("<break>", -1),
//				"checked<break>smith5<break>Executive Sponsor<break>Add".split("<break>", -1),
//				"checked<break>Martha<break>Gatekeeper<break>Add".split("<break>", -1),
//				"checked<break>jenkins<break>Other<break>Add".split("<break>", -1) };
//
//		String[][][] detailSectionVerifcation = { { { AMNNR_TaskLabel1, task1SubjectName } },
//				task1BasicSectionVerification, task1AdvancedSection };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		List<String> beforeCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
		List<String> beforeCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
				"Fundraising Contacts");

		log(LogStatus.INFO, "Before Deal Team Records: " + beforeCreateDealTeamList, YesNo.No);
		log(LogStatus.INFO, "Before Deal Team Records Size: " + beforeCreateDealTeamList.size(), YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records: " + beforeCreateFundraisingContactList, YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records Size: " + beforeCreateFundraisingContactList.size(),
				YesNo.No);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);
					List<String> afterCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
					List<String> afterCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
							"Fundraising Contacts");

					log(LogStatus.INFO, "After Deal Team Records: " + afterCreateDealTeamList, YesNo.No);
					log(LogStatus.INFO, "After Deal Team Records Size: " + afterCreateDealTeamList.size(), YesNo.No);
					log(LogStatus.INFO, "After Fundraising Contacts Records: " + afterCreateFundraisingContactList,
							YesNo.No);
					log(LogStatus.INFO,
							"After Fundraising Contacts Records Size: " + afterCreateFundraisingContactList.size(),
							YesNo.No);

					List<String> dealTeamDifference = CommonLib.getDifference(afterCreateDealTeamList,
							beforeCreateDealTeamList);
					List<String> fundraisingContactDifference = CommonLib
							.getDifference(afterCreateFundraisingContactList, beforeCreateFundraisingContactList);

					if (dealTeamDifference.size() == 7) {

						log(LogStatus.INFO, "Same no. of Deal Team Created and i.e. " + dealTeamDifference.size(),
								YesNo.No);
					} else {
						log(LogStatus.ERROR, "No. of Deal Team Created not matched, Expected size: "
								+ addContactsToDealTeamPopUp.length + " but Actual: " + dealTeamDifference.size(),
								YesNo.Yes);
						BaseLib.sa.assertTrue(false, "No. of Deal Team Created not matched, Expected size: "
								+ addContactsToDealTeamPopUp.length + " but Actual: " + dealTeamDifference.size());
					}

					if (fundraisingContactDifference.size() == 7) {

						log(LogStatus.INFO, "Same no. of Fundraising Contacts Created and i.e. "
								+ fundraisingContactDifference.size(), YesNo.No);
					} else {
						log(LogStatus.ERROR,
								"No. of Fundraising Contacts Created not matched, Expected size: "
										+ addContactsToFundraisingObjectPopup.length + " but Actual: "
										+ fundraisingContactDifference.size(),
								YesNo.Yes);
						BaseLib.sa.assertTrue(false,
								"No. of Fundraising Contacts Created not matched, Expected size: "
										+ addContactsToFundraisingObjectPopup.length + " but Actual: "
										+ fundraisingContactDifference.size());
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
//					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })
	@Test
	public void AcuityMNNRTc101_VerifyWhenCallIsCreatedWith3Deal4FundraisingAnd10ContactsAreTagged(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FirmLegalName15;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject113 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes113;
		String relatedTo = AMNNR_RelatedTo183;
		String priority = AMNNR_AdvancePriority113;
		String status = AMNNR_AdvanceStatus113;
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);

		String task1NotesVerify = task1Notes.replace("@", "");
		String[] SuggestedTags = AMNNR_SuggestedTag113.split("<break>", -1);

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification113 } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp113.split("<break>") };

		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp183.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp184.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp185.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp186.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp187.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp188.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp189.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp190.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp191.split("<break>", -1),
				AMNNR_AddContactsToDealTeamPopUp192.split("<break>", -1) };

		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup183.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup184.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup185.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup186.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup187.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup188.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup189.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup190.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup191.split("<break>", -1),
				AMNNR_AddContactsToFundraisingPopup192.split("<break>", -1) };

		String[][][] detailSectionVerifcation = null;

//		String task1ButtonName = AMNNR_ActivityType59;
//		String recordName = AMNNR_FirmLegalName15;
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 7";
//		String task1Notes = "";
//		String relatedTo = "Martha<break>Vertica<break>jenkins<break>smith1<break>smith2<break>smith3<break>smith4<break>smith5<break>smith8<break>smith9<break>smith10<break>Vitara Deal<break>Breeza Deal<break>Conved Deal<break>FCR 1<break>FCR 2<break>FCR 3<break>FCR 4";
//		String priority = "High";
//		String status = "Completed";
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//
//		String[][] task1BasicSection = { { AMNNR_TaskLabel1, task1SubjectName }, { AMNNR_TaskLabel2, task1Notes },
//				{ AMNNR_TaskLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_TaskLabel4, getAdvanceDueDate }, { AMNNR_TaskLabel5, status },
//				{ AMNNR_TaskLabel6, priority }, { AMNNR_TaskLabel8, "A" } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_TaskLabel1, task1SubjectName },
//				{ AMNNR_TaskLabel2, task1NotesVerify }, { AMNNR_TaskLabel3, updatedRelatedToVerify } };
//
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//
//		String[][] addContactsToDealTeamPopUp = { "checked<break>smith1<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>smith2<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>smith3<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>smith4<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>smith5<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>smith8<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>smith9<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>smith10<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>Martha<break>Analyst<break>Add".split("<break>", -1),
//				"checked<break>jenkins<break>Analyst<break>Add".split("<break>", -1) };
//
//		String[][] addContactsToFundraisingObjectPopup = {
//				"checked<break>smith1<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>smith2<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>smith3<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>smith4<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>smith5<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>smith8<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>smith9<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>smith10<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>Martha<break>Advisor<break>Add".split("<break>", -1),
//				"checked<break>jenkins<break>Advisor<break>Add".split("<break>", -1) };
//
//		String[][][] detailSectionVerifcation = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		List<String> beforeCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
		List<String> beforeCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
				"Fundraising Contacts");

		log(LogStatus.INFO, "Before Deal Team Records: " + beforeCreateDealTeamList, YesNo.No);
		log(LogStatus.INFO, "Before Deal Team Records Size: " + beforeCreateDealTeamList.size(), YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records: " + beforeCreateFundraisingContactList, YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records Size: " + beforeCreateFundraisingContactList.size(),
				YesNo.No);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj1, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);
				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);
					List<String> afterCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
					List<String> afterCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
							"Fundraising Contacts");

					log(LogStatus.INFO, "After Deal Team Records: " + afterCreateDealTeamList, YesNo.No);
					log(LogStatus.INFO, "After Deal Team Records Size: " + afterCreateDealTeamList.size(), YesNo.No);
					log(LogStatus.INFO, "After Fundraising Contacts Records: " + afterCreateFundraisingContactList,
							YesNo.No);
					log(LogStatus.INFO,
							"After Fundraising Contacts Records Size: " + afterCreateFundraisingContactList.size(),
							YesNo.No);

					List<String> dealTeamDifference = CommonLib.getDifference(afterCreateDealTeamList,
							beforeCreateDealTeamList);
					List<String> fundraisingContactDifference = CommonLib
							.getDifference(afterCreateFundraisingContactList, beforeCreateFundraisingContactList);

					if (dealTeamDifference.size() == 30) {

						log(LogStatus.INFO, "Same no. of Deal Team Created and i.e. " + dealTeamDifference.size(),
								YesNo.No);
					} else {
						log(LogStatus.ERROR, "No. of Deal Team Created not matched, Expected size: " + 30
								+ " but Actual: " + dealTeamDifference.size(), YesNo.Yes);
						BaseLib.sa.assertTrue(false, "No. of Deal Team Created not matched, Expected size: " + 30
								+ " but Actual: " + dealTeamDifference.size());
					}

					if (fundraisingContactDifference.size() == 40) {

						log(LogStatus.INFO, "Same no. of Fundraising Contacts Created and i.e. "
								+ fundraisingContactDifference.size(), YesNo.No);
					} else {
						log(LogStatus.ERROR, "No. of Fundraising Contacts Created not matched, Expected size: " + 40
								+ " but Actual: " + fundraisingContactDifference.size(), YesNo.Yes);
						BaseLib.sa.assertTrue(false, "No. of Fundraising Contacts Created not matched, Expected size: "
								+ 40 + " but Actual: " + fundraisingContactDifference.size());
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
//					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc102_VerifyAddContactsToDealTeamAndAddToFundraisingContactsPopUpWhenAddingAlreadyAddedContactToDealTeamAndFundraisingContactsInCaseOfCall(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1SubjectName = AMNNR_Subject113 + " " + AMNNR_ActivityType54;

		String[] SuggestedTags = AMNNR_SuggestedTag123.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp123.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp123.split("<break>") };
		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup123.split("<break>") };

		String[][] task1BasicSection = null;

		String[][] task1AdvancedSection = null;

		String[][][] detailSectionVerifcation = null;

//		String task1SubjectName = "Task 7";
//
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = { "addContactsToDealTeamPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToFundraisingObjectPopup = {
//				"addContactsToFundraisingPopUpShouldNotThere".split("<break>") };
//
//		String[][] task1BasicSection = null;
//
//		String[][] task1AdvancedSection = null;
//
//		String[][][] detailSectionVerifcation = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		CommonLib.refresh(driver);
		lp.clickOnTab(projectName, TabName.HomeTab);
		if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

			log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
					YesNo.No);

			if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
					"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
				log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
				if (BP.updateActivityTimelineRecord(projectName, task1BasicSection, task1AdvancedSection, null,
						SuggestedTags, null, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
						addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
					log(LogStatus.PASS,
							"-----Activity timeline record has been updated for Subject: " + task1SubjectName + "-----",
							YesNo.No);

				} else {
					log(LogStatus.FAIL,
							"-----Activity timeline record is not updated for Subject: " + task1SubjectName + "-----",
							YesNo.No);
					sa.assertTrue(false,
							"-----Activity timeline record is not updated for Subject: " + task1SubjectName + "-----");
				}

			} else {
				log(LogStatus.ERROR,
						"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName,
						YesNo.No);
				sa.assertTrue(false,
						"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName);
			}

//			driver.close();
//			driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

		} else {

			log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----", YesNo.Yes);
			BaseLib.sa.assertTrue(false, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc103_VerifyWhenCallIsCreatedWithDealsAndFundraisingTaggedAndNoContactsAreTaggedContactsTaggedWhileUpdatingTheTask(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_DealName2;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject124 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes124;
		String relatedTo = AMNNR_RelatedTo124;
		String priority = AMNNR_AdvancePriority124;
		String status = AMNNR_AdvanceStatus124;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification124 } };

		String updatedRelatedTo = AMNNR_RelatedTo193;

		String[] SuggestedTags = AMNNR_SuggestedTag124.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp124.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp124.split("<break>") };
		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup124.split("<break>") };

		String[][] updateTask1BasicSection = { { AMNNR_CallLabel3, updatedRelatedTo } };

		String[][] updateTask1AdvancedSection = null;

		String[][][] detailSectionVerifcation = null;

//		String task1ButtonName = AMNNR_ActivityType142;
//		String recordName = "Vitara Deal";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 8";
//		String task1Notes = "";
//		String relatedTo = "Vertica<break>Ispro Deal<break>FCR 5";
//		String priority = "High";
//		String status = "Completed";
//
//		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
//				{ AMNNR_CallLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate }, { AMNNR_CallLabel5, status },
//				{ AMNNR_CallLabel6, priority }, { AMNNR_CallLabel8, "A" } };
//
//		String updatedRelatedTo = "smith11<break>smith12";
//
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = { "addContactsToDealTeamPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToFundraisingObjectPopup = {
//				"addContactsToFundraisingPopUpShouldNotThere".split("<break>") };
//
//		String[][] updateTask1BasicSection = { { AMNNR_CallLabel3, updatedRelatedTo } };
//
//		String[][] updateTask1AdvancedSection = null;
//
//		String[][][] detailSectionVerifcation = null;
//		

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, "Deals", recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);

				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
							"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
						if (BP.updateActivityTimelineRecord(projectName, updateTask1BasicSection,
								updateTask1AdvancedSection, null, SuggestedTags, null, false, null, null,
								createNewRecordPopUp, addContactsToDealTeamPopUp, addContactsToFundraisingObjectPopup,
								detailSectionVerifcation)) {
							log(LogStatus.PASS, "-----Activity timeline record has been updated for Subject: "
									+ task1SubjectName + "-----", YesNo.No);

						} else {
							log(LogStatus.FAIL, "-----Activity timeline record is not updated for Subject: "
									+ task1SubjectName + "-----", YesNo.No);
							sa.assertTrue(false, "-----Activity timeline record is not updated for Subject: "
									+ task1SubjectName + "-----");
						}

					} else {
						log(LogStatus.ERROR,
								"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName,
								YesNo.No);
						sa.assertTrue(false,
								"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}
			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc104_VerifyWhenCallIsCreatedWithDealsAndFundraisingTaggedAndClickedOnCancelForAddContactsToDealTeamAndAddToFundraisingContactsPopUp(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_DealName2;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("4"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject126 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes126;
		String relatedTo = AMNNR_RelatedTo194;
		String priority = AMNNR_AdvancePriority126;
		String status = AMNNR_AdvanceStatus126;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification126 } };

		String[] SuggestedTags = AMNNR_SuggestedTag126.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp126.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp194.split("<break>", -1) };

		String[][] addContactsToFundraisingObjectPopup = {
				AMNNR_AddContactsToFundraisingPopup194.split("<break>", -1) };

		String[][][] detailSectionVerifcation = null;

//		String task1ButtonName = AMNNR_ActivityType142;
//		String recordName = "Vitara Deal";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("4"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 9";
//		String task1Notes = "";
//		String relatedTo = "Vertica<break>Ispro Deal<break>FCR 4<break>smith15";
//		String priority = "Normal";
//		String status = "Not Started";
//
//		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
//				{ AMNNR_CallLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate }, { AMNNR_CallLabel5, status },
//				{ AMNNR_CallLabel6, priority }, { AMNNR_CallLabel8, "A" } };
//
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = {
//				"checked<break>smith15<break>Partner<break>Cancel".split("<break>", -1) };
//
//		String[][] addContactsToFundraisingObjectPopup = {
//				"checked<break>smith15<break>Advisor<break>Cancel".split("<break>", -1) };
//
//		String[][][] detailSectionVerifcation = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		List<String> beforeCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
		List<String> beforeCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
				"Fundraising Contacts");

		log(LogStatus.INFO, "Before Deal Team Records: " + beforeCreateDealTeamList, YesNo.No);
		log(LogStatus.INFO, "Before Deal Team Records Size: " + beforeCreateDealTeamList.size(), YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records: " + beforeCreateFundraisingContactList, YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records Size: " + beforeCreateFundraisingContactList.size(),
				YesNo.No);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, "Deals", recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);

				List<String> afterCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
				List<String> afterCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
						"Fundraising Contacts");

				log(LogStatus.INFO, "After Deal Team Records: " + afterCreateDealTeamList, YesNo.No);
				log(LogStatus.INFO, "After Deal Team Records Size: " + afterCreateDealTeamList.size(), YesNo.No);
				log(LogStatus.INFO, "After Fundraising Contacts Records: " + afterCreateFundraisingContactList,
						YesNo.No);
				log(LogStatus.INFO,
						"After Fundraising Contacts Records Size: " + afterCreateFundraisingContactList.size(),
						YesNo.No);

				List<String> dealTeamDifference = CommonLib.getDifference(afterCreateDealTeamList,
						beforeCreateDealTeamList);
				List<String> fundraisingContactDifference = CommonLib.getDifference(afterCreateFundraisingContactList,
						beforeCreateFundraisingContactList);

				if (dealTeamDifference.size() == 0) {

					log(LogStatus.INFO, "Same no. of Deal Team Created and i.e. " + dealTeamDifference.size(),
							YesNo.No);
				} else {
					log(LogStatus.ERROR, "No. of Deal Team Created not matched, Expected size: " + 0 + " but Actual: "
							+ dealTeamDifference.size(), YesNo.Yes);
					BaseLib.sa.assertTrue(false, "No. of Deal Team Created not matched, Expected size: " + 0
							+ " but Actual: " + dealTeamDifference.size());
				}

				if (fundraisingContactDifference.size() == 0) {

					log(LogStatus.INFO,
							"Same no. of Fundraising Contacts Created and i.e. " + fundraisingContactDifference.size(),
							YesNo.No);
				} else {
					log(LogStatus.ERROR, "No. of Fundraising Contacts Created not matched, Expected size: " + 0
							+ " but Actual: " + fundraisingContactDifference.size(), YesNo.Yes);
					BaseLib.sa.assertTrue(false, "No. of Fundraising Contacts Created not matched, Expected size: " + 0
							+ " but Actual: " + fundraisingContactDifference.size());
				}

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc105_VerifyAddContactsToDealTeamAndAddToFundraisingContactsPopUpWhenSameTaskIsEditedAndNewDealIsTaggedAndClickedOnSave(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1SubjectName = AMNNR_Subject126 + " " + AMNNR_ActivityType54;

		String[] SuggestedTags = AMNNR_SuggestedTag127.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp127.split("<break>") };
		String[][] addContactsToDealTeamPopUp1 = { AMNNR_AddContactsToDealTeamPopUp195.split("<break>", -1) };

		String[][] addContactsToFundraisingObjectPopup1 = null;

		String[][] addContactsToDealTeamPopUp2 = null;

		String[][] addContactsToFundraisingObjectPopup2 = {
				AMNNR_AddContactsToFundraisingPopup195.split("<break>", -1) };

		String[][][] detailSectionVerifcation = null;

		String updatedRelatedTo1 = AMNNR_RelatedTo127;
		String[][] updateTask1BasicSection1 = { { AMNNR_CallLabel3, updatedRelatedTo1 } };

		String updatedRelatedTo2 = AMNNR_RelatedTo128;
		String[][] updateTask1BasicSection2 = { { AMNNR_CallLabel3, updatedRelatedTo2 } };

		String[][] updateTask1AdvancedSection = null;

//		String task1SubjectName = "Task 9";
//
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp1 = {
//				"checked<break>smith15<break>Analyst<break>Add".split("<break>", -1) };
//
//		String[][] addContactsToFundraisingObjectPopup1 = null;
//
//		String[][] addContactsToDealTeamPopUp2 = null;
//
//		String[][] addContactsToFundraisingObjectPopup2 = {
//				"checked<break>smith15<break>Advisor<break>Add".split("<break>", -1) };
//
//		String[][][] detailSectionVerifcation = null;
//
//		String updatedRelatedTo1 = "Breeza Deal";
//		String[][] updateTask1BasicSection1 = { { AMNNR_CallLabel3, updatedRelatedTo1 } };
//
//		String updatedRelatedTo2 = "FCR 1";
//		String[][] updateTask1BasicSection2 = { { AMNNR_CallLabel3, updatedRelatedTo2 } };
//
//		String[][] updateTask1AdvancedSection = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		List<String> beforeCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
		List<String> beforeCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
				"Fundraising Contacts");

		log(LogStatus.INFO, "Before Deal Team Records: " + beforeCreateDealTeamList, YesNo.No);
		log(LogStatus.INFO, "Before Deal Team Records Size: " + beforeCreateDealTeamList.size(), YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records: " + beforeCreateFundraisingContactList, YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records Size: " + beforeCreateFundraisingContactList.size(),
				YesNo.No);

		CommonLib.refresh(driver);
		lp.clickOnTab(projectName, TabName.HomeTab);
		if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

			log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
					YesNo.No);

			if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
					"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
				log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
				if (BP.updateActivityTimelineRecord(projectName, updateTask1BasicSection1, updateTask1AdvancedSection,
						null, SuggestedTags, null, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp1,
						addContactsToFundraisingObjectPopup1, detailSectionVerifcation)) {
					log(LogStatus.PASS,
							"-----Activity timeline record has been updated for Subject: " + task1SubjectName + "-----",
							YesNo.No);
					List<String> afterCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");

					log(LogStatus.INFO, "After Deal Team Records: " + afterCreateDealTeamList, YesNo.No);
					log(LogStatus.INFO, "After Deal Team Records Size: " + afterCreateDealTeamList.size(), YesNo.No);

					List<String> dealTeamDifference = CommonLib.getDifference(afterCreateDealTeamList,
							beforeCreateDealTeamList);
					if (dealTeamDifference.size() == 1) {

						log(LogStatus.INFO, "Same no. of Deal Team Created and i.e. " + dealTeamDifference.size(),
								YesNo.No);
					} else {
						log(LogStatus.ERROR, "No. of Deal Team Created not matched, Expected size: " + 1
								+ " but Actual: " + dealTeamDifference.size(), YesNo.Yes);
						BaseLib.sa.assertTrue(false, "No. of Deal Team Created not matched, Expected size: " + 1
								+ " but Actual: " + dealTeamDifference.size());
					}

				} else {
					log(LogStatus.FAIL,
							"-----Activity timeline record is not updated for Subject: " + task1SubjectName + "-----",
							YesNo.No);
					sa.assertTrue(false,
							"-----Activity timeline record is not updated for Subject: " + task1SubjectName + "-----");
				}

			} else {
				log(LogStatus.ERROR,
						"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName,
						YesNo.No);
				sa.assertTrue(false,
						"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName);
			}

//			driver.close();
//			driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

		} else {

			log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----", YesNo.Yes);
			BaseLib.sa.assertTrue(false, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

		}

		CommonLib.refresh(driver);
		lp.clickOnTab(projectName, TabName.HomeTab);
		if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

			log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
					YesNo.No);

			if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
					"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
				log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
				if (BP.updateActivityTimelineRecord(projectName, updateTask1BasicSection2, updateTask1AdvancedSection,
						null, SuggestedTags, null, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp2,
						addContactsToFundraisingObjectPopup2, detailSectionVerifcation)) {
					log(LogStatus.PASS,
							"-----Activity timeline record has been updated for Subject: " + task1SubjectName + "-----",
							YesNo.No);
					List<String> afterCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
							"Fundraising Contacts");

					log(LogStatus.INFO, "After Fundraising Contacts Records: " + afterCreateFundraisingContactList,
							YesNo.No);
					log(LogStatus.INFO,
							"After Fundraising Contacts Records Size: " + afterCreateFundraisingContactList.size(),
							YesNo.No);

					List<String> fundraisingContactDifference = CommonLib
							.getDifference(afterCreateFundraisingContactList, beforeCreateFundraisingContactList);

					if (fundraisingContactDifference.size() == 1) {

						log(LogStatus.INFO, "Same no. of Fundraising Contacts Created and i.e. "
								+ fundraisingContactDifference.size(), YesNo.No);
					} else {
						log(LogStatus.ERROR, "No. of Fundraising Contacts Created not matched, Expected size: " + 1
								+ " but Actual: " + fundraisingContactDifference.size(), YesNo.Yes);
						BaseLib.sa.assertTrue(false, "No. of Fundraising Contacts Created not matched, Expected size: "
								+ 1 + " but Actual: " + fundraisingContactDifference.size());
					}

				} else {
					log(LogStatus.FAIL,
							"-----Activity timeline record is not updated for Subject: " + task1SubjectName + "-----",
							YesNo.No);
					sa.assertTrue(false,
							"-----Activity timeline record is not updated for Subject: " + task1SubjectName + "-----");
				}

			} else {
				log(LogStatus.ERROR,
						"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName,
						YesNo.No);
				sa.assertTrue(false,
						"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName);
			}

//			driver.close();
//			driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

		} else {

			log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----", YesNo.Yes);
			BaseLib.sa.assertTrue(false, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc106_VerifyWhenTheTaggedDealAndFundraisingIsRemovedCheckTheImpactOnDealTeamAndFundraisingContactPage(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1SubjectName = AMNNR_Subject126 + " " + AMNNR_ActivityType54;

		String[] SuggestedTags = AMNNR_SuggestedTag129.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp129.split("<break>") };
		String[][] addContactsToDealTeamPopUp1 = null;

		String[][] addContactsToFundraisingObjectPopup1 = null;

		String[][][] detailSectionVerifcation = null;

		String updatedRelatedTo1 = AMNNR_RelatedTo196;
		String[][] updateTask1BasicSection1 = { { AMNNR_CallLabel3, updatedRelatedTo1 } };

		String[][] updateTask1AdvancedSection = null;
		String[] updatedRemoveRelatedAssociation = AMNNR_RelatedTo130.split("<break>", -1);

//		String task1SubjectName = "Task 9";
//
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp1 = null;
//
//		String[][] addContactsToFundraisingObjectPopup1 = null;
//
//		String[][][] detailSectionVerifcation = null;
//
//		String updatedRelatedTo1 = "smith16";
//		String[][] updateTask1BasicSection1 = { { AMNNR_CallLabel3, updatedRelatedTo1 } };
//
//		String[][] updateTask1AdvancedSection = null;
//		String[] updatedRemoveRelatedAssociation = "Breeza Deal<break>FCR 1".split("<break>", -1);
//		

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		List<String> beforeCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
		List<String> beforeCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
				"Fundraising Contacts");

		log(LogStatus.INFO, "Before Deal Team Records: " + beforeCreateDealTeamList, YesNo.No);
		log(LogStatus.INFO, "Before Deal Team Records Size: " + beforeCreateDealTeamList.size(), YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records: " + beforeCreateFundraisingContactList, YesNo.No);
		log(LogStatus.INFO, "Before Fundraising Contacts Records Size: " + beforeCreateFundraisingContactList.size(),
				YesNo.No);

		CommonLib.refresh(driver);
		lp.clickOnTab(projectName, TabName.HomeTab);
		if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

			log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
					YesNo.No);

			if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
					"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
				log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
				if (BP.updateActivityTimelineRecord(projectName, updateTask1BasicSection1, updateTask1AdvancedSection,
						null, SuggestedTags, updatedRemoveRelatedAssociation, false, null, null, createNewRecordPopUp,
						addContactsToDealTeamPopUp1, addContactsToFundraisingObjectPopup1, detailSectionVerifcation)) {
					log(LogStatus.PASS,
							"-----Activity timeline record has been updated for Subject: " + task1SubjectName + "-----",
							YesNo.No);
					List<String> afterCreateDealTeamList = BP.navigateAndFindRecordsInTab(projectName, "Deal Team");
					List<String> afterCreateFundraisingContactList = BP.navigateAndFindRecordsInTab(projectName,
							"Fundraising Contacts");

					log(LogStatus.INFO, "After Deal Team Records: " + afterCreateDealTeamList, YesNo.No);
					log(LogStatus.INFO, "After Deal Team Records Size: " + afterCreateDealTeamList.size(), YesNo.No);
					log(LogStatus.INFO, "After Fundraising Contacts Records: " + afterCreateFundraisingContactList,
							YesNo.No);
					log(LogStatus.INFO,
							"After Fundraising Contacts Records Size: " + afterCreateFundraisingContactList.size(),
							YesNo.No);

					List<String> dealTeamDifference = CommonLib.getDifference(afterCreateDealTeamList,
							beforeCreateDealTeamList);

					List<String> fundraisingContactDifference = CommonLib
							.getDifference(afterCreateFundraisingContactList, beforeCreateFundraisingContactList);

					if (dealTeamDifference.size() == 0) {

						log(LogStatus.INFO, "Same no. of Deal Team Created and i.e. " + dealTeamDifference.size(),
								YesNo.No);
					} else {
						log(LogStatus.ERROR, "No. of Deal Team Created not matched, Expected size: " + 0
								+ " but Actual: " + dealTeamDifference.size(), YesNo.Yes);
						BaseLib.sa.assertTrue(false, "No. of Deal Team Created not matched, Expected size: " + 0
								+ " but Actual: " + dealTeamDifference.size());
					}

					if (fundraisingContactDifference.size() == 0) {

						log(LogStatus.INFO, "Same no. of Fundraising Contacts Created and i.e. "
								+ fundraisingContactDifference.size(), YesNo.No);
					} else {
						log(LogStatus.ERROR, "No. of Fundraising Contacts Created not matched, Expected size: " + 0
								+ " but Actual: " + fundraisingContactDifference.size(), YesNo.Yes);
						BaseLib.sa.assertTrue(false, "No. of Fundraising Contacts Created not matched, Expected size: "
								+ 0 + " but Actual: " + fundraisingContactDifference.size());
					}

				} else {
					log(LogStatus.FAIL,
							"-----Activity timeline record is not updated for Subject: " + task1SubjectName + "-----",
							YesNo.No);
					sa.assertTrue(false,
							"-----Activity timeline record is not updated for Subject: " + task1SubjectName + "-----");
				}

			} else {
				log(LogStatus.ERROR,
						"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName,
						YesNo.No);
				sa.assertTrue(false,
						"Not able to click on Edit button on Subject Link Popup of Task: " + task1SubjectName);
			}

//			driver.close();
//			driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());

		} else {

			log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----", YesNo.Yes);
			BaseLib.sa.assertTrue(false, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc107_VerifyWhenUserDoesNotSelectAnyContactAndClicksOnAddButtonFromAddContactsToDealTeamAndAddToFundraisingContactsPopUpInCaseOfCall(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FundraisingNames2;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject131 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes197;
		String relatedTo = AMNNR_RelatedTo197;
		String priority = AMNNR_AdvancePriority131;
		String status = AMNNR_AdvanceStatus131;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification131 } };

		String[] SuggestedTags = AMNNR_SuggestedTag131.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp131.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp131.split("<break>", -1) };

		String[][] addContactsToFundraisingObjectPopup = {
				AMNNR_AddContactsToFundraisingPopup131.split("<break>", -1) };

		String[][][] detailSectionVerifcation = null;

//		String task1ButtonName = AMNNR_ActivityType142;
//		String recordName = "FCR 1";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("0"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 11";
//		String task1Notes = "Had a good talk with smith1 smith2 vitara deal and FCR 1";
//		String relatedTo = "Martha<break>Vertica<break>jenkins";
//		String priority = "High";
//		String status = "Not Started";
//
//		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
//				{ AMNNR_CallLabel3, relatedTo } };
//
//		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate }, { AMNNR_CallLabel5, status },
//				{ AMNNR_CallLabel6, priority }, { AMNNR_CallLabel8, "B" } };
//
//		String[] SuggestedTags = "Vitara Deal<break>FCR 2".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = {
//				"<break>Martha<break><break>Add<Select atleast a record>".split("<break>", -1) };
//
//		String[][] addContactsToFundraisingObjectPopup = {
//				"<break>Martha<break><break>Add<Select atleast a record>".split("<break>", -1) };
//
//		String[][][] detailSectionVerifcation = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, "Fundraisings", recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

			} else {
				log(LogStatus.FAIL, "-----Activity timeline record is not created-----", YesNo.No);
				sa.assertTrue(false, "-----Activity timeline record is not created-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc108_VerifyWhenATaskIsCreatedWithTheContactsTaggedWhichIsAlreadyADealContactAndAFundraisingContactAndItsImpactOnRespectiveDealAndFundraisingWhenTheDealAndFundraisingAreActiveInCaseOfCall(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FundNames2;
		String dealRecordName = AMNNR_DealName2;
		String fundraisingRecordName = AMNNR_FundraisingNames2;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("10"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject132 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes198;
		String relatedTo = AMNNR_RelatedTo198;
		String priority = AMNNR_AdvancePriority132;
		String status = AMNNR_AdvanceStatus132;
		String task1NotesVerify = task1Notes.replace("@", "");
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + AMNNR_RelatedTo133;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification132 } };

		String[] SuggestedTags = AMNNR_SuggestedTag132.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp132.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp132.split("<break>") };
		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup132.split("<break>") };

		String[][][] detailSectionVerifcation = null;

//		String task1ButtonName = AMNNR_ActivityType142;
//		String recordName = "Mutual Fund";
//		String dealRecordName = "Vitara Deal";
//		String fundraisingRecordName = "FCR 1";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("10"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 10";
//		String task1Notes = "Jenkins and Martha ";
//		String relatedTo = "Martha<break>Vertica<break>jenkins";
//		String priority = "High";
//		String status = "Not Started";
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>"
//				+ "Vitara Deal<break>Breeza Deal<break>Conved Deal<break>FCR 1<break>FCR 2<break>FCR 3<break>FCR 4";
//
//		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
//				{ AMNNR_CallLabel3, relatedTo } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
//				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };
//
//		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate }, { AMNNR_CallLabel5, status },
//				{ AMNNR_CallLabel6, priority }, { AMNNR_CallLabel8, "C" } };
//
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = { "addContactsToDealTeamPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToFundraisingObjectPopup = {
//				"addContactsToFundraisingPopUpShouldNotThere".split("<break>") };
//
//		String[][][] detailSectionVerifcation = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, "Funds", recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
							if (BP.updateActivityTimelineRecord(projectName, null, null, null, SuggestedTags, null,
									false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
									addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
								log(LogStatus.PASS, "-----Activity timeline record has been updated for Subject: "
										+ task1SubjectName + "-----", YesNo.No);

							} else {
								log(LogStatus.FAIL, "-----Activity timeline record is not updated for Subject: "
										+ task1SubjectName + "-----", YesNo.No);
								sa.assertTrue(false, "-----Activity timeline record is not updated for Subject: "
										+ task1SubjectName + "-----");
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					if (BP.navigateToRecordAndClickOnSubTab(projectName, "Deals", dealRecordName, null)) {
						log(LogStatus.INFO, "Able to Open the Record: " + dealRecordName, YesNo.No);

						ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(getAdvanceDueDate,
								IconType.Task, task1SubjectName, task1NotesVerify, true, false, null, null);
						if (updatedresult.isEmpty()) {
							log(LogStatus.PASS, "------" + task1SubjectName
									+ " record has been verified on intraction of Record: " + dealRecordName + "------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + task1SubjectName + " record is not verified on intraction of Record: "
											+ dealRecordName + ", Reason: " + updatedresult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + task1SubjectName + " record is not verified on intraction of Record: "
											+ dealRecordName + ", Reason: " + updatedresult + "------");
						}
					} else

					{
						log(LogStatus.ERROR, "Not able to Open the Record: " + dealRecordName, YesNo.No);
						sa.assertTrue(false, "Not able to Open the Record: " + dealRecordName);
					}

					if (BP.navigateToRecordAndClickOnSubTab(projectName, "Fundraisings", fundraisingRecordName, null)) {
						log(LogStatus.INFO, "Able to Open the Record: " + fundraisingRecordName, YesNo.No);

						ArrayList<String> updatedresult = BP.verifyRecordOnInteractionCard(getAdvanceDueDate,
								IconType.Task, task1SubjectName, task1NotesVerify, true, false, null, null);
						if (updatedresult.isEmpty()) {
							log(LogStatus.PASS,
									"------" + task1SubjectName + " record has been verified on intraction of Record: "
											+ fundraisingRecordName + "------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR,
									"------" + task1SubjectName + " record is not verified on intraction of Record: "
											+ fundraisingRecordName + ", Reason: " + updatedresult + "------",
									YesNo.No);
							sa.assertTrue(false,
									"------" + task1SubjectName + " record is not verified on intraction of Record: "
											+ fundraisingRecordName + ", Reason: " + updatedresult + "------");
						}
					} else

					{
						log(LogStatus.ERROR, "Not able to Open the Record: " + fundraisingRecordName, YesNo.No);
						sa.assertTrue(false, "Not able to Open the Record: " + fundraisingRecordName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
//					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----",
						YesNo.No);
				sa.assertTrue(false,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc109_VerifyWhenATaskIsCreatedWithTheContactsTaggedWhichIsAlreadyADealContactAndAFundraisingContactAndItsImpactOnRespectiveDealAndFundraisingWhenTheDealAndFundraisingAreInActiveInCaseOfCall(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FundNames2;
		String dealRecordName = AMNNR_DealName3;
		String fundraisingRecordName = AMNNR_FundraisingNames3;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("10"));

		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject134 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes199;
		String relatedTo = AMNNR_RelatedTo199;
		String priority = AMNNR_AdvancePriority134;
		String status = AMNNR_AdvanceStatus134;
		String task1NotesVerify = task1Notes.replace("@", "");
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + AMNNR_RelatedTo135;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification134 } };

		String[] SuggestedTags = AMNNR_SuggestedTag134.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp134.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp134.split("<break>") };
		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup134.split("<break>") };
		String updatedRelatedToNotContainsVerify = AMNNR_RelatedTo136;
		String[][] relatedAssociationNotContains = { { AMNNR_CallLabel3, updatedRelatedToNotContainsVerify } };

		String[][][] detailSectionVerifcation = null;

//		String task1ButtonName = AMNNR_ActivityType142;
//		String recordName = "Mutual Fund";
//		String dealRecordName = "Ispro Deal";
//		String fundraisingRecordName = "FCR 5";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("10"));
//
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 12";
//		String task1Notes = "smith11 smith12 smith15";
//		String relatedTo = "smith11<break>smith12<break>smith15";
//		String priority = "High";
//		String status = "Not Started";
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + "Breeza Deal<break>FCR 1";
//
//		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
//				{ AMNNR_CallLabel3, relatedTo } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
//				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };
//
//		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate }, { AMNNR_CallLabel5, status },
//				{ AMNNR_CallLabel6, priority }, { AMNNR_CallLabel8, "A" } };
//
//		String[] SuggestedTags = "SuggestedPopUpShouldNotThere".split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = { "addContactsToDealTeamPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToFundraisingObjectPopup = {
//				"addContactsToFundraisingPopUpShouldNotThere".split("<break>") };
//		String updatedRelatedToNotContainsVerify = "Ispro Deal<break>FCR 5";
//		String[][] relatedAssociationNotContains = { { AMNNR_CallLabel3, updatedRelatedToNotContainsVerify } };
//
//		String[][][] detailSectionVerifcation = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, "Funds", recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);
							if (BP.updateActivityTimelineRecord(projectName, null, null, null, SuggestedTags, null,
									false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
									addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
								log(LogStatus.PASS, "-----Activity timeline record has been updated for Subject: "
										+ task1SubjectName + "-----", YesNo.No);

							} else {
								log(LogStatus.FAIL, "-----Activity timeline record is not updated for Subject: "
										+ task1SubjectName + "-----", YesNo.No);
								sa.assertTrue(false, "-----Activity timeline record is not updated for Subject: "
										+ task1SubjectName + "-----");
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					CommonLib.refresh(driver);

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							ArrayList<String> verifyRelatedToNotTaggedNegativeResults = BP
									.verifyRelatedToNotTagged(relatedAssociationNotContains);
							if (verifyRelatedToNotTaggedNegativeResults.isEmpty()) {
								log(LogStatus.INFO, "RelatedTo Association Not Tagged has been verified in Note Popup",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
												+ verifyRelatedToNotTaggedNegativeResults,
										YesNo.No);
								sa.assertTrue(false,
										"RelatedTo Association Not Tagged has not been verified in Note Popup, Reason: "
												+ verifyRelatedToNotTaggedNegativeResults);
							}

						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subjec Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subjec Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

					if (BP.navigateToRecordAndClickOnSubTab(projectName, "Deals", dealRecordName, null)) {
						log(LogStatus.INFO, "Able to Open the Record: " + dealRecordName, YesNo.No);

						if (BP.taskSubjectOfInteractionCard(task1SubjectName, 6) == null) {
							log(LogStatus.PASS,
									"------" + task1SubjectName + " record has not been there on intraction of Record: "
											+ dealRecordName + "------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR, "------" + task1SubjectName
									+ " record is there on intraction of Record: " + dealRecordName + "------",
									YesNo.No);
							sa.assertTrue(false, "------" + task1SubjectName
									+ " record is there on intraction of Record: " + dealRecordName + "------");
						}
					} else

					{
						log(LogStatus.ERROR, "Not able to Open the Record: " + dealRecordName, YesNo.No);
						sa.assertTrue(false, "Not able to Open the Record: " + dealRecordName);
					}

					if (BP.navigateToRecordAndClickOnSubTab(projectName, "Fundraisings", fundraisingRecordName, null)) {
						log(LogStatus.INFO, "Able to Open the Record: " + fundraisingRecordName, YesNo.No);

						if (BP.taskSubjectOfInteractionCard(task1SubjectName, 6) == null) {
							log(LogStatus.PASS,
									"------" + task1SubjectName + " record has not been there on intraction of Record: "
											+ fundraisingRecordName + "------",
									YesNo.No);

						} else {
							log(LogStatus.ERROR, "------" + task1SubjectName
									+ " record is there on intraction of Record: " + fundraisingRecordName + "------",
									YesNo.No);
							sa.assertTrue(false, "------" + task1SubjectName
									+ " record is there on intraction of Record: " + fundraisingRecordName + "------");
						}
					} else

					{
						log(LogStatus.ERROR, "Not able to Open the Record: " + fundraisingRecordName, YesNo.No);
						sa.assertTrue(false, "Not able to Open the Record: " + fundraisingRecordName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
//					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----",
						YesNo.No);
				sa.assertTrue(false,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc110_VerifyWhenUsersAreTaggedUsingAtTheRateTaggingWithoutUsingTaggingAndFromTaggedButtonInCaseOfCall(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_Contact8;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("2"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject137 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes137 + "@" + (crmUser2FirstName + " " + crmUser2LastName);

		String priority = AMNNR_AdvancePriority137;
		String status = AMNNR_AdvanceStatus137;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification137 } };

		String[] SuggestedTags = null;
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp137.split("<break>") };
		String[][] addContactsToDealTeamPopUp = null;
		String[][] addContactsToFundraisingObjectPopup = null;

		String[][][] detailSectionVerifcation = null;

//		String task1ButtonName = AMNNR_ActivityType142;
//		String recordName = "Con 1";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("2"));
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 13";
//		String task1Notes = "<suggestionShouldNotThere><Section>" + "@" + (crmUser2FirstName + " " + crmUser2LastName);
//
//		String priority = "High";
//		String status = "Not Started";
//
//		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes } };
//
//		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate }, { AMNNR_CallLabel5, status },
//				{ AMNNR_CallLabel6, priority }, { AMNNR_CallLabel8, "B" } };
//
//		String[] SuggestedTags = null;
//		String[][] createNewRecordPopUp = { "Ignore".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = null;
//		String[][] addContactsToFundraisingObjectPopup = null;
//
//		String[][][] detailSectionVerifcation = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, tabObj2, recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

			} else {
				log(LogStatus.FAIL,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----",
						YesNo.No);
				sa.assertTrue(false,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc111_VerifyWhenACallIsCreatedByTaggingThemeFirmDealFundraisingFund(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FundNames3;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("2"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject138 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes200;
		String relatedTo = AMNNR_RelatedTo138;
		String priority = AMNNR_AdvancePriority138;
		String status = AMNNR_AdvanceStatus138;
		String task1NotesVerify = task1Notes.replace("@", "");
		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>" + AMNNR_RelatedTo139;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification138 } };

		String[] SuggestedTags = AMNNR_SuggestedTag138.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp138.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp200.split("<break>") };
		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup200.split("<break>") };

		String[][][] detailSectionVerifcation = null;

//		String task1ButtonName = AMNNR_ActivityType142;
//		String recordName = "Vertix Fund";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("2"));
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 13A";
//		String task1Notes = "Mutual Fund , Ispro Deal , Litz , Maxtra , FCR 3 , Theme A , Theme B , Theme C";
//		String relatedTo = "smith11<break>smith12<break>smith15";
//		String priority = "High";
//		String status = "Not Started";
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String updatedRelatedToVerify = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName) + "<break>"
//				+ "Mutual Fund<break>Ispro Deal<break>Litz<break>Maxtra<break>FCR 3<break>Theme A<break>Theme B<break>Theme C";
//
//		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
//				{ AMNNR_CallLabel3, relatedTo } };
//
//		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
//				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };
//
//		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate }, { AMNNR_CallLabel5, status },
//				{ AMNNR_CallLabel6, priority }, { AMNNR_CallLabel8, "B" } };
//
//		String[] SuggestedTags = "Mutual Fund<break>Ispro Deal<break>Litz<break>Maxtra<break>FCR 3<break>Theme A<break>Theme B<break>Theme C"
//				.split("<break>", -1);
//		String[][] createNewRecordPopUp = { "createRecordPopUpShouldNotThere".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = { "<break>smith11<break><break>Cancel".split("<break>") };
//		String[][] addContactsToFundraisingObjectPopup = { "<break>smith11<break><break>Cancel".split("<break>") };
//
//		String[][][] detailSectionVerifcation = null;

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, "Funds", recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					null, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					CommonLib.refresh(driver);

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
//					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----",
						YesNo.No);
				sa.assertTrue(false,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

	@Parameters({ "projectName" })

	@Test
	public void AcuityMNNRTc112_VerifyWhenMultipleFollowUpTaskIsCreatedUnderTheParentCallAndRecordsAreEnteredUsingAtTheRateUnderNotesSectionWhichDoesNotExistInTheOrgAndContactThemeFirmDealFundraisingFundAndCustomObjectsAreTagged(
			String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1ButtonName = AMNNR_ActivityType142;
		String recordName = AMNNR_FundNames3;
		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("2"));
		String getAdvanceDueDate = AdvanceDueDate;

		String task1SubjectName = AMNNR_Subject140 + " " + AMNNR_ActivityType54;
		String task1Notes = AMNNR_Notes201;
		String relatedTo = AMNNR_RelatedTo201;
		String priority = AMNNR_AdvancePriority140;
		String status = AMNNR_AdvanceStatus140;
		String task1NotesVerify = task1Notes.replace("@", "");
		String updatedRelatedToVerifyForDetails = relatedTo + "<break>" + recordName + "<break>"
				+ (crmUser1FirstName + " " + crmUser1LastName);
		String updatedRelatedToVerify = updatedRelatedToVerifyForDetails + "<break>" + AMNNR_RelatedTo141;

		String followUptask1SubjectName = AMNNR_Subject141;
		String followUpAdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy",
				Integer.parseInt("0"));
		String followUpgetAdvanceDueDate = followUpAdvanceDueDate;
		String followUpStatus = AMNNR_AdvanceStatus141;

		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
				{ AMNNR_CallLabel3, relatedTo } };

		String[][] task1BasicSectionVerificationForDetailsSection = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerifyForDetails } };
		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate },
				{ AMNNR_CallLabel8, AMNNR_Classification140 } };

		String[][] followUptask1 = { { AMNNR_CallLabel1, followUptask1SubjectName },
				{ AMNNR_TaskLabel5, followUpStatus }, { AMNNR_CallLabel4, followUpgetAdvanceDueDate } };

		String[][] followUptask1BasicSectionVerification = { { AMNNR_CallLabel1, followUptask1SubjectName },
				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };

		String[][] followUptask1AdvancedSectionVerification = { { AMNNR_CallLabel4, followUpgetAdvanceDueDate },
				{ AMNNR_TaskLabel5, followUpStatus }, { AMNNR_TaskLabel6, priority },
				{ AMNNR_CallLabel8, AMNNR_Classification140 } };

		String[] SuggestedTags = AMNNR_SuggestedTag140.split("<break>", -1);
		String[][] createNewRecordPopUp = { AMNNR_CreateNewRecordPopUp201.split("<break>") };
		String[][] addContactsToDealTeamPopUp = { AMNNR_AddContactsToDealTeamPopUp201.split("<break>") };
		String[][] addContactsToFundraisingObjectPopup = { AMNNR_AddContactsToFundraisingPopup201.split("<break>") };

		String[][][] detailSectionVerifcation = { { { AMNNR_CallLabel1, task1SubjectName } },
				task1BasicSectionVerificationForDetailsSection, task1AdvancedSection };

//		String task1ButtonName = AMNNR_ActivityType142;
//		String recordName = "Vertix Fund";
//		String AdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy", Integer.parseInt("2"));
//		String getAdvanceDueDate = AdvanceDueDate;
//
//		String task1SubjectName = "Task 14";
//		String task1Notes = "Mutual Fund , Ispro Deal , Litz , Maxtra , FCR 3 ,  Theme A , Theme B , Theme C , Golden Ret , Smuklin , @jhonson";
//		String relatedTo = "smith11<break>smith12<break>smith15";
//		String priority = "High";
//		String status = "Not Started";
//		String task1NotesVerify = task1Notes.replace("@", "");
//		String updatedRelatedToVerifyForDetails = relatedTo + "<break>" + recordName + "<break>"
//				+ (crmUser1FirstName + " " + crmUser1LastName);
//		String updatedRelatedToVerify = updatedRelatedToVerifyForDetails + "<break>"
//				+ "Mutual Fund<break>Ispro Deal<break>Litz<break>Maxtra<break>FCR 3<break>Theme A<break>Theme B<break>Theme C<break>Golden Ret<break>Smuklin";
//
//		String followUptask1SubjectName = "Task 14.1";
//		String followUpAdvanceDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "M/d/yyyy",
//				Integer.parseInt("0"));
//		String followUpgetAdvanceDueDate = followUpAdvanceDueDate;
//		String followUpStatus = "In Progress";
//
//		String[][] task1BasicSection = { { AMNNR_CallLabel1, task1SubjectName }, { AMNNR_CallLabel2, task1Notes },
//				{ AMNNR_CallLabel3, relatedTo } };
//
//		String[][] task1BasicSectionVerificationForDetailsSection = { { AMNNR_CallLabel1, task1SubjectName },
//				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerifyForDetails } };
//		String[][] task1BasicSectionVerification = { { AMNNR_CallLabel1, task1SubjectName },
//				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };
//
//		String[][] task1AdvancedSection = { { AMNNR_CallLabel4, getAdvanceDueDate }, { AMNNR_CallLabel5, status },
//				{ AMNNR_CallLabel6, priority }, { AMNNR_CallLabel8, "A" } };
//
//		String[][] followUptask1 = { { AMNNR_CallLabel1, followUptask1SubjectName },
//				{ AMNNR_CallLabel5, followUpStatus }, { AMNNR_CallLabel4, followUpgetAdvanceDueDate } };
//
//		String[][] followUptask1BasicSectionVerification = { { AMNNR_CallLabel1, followUptask1SubjectName },
//				{ AMNNR_CallLabel2, task1NotesVerify }, { AMNNR_CallLabel3, updatedRelatedToVerify } };
//
//		String[][] followUptask1AdvancedSectionVerification = { { AMNNR_CallLabel4, followUpgetAdvanceDueDate },
//				{ AMNNR_CallLabel5, followUpStatus }, { AMNNR_CallLabel6, priority }, { AMNNR_CallLabel8, "A" } };
//
//		String[] SuggestedTags = "Mutual Fund<break>Ispro Deal<break>Litz<break>Maxtra<break>FCR 3<break>Theme A<break>Theme B<break>Theme C<break>Golden Ret<break>Smuklin"
//				.split("<break>", -1);
//		String[][] createNewRecordPopUp = {
//				"checked<break>jhonson<break><AsItIs><break>Contact<break><break>Create".split("<break>") };
//		String[][] addContactsToDealTeamPopUp = { "allRecords<break>smith11<break><break>Add".split("<break>") };
//		String[][] addContactsToFundraisingObjectPopup = {
//				"allRecords<break>smith11<break><break>Add".split("<break>") };
//
//		String[][][] detailSectionVerifcation = { { { AMNNR_CallLabel1, task1SubjectName } },
//				task1BasicSectionVerificationForDetailsSection, task1AdvancedSection };

		lp.CRMLogin(crmUser1EmailID, adminPassword);

		if (BP.navigateToRecordAndClickOnSubTab(projectName, "Funds", recordName, null)) {
			log(LogStatus.INFO, "Able to Open the Record: " + recordName, YesNo.No);

			if (BP.createActivityTimeline(projectName, false, task1ButtonName, task1BasicSection, task1AdvancedSection,
					followUptask1, SuggestedTags, false, null, null, createNewRecordPopUp, addContactsToDealTeamPopUp,
					addContactsToFundraisingObjectPopup, detailSectionVerifcation)) {
				log(LogStatus.PASS, "-----Activity timeline record has been created-----", YesNo.No);

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(task1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							task1SubjectName, task1BasicSectionVerification, task1AdvancedSection, IconType.Task,
							PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + task1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + task1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					CommonLib.refresh(driver);

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(task1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + task1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + task1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url, task1BasicSectionVerification,
											task1AdvancedSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ task1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + task1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + task1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
//					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR, "-----Task named: " + task1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + task1SubjectName + " not found in Tasks Object-----");

				}

				CommonLib.refresh(driver);
				lp.clickOnTab(projectName, TabName.HomeTab);
				if (home.globalSearchAndNavigate(followUptask1SubjectName, "Tasks", false)) {

					log(LogStatus.INFO,
							"-----Verified Task named: " + followUptask1SubjectName + " found in Tasks Object-----",
							YesNo.No);

					ArrayList<String> subjectLinkPopUpNegativeResult = BP.verifySubjectLinkPopUpOnIntraction(driver,
							followUptask1SubjectName, followUptask1BasicSectionVerification,
							followUptask1AdvancedSectionVerification, IconType.Task, PageName.TaskPage);

					if (subjectLinkPopUpNegativeResult.isEmpty()) {
						log(LogStatus.PASS, "------" + followUptask1SubjectName
								+ " record is able to open popup after click on it and verify its data" + "------",
								YesNo.No);

					} else {
						log(LogStatus.ERROR,
								"------" + followUptask1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------",
								YesNo.Yes);
						sa.assertTrue(false,
								"------" + followUptask1SubjectName + " record link popup is not verified, Reason: "
										+ subjectLinkPopUpNegativeResult + "------");

					}

					CommonLib.refresh(driver);

					if (CommonLib.click(driver, BP.subjectOfInteractionPage(followUptask1SubjectName, 15),
							"Subject Name on Intraction", action.BOOLEAN)) {
						log(LogStatus.INFO, "clicked on " + followUptask1SubjectName, YesNo.No);

						if (click(driver, BP.editButtonOfSubjectLinkPopUpInInteractionSection(20),
								"Edit Note Button of: " + followUptask1SubjectName, action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "clicked on Edit button on Subject Link Popup", YesNo.No);

							String url = getURL(driver, 10);

							ArrayList<String> NotesPopUpPrefilledNegativeResult = BP
									.verifyNotesPopupWithPrefilledValueAndOnSameUrl(url,
											followUptask1BasicSectionVerification,
											followUptask1AdvancedSectionVerification, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,
										"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",
										YesNo.No);

							} else {
								log(LogStatus.ERROR,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult,
										YesNo.No);
								sa.assertTrue(false,
										"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "
												+ NotesPopUpPrefilledNegativeResult);
							}
						} else {
							log(LogStatus.ERROR, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ followUptask1SubjectName, YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on Subject Link Popup of Task: "
									+ followUptask1SubjectName);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on " + followUptask1SubjectName, YesNo.No);
						sa.assertTrue(false, "not able to click on " + followUptask1SubjectName);
					}

//					driver.close();
//					driver.switchTo().window(driver.getWindowHandles().stream().findFirst().get());
//					CommonLib.ThreadSleep(4000);
				} else {

					log(LogStatus.ERROR,
							"-----Task named: " + followUptask1SubjectName + " not found in Tasks Object-----",
							YesNo.Yes);
					BaseLib.sa.assertTrue(false,
							"-----Task named: " + followUptask1SubjectName + " not found in Tasks Object-----");

				}

			} else {
				log(LogStatus.FAIL,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----",
						YesNo.No);
				sa.assertTrue(false,
						"-----Activity timeline record is not created for Task: " + task1SubjectName + "-----");
			}

		} else

		{
			log(LogStatus.ERROR, "Not able to Open the Record: " + recordName, YesNo.No);
			sa.assertTrue(false, "Not able to Open the Record: " + recordName);
		}

		ThreadSleep(5000);
		lp.CRMlogout();
		sa.assertAll();
	}

}