package com.navatar.scripts;

import static com.navatar.generic.CommonLib.FindElement;
import static com.navatar.generic.CommonLib.ThreadSleep;
import static com.navatar.generic.CommonLib.click;
import static com.navatar.generic.CommonLib.clickUsingJavaScript;
import static com.navatar.generic.CommonLib.exit;
import static com.navatar.generic.CommonLib.getURL;
import static com.navatar.generic.CommonLib.log;
import static com.navatar.generic.CommonLib.refresh;
import static com.navatar.generic.CommonLib.removeNumbersFromString;
import static com.navatar.generic.CommonLib.sendKeys;
import static com.navatar.generic.CommonLib.switchOnWindow;
import static com.navatar.generic.CommonLib.switchToDefaultContent;
import static com.navatar.generic.CommonLib.switchToWindowOpenNextToParentWindow;
import static com.navatar.generic.CommonVariables.*;
import static com.navatar.generic.SmokeCommonVariables.adminPassword;
import static com.navatar.generic.SmokeCommonVariables.superAdminUserName;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.openqa.selenium.WebElement;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.navatar.generic.BaseLib;
import com.navatar.generic.CommonLib;
import com.navatar.generic.EmailLib;
import com.navatar.generic.EnumConstants.CreationPage;
import com.navatar.generic.EnumConstants.Environment;
import com.navatar.generic.EnumConstants.GlobalActionItem;
import com.navatar.generic.EnumConstants.IconType;
import com.navatar.generic.EnumConstants.PageLabel;
import com.navatar.generic.EnumConstants.PageName;
import com.navatar.generic.EnumConstants.ShowMoreActionDropDownList;
import com.navatar.generic.EnumConstants.TabName;
import com.navatar.generic.EnumConstants.TaggedName;
import com.navatar.generic.EnumConstants.YesNo;
import com.navatar.generic.EnumConstants.action;
import com.navatar.generic.EnumConstants.excelLabel;
import com.navatar.generic.ExcelUtils;
import com.navatar.pageObjects.BasePageBusinessLayer;
import com.navatar.pageObjects.ContactsPageBusinessLayer;
import com.navatar.pageObjects.DealPageBusinessLayer;
import com.navatar.pageObjects.DealTeamPageBusinessLayer;
import com.navatar.pageObjects.FundRaisingPageBusinessLayer;
import com.navatar.pageObjects.FundraisingsPageBusinessLayer;
import com.navatar.pageObjects.FundsPageBusinessLayer;
import com.navatar.pageObjects.GlobalActionPageBusinessLayer;
import com.navatar.pageObjects.HomePageBusineesLayer;
import com.navatar.pageObjects.InstitutionsPageBusinessLayer;
import com.navatar.pageObjects.LoginPageBusinessLayer;
import com.navatar.pageObjects.SetupPageBusinessLayer;
import com.navatar.pageObjects.TaskPageBusinessLayer;
import com.relevantcodes.extentreports.LogStatus;

public class AcuityTaskCallAndEvent extends BaseLib {

	public boolean isInstitutionRecord=false;
	

	@Parameters({ "projectName" })
	@Test
	public void ATCETc001_CreateCRMUser(String projectName) {
		SetupPageBusinessLayer setup = new SetupPageBusinessLayer(driver);
		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		for(int k=0; k<11; k++)
		{
			lp = new LoginPageBusinessLayer(driver);
			home = new HomePageBusineesLayer(driver);
			setup = new SetupPageBusinessLayer(driver);
			String[] firstName= {crmUser6FirstName,crmUser7FirstName,crmUser8FirstName,crmUser9FirstName,crmUser10FirstName,crmUser11FirstName,crmUser12FirstName,crmUser13FirstName,crmUser14FirstName,crmUser15FirstName,crmUser16FirstName};
			String[] lastName= {crmUser6LastName,crmUser7LastName,crmUser8LastName,crmUser9LastName,crmUser10LastName,crmUser11LastName,crmUser12LastName,crmUser13LastName,crmUser14LastName,crmUser15LastName,crmUser16LastName};
			String[] userLicence= {crmUser6Lience,crmUser7Lience,crmUser8Lience,crmUser9Lience,crmUser10Lience,crmUser11Lience,crmUser12Lience,crmUser13Lience,crmUser14Lience,crmUser15Lience,crmUser16Lience};
			String[] userProfile= {crmUser6Profile,crmUser7Profile,crmUser8Profile,crmUser9Profile,crmUser10Profile,crmUser11Profile,crmUser12Profile,crmUser13Profile,crmUser14Profile,crmUser15Profile,crmUser16Profile};
			String[] userTitle= {crmUser6Title,crmUser7Title,crmUser8Title,crmUser9Title,crmUser10Title,crmUser11Title,crmUser12Title,crmUser13Title,crmUser14Title,crmUser15Title,crmUser16Title};
			String parentWindow = null;
			String[] splitedUserLastName = removeNumbersFromString(lastName[k]);
			String UserLastName = splitedUserLastName[0] + lp.generateRandomNumber();
			String emailId = lp.generateRandomEmailId(gmailUserName);

			lp.CRMLogin(superAdminUserName, adminPassword, appName);

			boolean flag = false;
			for (int i = 0; i < 3; i++) {
				try {
					if (home.clickOnSetUpLink()) {
						flag = true;
						parentWindow = switchOnWindow(driver);
						if (parentWindow == null) {
							sa.assertTrue(false,
									"No new window is open after click on setup link in lighting mode so cannot create CRM User1");
							log(LogStatus.SKIP,
									"No new window is open after click on setup link in lighting mode so cannot create CRM User1",
									YesNo.Yes);
							exit("No new window is open after click on setup link in lighting mode so cannot create CRM User1");
						}
						if (setup.createPEUser(firstName[k], UserLastName, emailId, userLicence[k], userProfile[k], userTitle[k])) {
							log(LogStatus.INFO,
									"CRM User is created Successfully: " + firstName[k] + " " + UserLastName,
									YesNo.No);
							ExcelUtils.writeData(testCasesFilePath, emailId, "Users", excelLabel.Variable_Name, "User"+(k+6),
									excelLabel.User_Email);
							ExcelUtils.writeData(testCasesFilePath, UserLastName, "Users", excelLabel.Variable_Name,
									"User"+(k+6), excelLabel.User_Last_Name);
							flag = true;
							break;

						}
						driver.close();
						driver.switchTo().window(parentWindow);

					}
				} catch (Exception e) {
					log(LogStatus.INFO, "could not find setup link, trying again..", YesNo.No);
				}

			}
			if (flag) {

				if (!environment.equalsIgnoreCase(Environment.Sandbox.toString())) {
					switchToDefaultContent(driver);
					CommonLib.ThreadSleep(5000);
					if (setup.installedPackages(firstName[k], UserLastName)) {
						appLog.info("PE Package is installed Successfully in CRM User: " + firstName[k] + " "
								+ UserLastName);

					} else {
						appLog.error(
								"Not able to install PE package in CRM User1: " + firstName[k] + " " + UserLastName);
						sa.assertTrue(false,
								"Not able to install PE package in CRM User1: " + firstName[k] + " " + UserLastName);
						log(LogStatus.ERROR,
								"Not able to install PE package in CRM User1: " + firstName[k] + " " + UserLastName,
								YesNo.Yes);
					}
				}
			} else {

				log(LogStatus.ERROR, "could not click on setup link, test case fail", YesNo.Yes);
				sa.assertTrue(false, "could not click on setup link, test case fail");

			}
			lp.CRMlogout();
			closeBrowser();
			// driver.switchTo().window(parentWindow);
			config(ExcelUtils.readDataFromPropertyFile("Browser"));
			lp = new LoginPageBusinessLayer(driver);
			String passwordResetLink = null;
			try {
				passwordResetLink = new EmailLib().getResetPasswordLink("passwordreset",
						ExcelUtils.readDataFromPropertyFile("gmailUserName"),
						ExcelUtils.readDataFromPropertyFile("gmailPassword"));
			} catch (InterruptedException e2) {
				e2.printStackTrace();
			}
			appLog.info("ResetLinkIs: " + passwordResetLink);
			driver.get(passwordResetLink);
			if (lp.setNewPassword()) {
				appLog.info("Password is set successfully for CRM User: " + firstName[k] + " " + UserLastName);
			} else {
				appLog.info("Password is not set for CRM User: " + firstName[k] + " " + UserLastName);
				sa.assertTrue(false, "Password is not set for CRM User: " + firstName[k] + " " + UserLastName);
				log(LogStatus.ERROR, "Password is not set for CRM User: " + firstName[k] + " " + UserLastName,
						YesNo.Yes);
			}
			lp.CRMlogout();
			ThreadSleep(8000);

		}
		sa.assertAll();
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc002_VerifyUIOfAcuityTabOnCompanyRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord1;		
			
		String sectionHeader=ATCE_Section1;
		String tabsOnTagged=ATCE_Tabs1;
		String defaultTabOntagged="Firms";
		String message=bp.acuityDefaultMessage;

		String contactHeader=ATCE_ContactHeader1;

		String[] arrSectionHeader=sectionHeader.split("<break>");		
		List<String> sectionHeaderName = new ArrayList<String>(Arrays.asList(arrSectionHeader));

		String[] infoMessage=  {bp.taggedInfoMessage,bp.interactionsInfoMessage,bp.contactInfoMessage,bp.dealInfoMessage};		
		
		String[] arrTabName= tabsOnTagged.split("<break>");		
		List<String> tabNameOnTagged = new ArrayList<String>(Arrays.asList(arrTabName));

		String[] arrContactHeader=contactHeader.split("<break>");
		List<String> contactHeaders = new ArrayList<String>(Arrays.asList(arrContactHeader));
		
		List<String> blankList=new ArrayList<String>();

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					ArrayList<String> result3=bp.verifySectionsAndTooltipOnAcuityTab(sectionHeaderName,sectionHeaderName);
					if(result3.isEmpty())
					{
						log(LogStatus.INFO, "Section Headers have been verified on acuity tab", YesNo.No);
					}					
					else
					{
						log(LogStatus.ERROR, "Section headers and Tooltip are not verified on acuity tab. "+result3, YesNo.No);
						sa.assertTrue(false, "Section headers and Tooltip are not verified on acuity tab. "+result3);
					}
					ArrayList<String> result4=bp.verifyTabsOnTaggedSection(tabNameOnTagged,defaultTabOntagged);
					if(result4.isEmpty())
					{
						log(LogStatus.INFO, "Default selected Tab and Tabs have been verified on Tagged section. ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "Default selected Tab and Tabs are not verified on Tagged section. "+result4, YesNo.No);
						sa.assertTrue(false, "Default selected Tab and Tabs are not verified on Tagged section. "+result4);
					}
					refresh(driver);

					ArrayList<String> result= bp.verifyColumnsAndMessageOnTabsOfTagged(tabNameOnTagged, message);
					if(result.isEmpty())
					{
						log(LogStatus.INFO, "The Column name, Time referenced and message has been verified ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Column name, Time referenced and message are not verified. "+result, YesNo.No);
						sa.assertTrue(false, "The Column name, Time referenced and message are not verified. "+result);
					}

					ArrayList<String> result1=bp.verifyHeaderNameAndMessageOnInteractionsContactsConnectionsAndDealsSection(message, contactHeaders, message, blankList, null,blankList,null,blankList,null);

					if(result1.isEmpty())
					{
						log(LogStatus.INFO, "The header name and message have been verified on Interaction and Contacts ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The header name and message are not verified on Interaction and Contacts. "+result1, YesNo.No);
						sa.assertTrue(false, "The header name and message are not verified on Interaction and Contacts "+result1);
					}

					ArrayList<String> result2=bp.verifyToolTipOnDealsConnctionsAndContactsHeader(blankList, contactHeaders, blankList,blankList);
					if(result2.isEmpty())
					{
						log(LogStatus.INFO, "The Tooltip on Contact header have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Tooltip on Contact header are not verified. "+result2, YesNo.No);
						sa.assertTrue(false, "The Tooltip on Contact header are not verified. "+result2);
					}
					
					if(bp.verifyUIOfLogACallAndCreateTaskButtonOnAcuity(true, true, true, true, false, false))
					{
						log(LogStatus.INFO, "The UI of Log a Call, Create Task and Add Contact icon on contact section have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified", YesNo.No);
						sa.assertTrue(false, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified");
					}

					ArrayList<String> result9=bp.infoMessageOfAcuitySection(arrSectionHeader, infoMessage);
					if(result9.isEmpty())
					{
						log(LogStatus.INFO, "The info message have been verified of section on Acuity", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The info message are not verified of section on Acuity. "+result9, YesNo.No);
						sa.assertTrue(false,  "The info message are not verified of section on Acuity. "+result9);
					}

					if (!bp.verifyViewAllButtonOnIntractionCard(5)) {
						log(LogStatus.INFO, "view All Button is not visible on Interaction section", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "view All Button is visible on Interaction section", YesNo.No);
						sa.assertTrue(false, "view All Button is visible on Interaction section");
					}

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc003_VerifyUIOfAcuityTabOnInstitutionRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord3;		
			
		String sectionHeader=ATCE_Section2;
		String tabsOnTagged=ATCE_Tabs2;
		String defaultTabOntagged="Firms";
		String message=bp.acuityDefaultMessage;

		String contactHeader=ATCE_ContactHeader1;

		String[] arrSectionHeader=sectionHeader.split("<break>");		
		List<String> sectionHeaderName = new ArrayList<String>(Arrays.asList(arrSectionHeader));
		
		String[] infoMessage=  {bp.taggedInfoMessageInstitution,bp.interactionsInfoMessage,bp.contactInfoMessage};		
		

		String[] arrTabName= tabsOnTagged.split("<break>");		
		List<String> tabNameOnTagged = new ArrayList<String>(Arrays.asList(arrTabName));

		String[] arrContactHeader=contactHeader.split("<break>");
		List<String> contactHeaders = new ArrayList<String>(Arrays.asList(arrContactHeader));

		
		List<String> blankList=new ArrayList<String>();

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					ArrayList<String> result3=bp.verifySectionsAndTooltipOnAcuityTab(sectionHeaderName,sectionHeaderName);
					if(result3.isEmpty())
					{
						log(LogStatus.INFO, "Section Headers have been verified on acuity tab", YesNo.No);
					}					
					else
					{
						log(LogStatus.ERROR, "Section headers and Tooltip are not verified on acuity tab. "+result3, YesNo.No);
						sa.assertTrue(false, "Section headers and Tooltip are not verified on acuity tab. "+result3);
					}
					ArrayList<String> result4=bp.verifyTabsOnTaggedSection(tabNameOnTagged,defaultTabOntagged);
					if(result4.isEmpty())
					{
						log(LogStatus.INFO, "Default selected Tab and Tabs have been verified on Tagged section. ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "Default selected Tab and Tabs are not verified on Tagged section. "+result4, YesNo.No);
						sa.assertTrue(false, "Default selected Tab and Tabs are not verified on Tagged section. "+result4);
					}
					refresh(driver);

					ArrayList<String> result= bp.verifyColumnsAndMessageOnTabsOfTagged(tabNameOnTagged, message);
					if(result.isEmpty())
					{
						log(LogStatus.INFO, "The Column name, Time referenced and message has been verified ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Column name, Time referenced and message are not verified. "+result, YesNo.No);
						sa.assertTrue(false, "The Column name, Time referenced and message are not verified. "+result);
					}

					ArrayList<String> result1=bp.verifyHeaderNameAndMessageOnInteractionsContactsConnectionsAndDealsSection(message, contactHeaders, message, blankList, null,blankList,null,blankList,null);

					if(result1.isEmpty())
					{
						log(LogStatus.INFO, "The header name and message have been verified on Interaction and Contacts ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The header name and message are not verified on Interaction and Contacts. "+result1, YesNo.No);
						sa.assertTrue(false, "The header name and message are not verified on Interaction and Contacts "+result1);
					}

					ArrayList<String> result2=bp.verifyToolTipOnDealsConnctionsAndContactsHeader(blankList, contactHeaders, blankList,blankList);
					if(result2.isEmpty())
					{
						log(LogStatus.INFO, "The Tooltip on Contact header have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Tooltip on Contact header are not verified. "+result2, YesNo.No);
						sa.assertTrue(false, "The Tooltip on Contact header are not verified. "+result2);
					}
					
					if(bp.verifyUIOfLogACallAndCreateTaskButtonOnAcuity(true, true, true, true, false, false))
					{
						log(LogStatus.INFO, "The UI of Log a Call, Create Task and Add Contact icon on contact section have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified", YesNo.No);
						sa.assertTrue(false, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified");
					}

					ArrayList<String> result9=bp.infoMessageOfAcuitySection(arrSectionHeader, infoMessage);
					if(result9.isEmpty())
					{
						log(LogStatus.INFO, "The info message have been verified of section on Acuity", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The info message are not verified of section on Acuity. "+result9, YesNo.No);
						sa.assertTrue(false,  "The info message are not verified of section on Acuity. "+result9);
					}

					if (!bp.verifyViewAllButtonOnIntractionCard(5)) {
						log(LogStatus.INFO, "view All Button is not visible on Interaction section", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "view All Button is visible on Interaction section", YesNo.No);
						sa.assertTrue(false, "view All Button is visible on Interaction section");
					}

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc004_VerifyUIOfAcuityTabOnAdvisorRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord5;		
			
		String sectionHeader=ATCE_Section1;
		String tabsOnTagged=ATCE_Tabs1;
		String defaultTabOntagged="Firms";
		String message=bp.acuityDefaultMessage;

		String contactHeader=ATCE_ContactHeader1;

		String[] arrSectionHeader=sectionHeader.split("<break>");		
		List<String> sectionHeaderName = new ArrayList<String>(Arrays.asList(arrSectionHeader));
		
		String[] infoMessage=  {bp.taggedInfoMessage,bp.interactionsInfoMessage,bp.contactInfoMessage,bp.dealInfoMessageAdvisor};		
		

		String[] arrTabName= tabsOnTagged.split("<break>");		
		List<String> tabNameOnTagged = new ArrayList<String>(Arrays.asList(arrTabName));

		String[] arrContactHeader=contactHeader.split("<break>");
		List<String> contactHeaders = new ArrayList<String>(Arrays.asList(arrContactHeader));

		List<String> blankList=new ArrayList<String>();

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					ArrayList<String> result3=bp.verifySectionsAndTooltipOnAcuityTab(sectionHeaderName,sectionHeaderName);
					if(result3.isEmpty())
					{
						log(LogStatus.INFO, "Section Headers have been verified on acuity tab", YesNo.No);
					}					
					else
					{
						log(LogStatus.ERROR, "Section headers and Tooltip are not verified on acuity tab. "+result3, YesNo.No);
						sa.assertTrue(false, "Section headers and Tooltip are not verified on acuity tab. "+result3);
					}
					ArrayList<String> result4=bp.verifyTabsOnTaggedSection(tabNameOnTagged,defaultTabOntagged);
					if(result4.isEmpty())
					{
						log(LogStatus.INFO, "Default selected Tab and Tabs have been verified on Tagged section. ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "Default selected Tab and Tabs are not verified on Tagged section. "+result4, YesNo.No);
						sa.assertTrue(false, "Default selected Tab and Tabs are not verified on Tagged section. "+result4);
					}
					refresh(driver);

					ArrayList<String> result= bp.verifyColumnsAndMessageOnTabsOfTagged(tabNameOnTagged, message);
					if(result.isEmpty())
					{
						log(LogStatus.INFO, "The Column name, Time referenced and message has been verified ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Column name, Time referenced and message are not verified. "+result, YesNo.No);
						sa.assertTrue(false, "The Column name, Time referenced and message are not verified. "+result);
					}

					ArrayList<String> result1=bp.verifyHeaderNameAndMessageOnInteractionsContactsConnectionsAndDealsSection(message, contactHeaders, message, blankList, null,blankList,null,blankList,null);

					if(result1.isEmpty())
					{
						log(LogStatus.INFO, "The header name and message have been verified on Interaction and Contacts ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The header name and message are not verified on Interaction and Contacts. "+result1, YesNo.No);
						sa.assertTrue(false, "The header name and message are not verified on Interaction and Contacts "+result1);
					}

					ArrayList<String> result2=bp.verifyToolTipOnDealsConnctionsAndContactsHeader(blankList, contactHeaders, blankList,blankList);
					if(result2.isEmpty())
					{
						log(LogStatus.INFO, "The Tooltip on Contact header have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Tooltip on Contact header are not verified. "+result2, YesNo.No);
						sa.assertTrue(false, "The Tooltip on Contact header are not verified. "+result2);
					}
					
					if(bp.verifyUIOfLogACallAndCreateTaskButtonOnAcuity(true, true, true, true, false, false))
					{
						log(LogStatus.INFO, "The UI of Log a Call, Create Task and Add Contact icon on contact section have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified", YesNo.No);
						sa.assertTrue(false, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified");
					}

					ArrayList<String> result9=bp.infoMessageOfAcuitySection(arrSectionHeader, infoMessage);
					if(result9.isEmpty())
					{
						log(LogStatus.INFO, "The info message have been verified of section on Acuity", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The info message are not verified of section on Acuity. "+result9, YesNo.No);
						sa.assertTrue(false,  "The info message are not verified of section on Acuity. "+result9);
					}

					if (!bp.verifyViewAllButtonOnIntractionCard(5)) {
						log(LogStatus.INFO, "view All Button is not visible on Interaction section", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "view All Button is visible on Interaction section", YesNo.No);
						sa.assertTrue(false, "view All Button is visible on Interaction section");
					}

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc005_VerifyUIOfAcuityTabOnLenderRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord7;		
			
		String sectionHeader=ATCE_Section1;
		String tabsOnTagged=ATCE_Tabs1;
		String defaultTabOntagged="Firms";
		String message=bp.acuityDefaultMessage;

		String contactHeader=ATCE_ContactHeader1;

		String[] arrSectionHeader=sectionHeader.split("<break>");		
		List<String> sectionHeaderName = new ArrayList<String>(Arrays.asList(arrSectionHeader));
		
		String[] infoMessage=  {bp.taggedInfoMessage,bp.interactionsInfoMessage,bp.contactInfoMessage,bp.dealInfoMessage};				

		String[] arrTabName= tabsOnTagged.split("<break>");		
		List<String> tabNameOnTagged = new ArrayList<String>(Arrays.asList(arrTabName));

		String[] arrContactHeader=contactHeader.split("<break>");
		List<String> contactHeaders = new ArrayList<String>(Arrays.asList(arrContactHeader));

		List<String> blankList=new ArrayList<String>();

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					ArrayList<String> result3=bp.verifySectionsAndTooltipOnAcuityTab(sectionHeaderName,sectionHeaderName);
					if(result3.isEmpty())
					{
						log(LogStatus.INFO, "Section Headers have been verified on acuity tab", YesNo.No);
					}					
					else
					{
						log(LogStatus.ERROR, "Section headers and Tooltip are not verified on acuity tab. "+result3, YesNo.No);
						sa.assertTrue(false, "Section headers and Tooltip are not verified on acuity tab. "+result3);
					}
					ArrayList<String> result4=bp.verifyTabsOnTaggedSection(tabNameOnTagged,defaultTabOntagged);
					if(result4.isEmpty())
					{
						log(LogStatus.INFO, "Default selected Tab and Tabs have been verified on Tagged section. ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "Default selected Tab and Tabs are not verified on Tagged section. "+result4, YesNo.No);
						sa.assertTrue(false, "Default selected Tab and Tabs are not verified on Tagged section. "+result4);
					}
					refresh(driver);

					ArrayList<String> result= bp.verifyColumnsAndMessageOnTabsOfTagged(tabNameOnTagged, message);
					if(result.isEmpty())
					{
						log(LogStatus.INFO, "The Column name, Time referenced and message has been verified ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Column name, Time referenced and message are not verified. "+result, YesNo.No);
						sa.assertTrue(false, "The Column name, Time referenced and message are not verified. "+result);
					}

					ArrayList<String> result1=bp.verifyHeaderNameAndMessageOnInteractionsContactsConnectionsAndDealsSection(message, contactHeaders, message, blankList, null,blankList,null,blankList,null);

					if(result1.isEmpty())
					{
						log(LogStatus.INFO, "The header name and message have been verified on Interaction and Contacts ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The header name and message are not verified on Interaction and Contacts. "+result1, YesNo.No);
						sa.assertTrue(false, "The header name and message are not verified on Interaction and Contacts "+result1);
					}

					ArrayList<String> result2=bp.verifyToolTipOnDealsConnctionsAndContactsHeader(blankList, contactHeaders, blankList,blankList);
					if(result2.isEmpty())
					{
						log(LogStatus.INFO, "The Tooltip on Contact header have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Tooltip on Contact header are not verified. "+result2, YesNo.No);
						sa.assertTrue(false, "The Tooltip on Contact header are not verified. "+result2);
					}
					
					if(bp.verifyUIOfLogACallAndCreateTaskButtonOnAcuity(true, true, true, true, false, false))
					{
						log(LogStatus.INFO, "The UI of Log a Call, Create Task and Add Contact icon on contact section have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified", YesNo.No);
						sa.assertTrue(false, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified");
					}
					
					ArrayList<String> result9=bp.infoMessageOfAcuitySection(arrSectionHeader, infoMessage);
					if(result9.isEmpty())
					{
						log(LogStatus.INFO, "The info message have been verified of section on Acuity", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The info message are not verified of section on Acuity. "+result9, YesNo.No);
						sa.assertTrue(false,  "The info message are not verified of section on Acuity. "+result9);
					}


					if (!bp.verifyViewAllButtonOnIntractionCard(5)) {
						log(LogStatus.INFO, "view All Button is not visible on Interaction section", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "view All Button is visible on Interaction section", YesNo.No);
						sa.assertTrue(false, "view All Button is visible on Interaction section");
					}

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc006_VerifyUIOfAcuityTabOnIntermediaryRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord9;		
			
		String sectionHeader=ATCE_Section1;
		String tabsOnTagged=ATCE_Tabs1;
		String defaultTabOntagged="Firms";
		String message=bp.acuityDefaultMessage;

		String contactHeader=ATCE_ContactHeader1;

		String[] arrSectionHeader=sectionHeader.split("<break>");		
		List<String> sectionHeaderName = new ArrayList<String>(Arrays.asList(arrSectionHeader));
		
		String[] infoMessage=  {bp.taggedInfoMessage,bp.interactionsInfoMessage,bp.contactInfoMessage,bp.dealInfoMessage};		

		String[] arrTabName= tabsOnTagged.split("<break>");		
		List<String> tabNameOnTagged = new ArrayList<String>(Arrays.asList(arrTabName));

		String[] arrContactHeader=contactHeader.split("<break>");
		List<String> contactHeaders = new ArrayList<String>(Arrays.asList(arrContactHeader));

		List<String> blankList=new ArrayList<String>();

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					ArrayList<String> result3=bp.verifySectionsAndTooltipOnAcuityTab(sectionHeaderName,sectionHeaderName);
					if(result3.isEmpty())
					{
						log(LogStatus.INFO, "Section Headers have been verified on acuity tab", YesNo.No);
					}					
					else
					{
						log(LogStatus.ERROR, "Section headers and Tooltip are not verified on acuity tab. "+result3, YesNo.No);
						sa.assertTrue(false, "Section headers and Tooltip are not verified on acuity tab. "+result3);
					}
					ArrayList<String> result4=bp.verifyTabsOnTaggedSection(tabNameOnTagged,defaultTabOntagged);
					if(result4.isEmpty())
					{
						log(LogStatus.INFO, "Default selected Tab and Tabs have been verified on Tagged section. ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "Default selected Tab and Tabs are not verified on Tagged section. "+result4, YesNo.No);
						sa.assertTrue(false, "Default selected Tab and Tabs are not verified on Tagged section. "+result4);
					}
					refresh(driver);

					ArrayList<String> result= bp.verifyColumnsAndMessageOnTabsOfTagged(tabNameOnTagged, message);
					if(result.isEmpty())
					{
						log(LogStatus.INFO, "The Column name, Time referenced and message has been verified ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Column name, Time referenced and message are not verified. "+result, YesNo.No);
						sa.assertTrue(false, "The Column name, Time referenced and message are not verified. "+result);
					}

					ArrayList<String> result1=bp.verifyHeaderNameAndMessageOnInteractionsContactsConnectionsAndDealsSection(message, contactHeaders, message, blankList, null,blankList,null,blankList,null);

					if(result1.isEmpty())
					{
						log(LogStatus.INFO, "The header name and message have been verified on Interaction and Contacts ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The header name and message are not verified on Interaction and Contacts. "+result1, YesNo.No);
						sa.assertTrue(false, "The header name and message are not verified on Interaction and Contacts "+result1);
					}

					ArrayList<String> result2=bp.verifyToolTipOnDealsConnctionsAndContactsHeader(blankList, contactHeaders, blankList,blankList);
					if(result2.isEmpty())
					{
						log(LogStatus.INFO, "The Tooltip on Contact header have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Tooltip on Contact header are not verified. "+result2, YesNo.No);
						sa.assertTrue(false, "The Tooltip on Contact header are not verified. "+result2);
					}
					
					if(bp.verifyUIOfLogACallAndCreateTaskButtonOnAcuity(true, true, true, true, false, false))
					{
						log(LogStatus.INFO, "The UI of Log a Call, Create Task and Add Contact icon on contact section have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified", YesNo.No);
						sa.assertTrue(false, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified");
					}

					ArrayList<String> result9=bp.infoMessageOfAcuitySection(arrSectionHeader, infoMessage);
					if(result9.isEmpty())
					{
						log(LogStatus.INFO, "The info message have been verified of section on Acuity", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The info message are not verified of section on Acuity. "+result9, YesNo.No);
						sa.assertTrue(false,  "The info message are not verified of section on Acuity. "+result9);
					}

					if (!bp.verifyViewAllButtonOnIntractionCard(5)) {
						log(LogStatus.INFO, "view All Button is not visible on Interaction section", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "view All Button is visible on Interaction section", YesNo.No);
						sa.assertTrue(false, "view All Button is visible on Interaction section");
					}

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc007_VerifyUIOfAcuityTabOnPortfolioCompanyRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord11;		
			
		String sectionHeader=ATCE_Section1;
		String tabsOnTagged=ATCE_Tabs1;
		String defaultTabOntagged="Firms";
		String message=bp.acuityDefaultMessage;

		String contactHeader=ATCE_ContactHeader1;

		String[] arrSectionHeader=sectionHeader.split("<break>");		
		List<String> sectionHeaderName = new ArrayList<String>(Arrays.asList(arrSectionHeader));
		
		String[] infoMessage=  {bp.taggedInfoMessage,bp.interactionsInfoMessage,bp.contactInfoMessage,bp.dealInfoMessage};		


		String[] arrTabName= tabsOnTagged.split("<break>");		
		List<String> tabNameOnTagged = new ArrayList<String>(Arrays.asList(arrTabName));

		String[] arrContactHeader=contactHeader.split("<break>");
		List<String> contactHeaders = new ArrayList<String>(Arrays.asList(arrContactHeader));

		List<String> blankList=new ArrayList<String>();

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					ArrayList<String> result3=bp.verifySectionsAndTooltipOnAcuityTab(sectionHeaderName,sectionHeaderName);
					if(result3.isEmpty())
					{
						log(LogStatus.INFO, "Section Headers have been verified on acuity tab", YesNo.No);
					}					
					else
					{
						log(LogStatus.ERROR, "Section headers and Tooltip are not verified on acuity tab. "+result3, YesNo.No);
						sa.assertTrue(false, "Section headers and Tooltip are not verified on acuity tab. "+result3);
					}
					ArrayList<String> result4=bp.verifyTabsOnTaggedSection(tabNameOnTagged,defaultTabOntagged);
					if(result4.isEmpty())
					{
						log(LogStatus.INFO, "Default selected Tab and Tabs have been verified on Tagged section. ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "Default selected Tab and Tabs are not verified on Tagged section. "+result4, YesNo.No);
						sa.assertTrue(false, "Default selected Tab and Tabs are not verified on Tagged section. "+result4);
					}
					refresh(driver);

					ArrayList<String> result= bp.verifyColumnsAndMessageOnTabsOfTagged(tabNameOnTagged, message);
					if(result.isEmpty())
					{
						log(LogStatus.INFO, "The Column name, Time referenced and message has been verified ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Column name, Time referenced and message are not verified. "+result, YesNo.No);
						sa.assertTrue(false, "The Column name, Time referenced and message are not verified. "+result);
					}

					ArrayList<String> result1=bp.verifyHeaderNameAndMessageOnInteractionsContactsConnectionsAndDealsSection(message, contactHeaders, message, blankList, null,blankList,null,blankList,null);

					if(result1.isEmpty())
					{
						log(LogStatus.INFO, "The header name and message have been verified on Interaction and Contacts ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The header name and message are not verified on Interaction and Contacts. "+result1, YesNo.No);
						sa.assertTrue(false, "The header name and message are not verified on Interaction and Contacts "+result1);
					}

					ArrayList<String> result2=bp.verifyToolTipOnDealsConnctionsAndContactsHeader(blankList, contactHeaders, blankList,blankList);
					if(result2.isEmpty())
					{
						log(LogStatus.INFO, "The Tooltip on Contact header have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Tooltip on Contact header are not verified. "+result2, YesNo.No);
						sa.assertTrue(false, "The Tooltip on Contact header are not verified. "+result2);
					}
					
					if(bp.verifyUIOfLogACallAndCreateTaskButtonOnAcuity(true, true, true, true, false, false))
					{
						log(LogStatus.INFO, "The UI of Log a Call, Create Task and Add Contact icon on contact section have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified", YesNo.No);
						sa.assertTrue(false, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified");
					}
					
					ArrayList<String> result9=bp.infoMessageOfAcuitySection(arrSectionHeader, infoMessage);
					if(result9.isEmpty())
					{
						log(LogStatus.INFO, "The info message have been verified of section on Acuity", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The info message are not verified of section on Acuity. "+result9, YesNo.No);
						sa.assertTrue(false,  "The info message are not verified of section on Acuity. "+result9);
					}


					if (!bp.verifyViewAllButtonOnIntractionCard(5)) {
						log(LogStatus.INFO, "view All Button is not visible on Interaction section", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "view All Button is visible on Interaction section", YesNo.No);
						sa.assertTrue(false, "view All Button is visible on Interaction section");
					}

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc008_VerifyUIOfAcuityTabOnPrivateEquityRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord13;		
			
		String sectionHeader=ATCE_Section1;
		String tabsOnTagged=ATCE_Tabs1;
		String defaultTabOntagged="Firms";
		String message=bp.acuityDefaultMessage;

		String contactHeader=ATCE_ContactHeader1;

		String[] arrSectionHeader=sectionHeader.split("<break>");		
		List<String> sectionHeaderName = new ArrayList<String>(Arrays.asList(arrSectionHeader));
		
		String[] infoMessage=  {bp.taggedInfoMessage,bp.interactionsInfoMessage,bp.contactInfoMessage,bp.dealInfoMessage};		

		String[] arrTabName= tabsOnTagged.split("<break>");		
		List<String> tabNameOnTagged = new ArrayList<String>(Arrays.asList(arrTabName));

		String[] arrContactHeader=contactHeader.split("<break>");
		List<String> contactHeaders = new ArrayList<String>(Arrays.asList(arrContactHeader));

		List<String> blankList=new ArrayList<String>();

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					ArrayList<String> result3=bp.verifySectionsAndTooltipOnAcuityTab(sectionHeaderName,sectionHeaderName);
					if(result3.isEmpty())
					{
						log(LogStatus.INFO, "Section Headers have been verified on acuity tab", YesNo.No);
					}					
					else
					{
						log(LogStatus.ERROR, "Section headers and Tooltip are not verified on acuity tab. "+result3, YesNo.No);
						sa.assertTrue(false, "Section headers and Tooltip are not verified on acuity tab. "+result3);
					}
					ArrayList<String> result4=bp.verifyTabsOnTaggedSection(tabNameOnTagged,defaultTabOntagged);
					if(result4.isEmpty())
					{
						log(LogStatus.INFO, "Default selected Tab and Tabs have been verified on Tagged section. ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "Default selected Tab and Tabs are not verified on Tagged section. "+result4, YesNo.No);
						sa.assertTrue(false, "Default selected Tab and Tabs are not verified on Tagged section. "+result4);
					}
					refresh(driver);

					ArrayList<String> result= bp.verifyColumnsAndMessageOnTabsOfTagged(tabNameOnTagged, message);
					if(result.isEmpty())
					{
						log(LogStatus.INFO, "The Column name, Time referenced and message has been verified ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Column name, Time referenced and message are not verified. "+result, YesNo.No);
						sa.assertTrue(false, "The Column name, Time referenced and message are not verified. "+result);
					}

					ArrayList<String> result1=bp.verifyHeaderNameAndMessageOnInteractionsContactsConnectionsAndDealsSection(message, contactHeaders, message, blankList, null,blankList,null,blankList,null);

					if(result1.isEmpty())
					{
						log(LogStatus.INFO, "The header name and message have been verified on Interaction and Contacts ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The header name and message are not verified on Interaction and Contacts. "+result1, YesNo.No);
						sa.assertTrue(false, "The header name and message are not verified on Interaction and Contacts "+result1);
					}

					ArrayList<String> result2=bp.verifyToolTipOnDealsConnctionsAndContactsHeader(blankList, contactHeaders, blankList,blankList);
					if(result2.isEmpty())
					{
						log(LogStatus.INFO, "The Tooltip on Contact header have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Tooltip on Contact header are not verified. "+result2, YesNo.No);
						sa.assertTrue(false, "The Tooltip on Contact header are not verified. "+result2);
					}
					
					if(bp.verifyUIOfLogACallAndCreateTaskButtonOnAcuity(true, true, true, true, false, false))
					{
						log(LogStatus.INFO, "The UI of Log a Call, Create Task and Add Contact icon on contact section have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified", YesNo.No);
						sa.assertTrue(false, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified");
					}
					
					ArrayList<String> result9=bp.infoMessageOfAcuitySection(arrSectionHeader, infoMessage);
					if(result9.isEmpty())
					{
						log(LogStatus.INFO, "The info message have been verified of section on Acuity", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The info message are not verified of section on Acuity. "+result9, YesNo.No);
						sa.assertTrue(false,  "The info message are not verified of section on Acuity. "+result9);
					}


					if (!bp.verifyViewAllButtonOnIntractionCard(5)) {
						log(LogStatus.INFO, "view All Button is not visible on Interaction section", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "view All Button is visible on Interaction section", YesNo.No);
						sa.assertTrue(false, "view All Button is visible on Interaction section");
					}

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc009_VerifyUIOfAcuityTabOnContact(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);

		String recordName=ATCE_Con2;
		String sectionHeader=ATCE_Section3;
		String tabsOnTagged=ATCE_Tabs1;
		String defaultTabOntagged="Firms";
		String message=bp.acuityDefaultMessage;

		String internalconnectionHeader=ATCE_ConnectionHeader1;
		String externalconnectionHeader=ATCE_ConnectionHeader2;

		String[] arrSectionHeader=sectionHeader.split("<break>");		
		List<String> sectionHeaderName = new ArrayList<String>(Arrays.asList(arrSectionHeader));

		String[] infoMessage=  {bp.taggedInfoMessage,bp.interactionsInfoMessage,bp.connectionInfoMessage,bp.dealInfoMessage};		
		
		String[] arrTabName= tabsOnTagged.split("<break>");		
		List<String> tabNameOnTagged = new ArrayList<String>(Arrays.asList(arrTabName));

		String[] arrinternalConnnectionHeader=internalconnectionHeader.split("<break>");
		List<String> internalConnnectionHeaders = new ArrayList<String>(Arrays.asList(arrinternalConnnectionHeader));

		String[] arrExternalConnnectionHeader=externalconnectionHeader.split("<break>");
		List<String> externalConnnectionHeaders = new ArrayList<String>(Arrays.asList(arrExternalConnnectionHeader));

		
		List<String> blankList=new ArrayList<String>();

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);

					ArrayList<String> result3=bp.verifySectionsAndTooltipOnAcuityTab(sectionHeaderName,sectionHeaderName);
					if(result3.isEmpty())
					{
						log(LogStatus.INFO, "Section Headers have been verified on acuity tab", YesNo.No);

					}					
					else
					{
						log(LogStatus.ERROR, "Section headers and Tooltip are not verified on acuity tab. "+result3, YesNo.No);
						sa.assertTrue(false, "Section headers and Tooltip are not verified on acuity tab. "+result3);
					}
					ArrayList<String> result4=bp.verifyTabsOnTaggedSection(tabNameOnTagged,defaultTabOntagged);
					if(result4.isEmpty())
					{
						log(LogStatus.INFO, "Default selected Tab and Tabs have been verified on Tagged section. ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "Default selected Tab and Tabs are not verified on Tagged section. "+result4, YesNo.No);
						sa.assertTrue(false, "Default selected Tab and Tabs are not verified on Tagged section. "+result4);
					}
						refresh(driver);

						ArrayList<String> result= bp.verifyColumnsAndMessageOnTabsOfTagged(tabNameOnTagged, message);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Column name, Time referenced and message has been verified ", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Column name, Time referenced and message are not verified. "+result, YesNo.No);
							sa.assertTrue(false, "The Column name, Time referenced and message are not verified. "+result);
						}

						ArrayList<String> result1=bp.verifyHeaderNameAndMessageOnInteractionsContactsConnectionsAndDealsSection(message, blankList, null, blankList, null,internalConnnectionHeaders,message,externalConnnectionHeaders,message);

						if(result1.isEmpty())
						{
							log(LogStatus.INFO, "The header name and message have been verified on Interaction and Connection Section. "+result1, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The header name and message are not verified on Interaction and Connection Section. "+result1, YesNo.No);
							sa.assertTrue(false, "The header name and message are not verified on Interaction and Connection Section. "+result1);
						}

						ArrayList<String> result2=bp.verifyToolTipOnDealsConnctionsAndContactsHeader(blankList, blankList, internalConnnectionHeaders, externalConnnectionHeaders);
						if(result2.isEmpty())
						{
							log(LogStatus.INFO, "The Tooltip on connection header have been verified", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Tooltip on connection header are not verified. "+result2, YesNo.No);
							sa.assertTrue(false, "The Tooltip on connnection header are not verified. "+result2);
						}
						
						if(bp.verifyUIOfLogACallAndCreateTaskButtonOnAcuity(true, true, false, true, false, false))
						{
							log(LogStatus.INFO, "The UI of Log a Call, Create Task Notification icon, Internal button and External button have been verified", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The UI of Log a Call, Create Task Notification icon, Internal button and External button are not verified", YesNo.No);
							sa.assertTrue(false, "The UI of Log a Call, Create Task Notification icon, Internal button and External button are not verified");
						}
						
						ArrayList<String> result9=bp.infoMessageOfAcuitySection(arrSectionHeader, infoMessage);
						if(result9.isEmpty())
						{
							log(LogStatus.INFO, "The info message have been verified of section on Acuity", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The info message are not verified of section on Acuity. "+result9, YesNo.No);
							sa.assertTrue(false,  "The info message are not verified of section on Acuity. "+result9);
						}

						if (!bp.verifyViewAllButtonOnIntractionCard(5)) {
							log(LogStatus.INFO, "view All Button is not visible on Interaction section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "view All Button is visible on Interaction section", YesNo.No);
							sa.assertTrue(false, "view All Button is visible on Interaction section");
						}
					
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj2, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj2);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc010_VerifyUIOfAcuityTabOnDealRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Deal1;		
			
		String sectionHeader=ATCE_Section4;
		String tabsOnTagged=ATCE_Tabs1;
		String defaultTabOntagged="Firms";
		String message=bp.acuityDefaultMessage;

		String[] arrSectionHeader=sectionHeader.split("<break>");		
		List<String> sectionHeaderName = new ArrayList<String>(Arrays.asList(arrSectionHeader));
		
		String[] infoMessage=  {bp.taggedInfoMessage,bp.interactionsInfoMessage};		
		

		String[] arrTabName= tabsOnTagged.split("<break>");		
		List<String> tabNameOnTagged = new ArrayList<String>(Arrays.asList(arrTabName));

		List<String> blankList=new ArrayList<String>();

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj4)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					ArrayList<String> result3=bp.verifySectionsAndTooltipOnAcuityTab(sectionHeaderName,sectionHeaderName);
					if(result3.isEmpty())
					{
						log(LogStatus.INFO, "Section Headers have been verified on acuity tab", YesNo.No);
					}					
					else
					{
						log(LogStatus.ERROR, "Section headers and Tooltip are not verified on acuity tab. "+result3, YesNo.No);
						sa.assertTrue(false, "Section headers and Tooltip are not verified on acuity tab. "+result3);
					}
					ArrayList<String> result4=bp.verifyTabsOnTaggedSection(tabNameOnTagged,defaultTabOntagged);
					if(result4.isEmpty())
					{
						log(LogStatus.INFO, "Default selected Tab and Tabs have been verified on Tagged section. ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "Default selected Tab and Tabs are not verified on Tagged section. "+result4, YesNo.No);
						sa.assertTrue(false, "Default selected Tab and Tabs are not verified on Tagged section. "+result4);
					}
					refresh(driver);

					ArrayList<String> result= bp.verifyColumnsAndMessageOnTabsOfTagged(tabNameOnTagged, message);
					if(result.isEmpty())
					{
						log(LogStatus.INFO, "The Column name, Time referenced and message has been verified ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Column name, Time referenced and message are not verified. "+result, YesNo.No);
						sa.assertTrue(false, "The Column name, Time referenced and message are not verified. "+result);
					}

					
					if(bp.verifyUIOfLogACallAndCreateTaskButtonOnAcuity(true, true, false, true, false, false))
					{
						log(LogStatus.INFO, "The UI of Log a Call, Create Task and Add Contact icon on contact section have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified", YesNo.No);
						sa.assertTrue(false, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified");
					}
					
					ArrayList<String> result9=bp.infoMessageOfAcuitySection(arrSectionHeader, infoMessage);
					if(result9.isEmpty())
					{
						log(LogStatus.INFO, "The info message have been verified of section on Acuity", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The info message are not verified of section on Acuity. "+result9, YesNo.No);
						sa.assertTrue(false,  "The info message are not verified of section on Acuity. "+result9);
					}
					
					ArrayList<String> result1=bp.verifyHeaderNameAndMessageOnInteractionsContactsConnectionsAndDealsSection(message, blankList, null, blankList, null,blankList,null,blankList,null);

					if(result1.isEmpty())
					{
						log(LogStatus.INFO, "The header name and message have been verified on Interaction and Connection Section. "+result1, YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The header name and message are not verified on Interaction and Connection Section. "+result1, YesNo.No);
						sa.assertTrue(false, "The header name and message are not verified on Interaction and Connection Section. "+result1);
					}


					if (!bp.verifyViewAllButtonOnIntractionCard(5)) {
						log(LogStatus.INFO, "view All Button is not visible on Interaction section", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "view All Button is visible on Interaction section", YesNo.No);
						sa.assertTrue(false, "view All Button is visible on Interaction section");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj4, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj4);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc011_VerifyUIOfAcuityTabOnFundRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fund1;		
			
		String sectionHeader=ATCE_Section4;
		String tabsOnTagged=ATCE_Tabs1;
		String defaultTabOntagged="Firms";
		String message=bp.acuityDefaultMessage;

		String[] arrSectionHeader=sectionHeader.split("<break>");		
		List<String> sectionHeaderName = new ArrayList<String>(Arrays.asList(arrSectionHeader));
		
		String[] infoMessage=  {bp.taggedInfoMessage,bp.interactionsInfoMessage};	

		String[] arrTabName= tabsOnTagged.split("<break>");		
		List<String> tabNameOnTagged = new ArrayList<String>(Arrays.asList(arrTabName));

		List<String> blankList=new ArrayList<String>();

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj3)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj3, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					ArrayList<String> result3=bp.verifySectionsAndTooltipOnAcuityTab(sectionHeaderName,sectionHeaderName);
					if(result3.isEmpty())
					{
						log(LogStatus.INFO, "Section Headers have been verified on acuity tab", YesNo.No);
					}					
					else
					{
						log(LogStatus.ERROR, "Section headers and Tooltip are not verified on acuity tab. "+result3, YesNo.No);
						sa.assertTrue(false, "Section headers and Tooltip are not verified on acuity tab. "+result3);
					}
					ArrayList<String> result4=bp.verifyTabsOnTaggedSection(tabNameOnTagged,defaultTabOntagged);
					if(result4.isEmpty())
					{
						log(LogStatus.INFO, "Default selected Tab and Tabs have been verified on Tagged section. ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "Default selected Tab and Tabs are not verified on Tagged section. "+result4, YesNo.No);
						sa.assertTrue(false, "Default selected Tab and Tabs are not verified on Tagged section. "+result4);
					}
					refresh(driver);

					ArrayList<String> result= bp.verifyColumnsAndMessageOnTabsOfTagged(tabNameOnTagged, message);
					if(result.isEmpty())
					{
						log(LogStatus.INFO, "The Column name, Time referenced and message has been verified ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Column name, Time referenced and message are not verified. "+result, YesNo.No);
						sa.assertTrue(false, "The Column name, Time referenced and message are not verified. "+result);
					}

					
					if(bp.verifyUIOfLogACallAndCreateTaskButtonOnAcuity(true, true, false, true, false, false))
					{
						log(LogStatus.INFO, "The UI of Log a Call, Create Task and Add Contact icon on contact section have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified", YesNo.No);
						sa.assertTrue(false, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified");
					}
					
					ArrayList<String> result9=bp.infoMessageOfAcuitySection(arrSectionHeader, infoMessage);
					if(result9.isEmpty())
					{
						log(LogStatus.INFO, "The info message have been verified of section on Acuity", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The info message are not verified of section on Acuity. "+result9, YesNo.No);
						sa.assertTrue(false,  "The info message are not verified of section on Acuity. "+result9);
					}
					
					ArrayList<String> result1=bp.verifyHeaderNameAndMessageOnInteractionsContactsConnectionsAndDealsSection(message, blankList, null, blankList, null,blankList,null,blankList,null);

					if(result1.isEmpty())
					{
						log(LogStatus.INFO, "The header name and message have been verified on Interaction and Connection Section. "+result1, YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The header name and message are not verified on Interaction and Connection Section. "+result1, YesNo.No);
						sa.assertTrue(false, "The header name and message are not verified on Interaction and Connection Section. "+result1);
					}


					if (!bp.verifyViewAllButtonOnIntractionCard(5)) {
						log(LogStatus.INFO, "view All Button is not visible on Interaction section", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "view All Button is visible on Interaction section", YesNo.No);
						sa.assertTrue(false, "view All Button is visible on Interaction section");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj3, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj3);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc012_VerifyUIOfAcuityTabOnFundraisingRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fundraising1;		
			
		String sectionHeader=ATCE_Section4;
		String tabsOnTagged=ATCE_Tabs3;
		String defaultTabOntagged="Firms";
		String message=bp.acuityDefaultMessage;

		String[] arrSectionHeader=sectionHeader.split("<break>");		
		List<String> sectionHeaderName = new ArrayList<String>(Arrays.asList(arrSectionHeader));
		
		String[] infoMessage=  {bp.taggedInfoMessageFundarsing,bp.interactionsInfoMessage};	

		String[] arrTabName= tabsOnTagged.split("<break>");		
		List<String> tabNameOnTagged = new ArrayList<String>(Arrays.asList(arrTabName));

		List<String> blankList=new ArrayList<String>();

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : "+TabName.Fundraising.toString(), YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					ArrayList<String> result3=bp.verifySectionsAndTooltipOnAcuityTab(sectionHeaderName,sectionHeaderName);
					if(result3.isEmpty())
					{
						log(LogStatus.INFO, "Section Headers have been verified on acuity tab", YesNo.No);
					}					
					else
					{
						log(LogStatus.ERROR, "Section headers and Tooltip are not verified on acuity tab. "+result3, YesNo.No);
						sa.assertTrue(false, "Section headers and Tooltip are not verified on acuity tab. "+result3);
					}
					ArrayList<String> result4=bp.verifyTabsOnTaggedSection(tabNameOnTagged,defaultTabOntagged);
					if(result4.isEmpty())
					{
						log(LogStatus.INFO, "Default selected Tab and Tabs have been verified on Tagged section. ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "Default selected Tab and Tabs are not verified on Tagged section. "+result4, YesNo.No);
						sa.assertTrue(false, "Default selected Tab and Tabs are not verified on Tagged section. "+result4);
					}
					refresh(driver);

					ArrayList<String> result= bp.verifyColumnsAndMessageOnTabsOfTagged(tabNameOnTagged, message);
					if(result.isEmpty())
					{
						log(LogStatus.INFO, "The Column name, Time referenced and message has been verified ", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Column name, Time referenced and message are not verified. "+result, YesNo.No);
						sa.assertTrue(false, "The Column name, Time referenced and message are not verified. "+result);
					}

					
					if(bp.verifyUIOfLogACallAndCreateTaskButtonOnAcuity(true, true, false, true, false, false))
					{
						log(LogStatus.INFO, "The UI of Log a Call, Create Task and Add Contact icon on contact section have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified", YesNo.No);
						sa.assertTrue(false, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified");
					}
					
					ArrayList<String> result9=bp.infoMessageOfAcuitySection(arrSectionHeader, infoMessage);
					if(result9.isEmpty())
					{
						log(LogStatus.INFO, "The info message have been verified of section on Acuity", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The info message are not verified of section on Acuity. "+result9, YesNo.No);
						sa.assertTrue(false,  "The info message are not verified of section on Acuity. "+result9);
					}
					
					ArrayList<String> result1=bp.verifyHeaderNameAndMessageOnInteractionsContactsConnectionsAndDealsSection(message, blankList, null, blankList, null,blankList,null,blankList,null);

					if(result1.isEmpty())
					{
						log(LogStatus.INFO, "The header name and message have been verified on Interaction and Connection Section. "+result1, YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The header name and message are not verified on Interaction and Connection Section. "+result1, YesNo.No);
						sa.assertTrue(false, "The header name and message are not verified on Interaction and Connection Section. "+result1);
					}


					if (!bp.verifyViewAllButtonOnIntractionCard(5)) {
						log(LogStatus.INFO, "view All Button is not visible on Interaction section", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "view All Button is visible on Interaction section", YesNo.No);
						sa.assertTrue(false, "view All Button is visible on Interaction section");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+TabName.Fundraising.toString(), YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+TabName.Fundraising.toString());
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc013_VerifyUIOfAcuityTabOnThemeRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Theme1;		
			
		String sectionHeader=ATCE_Section5;
		
		String message=bp.acuityDefaultMessage;

		String[] arrSectionHeader=sectionHeader.split("<break>");		
		List<String> sectionHeaderName = new ArrayList<String>(Arrays.asList(arrSectionHeader));

		String[] infoMessage=  {bp.interactionsInfoMessage};	

		
		List<String> blankList=new ArrayList<String>();

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, TabName.Themes.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : "+TabName.Themes.toString(), YesNo.No);
			
			String parentWindowID=bp.clickOnThemeRecord(recordName);

			if (parentWindowID!=null) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					ArrayList<String> result3=bp.verifySectionsAndTooltipOnAcuityTab(sectionHeaderName,sectionHeaderName);
					if(result3.isEmpty())
					{
						log(LogStatus.INFO, "Section Headers have been verified on acuity tab", YesNo.No);
					}					
					else
					{
						log(LogStatus.ERROR, "Section headers and Tooltip are not verified on acuity tab. "+result3, YesNo.No);
						sa.assertTrue(false, "Section headers and Tooltip are not verified on acuity tab. "+result3);
					}
					
					if(bp.verifyUIOfLogACallAndCreateTaskButtonOnAcuity(true, true, false, true, false, false))
					{
						log(LogStatus.INFO, "The UI of Log a Call, Create Task and Add Contact icon on contact section have been verified", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified", YesNo.No);
						sa.assertTrue(false, "The UI of Log a Call, Create Task and Add Contact icon on contact section are not verified");
					}
					
					ArrayList<String> result9=bp.infoMessageOfAcuitySection(arrSectionHeader, infoMessage);
					if(result9.isEmpty())
					{
						log(LogStatus.INFO, "The info message have been verified of section on Acuity", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The info message are not verified of section on Acuity. "+result9, YesNo.No);
						sa.assertTrue(false,  "The info message are not verified of section on Acuity. "+result9);
					}
					
					ArrayList<String> result1=bp.verifyHeaderNameAndMessageOnInteractionsContactsConnectionsAndDealsSection(message, blankList, null, blankList, null,blankList,null,blankList,null);

					if(result1.isEmpty())
					{
						log(LogStatus.INFO, "The header name and message have been verified on Interaction and Connection Section. "+result1, YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The header name and message are not verified on Interaction and Connection Section. "+result1, YesNo.No);
						sa.assertTrue(false, "The header name and message are not verified on Interaction and Connection Section. "+result1);
					}


					if (!bp.verifyViewAllButtonOnIntractionCard(5)) {
						log(LogStatus.INFO, "view All Button is not visible on Interaction section", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "view All Button is visible on Interaction section", YesNo.No);
						sa.assertTrue(false, "view All Button is visible on Interaction section");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
			driver.close();
			driver.switchTo().window(parentWindowID);
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+TabName.Themes.toString(), YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+TabName.Themes.toString());
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	

	@Parameters({ "projectName" })
	@Test
	public void ATCETc014_CreateContactFromAddContactIconOnContactSection(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		ContactsPageBusinessLayer cp=new ContactsPageBusinessLayer(driver);
		
		String[] legalName= {ATCE_ContactLegalName1,ATCE_ContactLegalName2,ATCE_ContactLegalName3,ATCE_ContactLegalName4,ATCE_ContactLegalName5,ATCE_ContactLegalName6,ATCE_ContactLegalName7};
		
		String[][][] contactDetails= {{{"First Name",ATCE_ContactFirstName1},{"Last Name",ATCE_ContactLastName1},{"Email",ATCE_ContactEmail1},{"Title",ATCE_ContactTitle1}},
			{{"First Name",ATCE_ContactFirstName2},{"Last Name",ATCE_ContactLastName2},{"Email",ATCE_ContactEmail2},{"Title",ATCE_ContactTitle2}},
			{{"First Name",ATCE_ContactFirstName3},{"Last Name",ATCE_ContactLastName3},{"Email",ATCE_ContactEmail3},{"Title",ATCE_ContactTitle3}},
			{{"First Name",ATCE_ContactFirstName4},{"Last Name",ATCE_ContactLastName4},{"Email",ATCE_ContactEmail4},{"Title",ATCE_ContactTitle4}},
			{{"First Name",ATCE_ContactFirstName5},{"Last Name",ATCE_ContactLastName5},{"Email",ATCE_ContactEmail5},{"Title",ATCE_ContactTitle5}},
			{{"First Name",ATCE_ContactFirstName6},{"Last Name",ATCE_ContactLastName6},{"Email",ATCE_ContactEmail6},{"Title",ATCE_ContactTitle6}},
			{{"First Name",ATCE_ContactFirstName7},{"Last Name",ATCE_ContactLastName7},{"Email",ATCE_ContactEmail7},{"Title",ATCE_ContactTitle7}}};
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
		for(int i=0; i<legalName.length; i++)
		{
			System.err.println("Sou "+contactDetails[i]);
		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : "+tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					legalName[i], 30)) {
				log(LogStatus.INFO, legalName[i] + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					
					if(cp.createContactFromContactSectionOfAcuity(null,contactDetails[i]))
					{
						log(LogStatus.INFO, "The Contact have been created contact Name: "+contactDetails[i][0][0]+" "+contactDetails[i][1][1], YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Contact is not created contact Name: "+contactDetails[i][0][0]+" "+contactDetails[i][1][1], YesNo.No);
						sa.assertTrue(false, "The Contact is not created contact Name: "+contactDetails[i][0][0]+" "+contactDetails[i][1][1]);
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+legalName[i] +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+legalName[i] +" reocrd");
			}
		}

		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj1);
		}
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc015_VerifyUIOfConnectionPageAndMeetingAndCallPageOnCompanyRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord1;		
		
		String contactName=ATCE_ContactFullName1;
		String message=bp.acuityDefaultMessage;
		
		String[] meetingAndCall=ATCE_MeetingAndCallHeader.split("<break>");
		
		ArrayList<String> headerNameMeetingAndCall=new ArrayList<String>();
		for(String txt:meetingAndCall)
		{
			headerNameMeetingAndCall.add(txt);
		}

		String[] externalConnectionHeaderArr=ATCE_ConnectionHeader2.split("<break>");
		ArrayList<String> exteralHeaderName=new ArrayList<String>();
		for(String txt:externalConnectionHeaderArr)
		{
			exteralHeaderName.add(txt);
		}
		
		
		String[] val=ATCE_ConnectionHeader1.split("<break>");
		ArrayList<String> headerName=new ArrayList<String>();
		for(String txt:val)
		{
			headerName.add(txt);
		}

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					if(click(driver, bp.getConnectionIconOfContact(contactName, 20), "Connection icon of "+contactName, action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on Connection icon of "+contactName, YesNo.No);

						ArrayList<String> result=bp.verifyUIOfConnectionPopup(contactName, headerName, message,exteralHeaderName,message);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The UI of Connections popup have been verified", YesNo.No);
							sa.assertTrue(true,  "The UI of Connections popup have been verified");
						}
						else
						{
							log(LogStatus.ERROR, "The UI of Connections popup are not verified. "+result, YesNo.No);
							sa.assertTrue(false,  "The UI of Connections popup are not verified. "+result);

						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to Connection icon of "+contactName, YesNo.No);
						sa.assertTrue(false,  "Not able to Connection icon of "+contactName);
					}
					
					
					if(click(driver, bp.getMeetingAndCallCount(contactName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactName+" record on contact section",YesNo.No);
						
						ArrayList<String> result1=bp.verifyUIOfMeetingAndCallsPopup( headerNameMeetingAndCall, message);
						if(result1.isEmpty())
						{
							log(LogStatus.INFO, "The UI of Meeting and call page have been verified", YesNo.No);
							sa.assertTrue(true,  "The UI of Meeting and call page have been verified");
						}
						else
						{
							log(LogStatus.ERROR, "The UI of Meeting and call page are not verified. "+result1, YesNo.No);
							sa.assertTrue(false,  "The UI of Meeting and call page are not verified. "+result1);

						}					
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactName+" record on contact section",	YesNo.No);		
						sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactName+" record on contact section");
					}
					
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc016_VerifyUIOfConnectionPageAndMeetingAndCallPageOnInstitutionRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord3;		
		
		String contactName=ATCE_ContactFullName3;
		String message=bp.acuityDefaultMessage;
		
		String[] meetingAndCall=ATCE_MeetingAndCallHeader.split("<break>");
		
		ArrayList<String> headerNameMeetingAndCall=new ArrayList<String>();
		for(String txt:meetingAndCall)
		{
			headerNameMeetingAndCall.add(txt);
		}

		String[] externalConnectionHeaderArr=ATCE_ConnectionHeader2.split("<break>");
		ArrayList<String> exteralHeaderName=new ArrayList<String>();
		for(String txt:externalConnectionHeaderArr)
		{
			exteralHeaderName.add(txt);
		}
		
		
		String[] val=ATCE_ConnectionHeader1.split("<break>");
		ArrayList<String> headerName=new ArrayList<String>();
		for(String txt:val)
		{
			headerName.add(txt);
		}

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					if(click(driver, bp.getConnectionIconOfContact(contactName, 20), "Connection icon of "+contactName, action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on Connection icon of "+contactName, YesNo.No);

						ArrayList<String> result=bp.verifyUIOfConnectionPopup(contactName, headerName, message,exteralHeaderName,message);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The UI of Connections popup have been verified", YesNo.No);
							sa.assertTrue(true,  "The UI of Connections popup have been verified");
						}
						else
						{
							log(LogStatus.ERROR, "The UI of Connections popup are not verified. "+result, YesNo.No);
							sa.assertTrue(false,  "The UI of Connections popup are not verified. "+result);

						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to Connection icon of "+contactName, YesNo.No);
						sa.assertTrue(false,  "Not able to Connection icon of "+contactName);
					}
					
					
					if(click(driver, bp.getMeetingAndCallCount(contactName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactName+" record on contact section",YesNo.No);
						
						ArrayList<String> result1=bp.verifyUIOfMeetingAndCallsPopup( headerNameMeetingAndCall, message);
						if(result1.isEmpty())
						{
							log(LogStatus.INFO, "The UI of Meeting and call page have been verified", YesNo.No);
							sa.assertTrue(true,  "The UI of Meeting and call page have been verified");
						}
						else
						{
							log(LogStatus.ERROR, "The UI of Meeting and call page are not verified. "+result1, YesNo.No);
							sa.assertTrue(false,  "The UI of Meeting and call page are not verified. "+result1);

						}					
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactName+" record on contact section",	YesNo.No);		
						sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactName+" record on contact section");
					}
					
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc017_VerifyUIOfConnectionPageAndMeetingAndCallPageOnAdvisorRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord5;		
		
		String contactName=ATCE_ContactFullName9;
		String message=bp.acuityDefaultMessage;
		
		String[] meetingAndCall=ATCE_MeetingAndCallHeader.split("<break>");
		
		ArrayList<String> headerNameMeetingAndCall=new ArrayList<String>();
		for(String txt:meetingAndCall)
		{
			headerNameMeetingAndCall.add(txt);
		}

		String[] externalConnectionHeaderArr=ATCE_ConnectionHeader2.split("<break>");
		ArrayList<String> exteralHeaderName=new ArrayList<String>();
		for(String txt:externalConnectionHeaderArr)
		{
			exteralHeaderName.add(txt);
		}
		
		
		String[] val=ATCE_ConnectionHeader1.split("<break>");
		ArrayList<String> headerName=new ArrayList<String>();
		for(String txt:val)
		{
			headerName.add(txt);
		}

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					if(click(driver, bp.getConnectionIconOfContact(contactName, 20), "Connection icon of "+contactName, action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on Connection icon of "+contactName, YesNo.No);

						ArrayList<String> result=bp.verifyUIOfConnectionPopup(contactName, headerName, message,exteralHeaderName,message);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The UI of Connections popup have been verified", YesNo.No);
							sa.assertTrue(true,  "The UI of Connections popup have been verified");
						}
						else
						{
							log(LogStatus.ERROR, "The UI of Connections popup are not verified. "+result, YesNo.No);
							sa.assertTrue(false,  "The UI of Connections popup are not verified. "+result);

						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to Connection icon of "+contactName, YesNo.No);
						sa.assertTrue(false,  "Not able to Connection icon of "+contactName);
					}
					
					
					if(click(driver, bp.getMeetingAndCallCount(contactName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactName+" record on contact section",YesNo.No);
						
						ArrayList<String> result1=bp.verifyUIOfMeetingAndCallsPopup( headerNameMeetingAndCall, message);
						if(result1.isEmpty())
						{
							log(LogStatus.INFO, "The UI of Meeting and call page have been verified", YesNo.No);
							sa.assertTrue(true,  "The UI of Meeting and call page have been verified");
						}
						else
						{
							log(LogStatus.ERROR, "The UI of Meeting and call page are not verified. "+result1, YesNo.No);
							sa.assertTrue(false,  "The UI of Meeting and call page are not verified. "+result1);

						}					
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactName+" record on contact section",	YesNo.No);		
						sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactName+" record on contact section");
					}
					
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc018_VerifyUIOfConnectionPageAndMeetingAndCallPageOnLenderRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord7;		
		
		String contactName=ATCE_ContactFullName7;
		String message=bp.acuityDefaultMessage;
		
		String[] meetingAndCall=ATCE_MeetingAndCallHeader.split("<break>");
		
		ArrayList<String> headerNameMeetingAndCall=new ArrayList<String>();
		for(String txt:meetingAndCall)
		{
			headerNameMeetingAndCall.add(txt);
		}

		String[] externalConnectionHeaderArr=ATCE_ConnectionHeader2.split("<break>");
		ArrayList<String> exteralHeaderName=new ArrayList<String>();
		for(String txt:externalConnectionHeaderArr)
		{
			exteralHeaderName.add(txt);
		}
		
		
		String[] val=ATCE_ConnectionHeader1.split("<break>");
		ArrayList<String> headerName=new ArrayList<String>();
		for(String txt:val)
		{
			headerName.add(txt);
		}

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					if(click(driver, bp.getConnectionIconOfContact(contactName, 20), "Connection icon of "+contactName, action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on Connection icon of "+contactName, YesNo.No);

						ArrayList<String> result=bp.verifyUIOfConnectionPopup(contactName, headerName, message,exteralHeaderName,message);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The UI of Connections popup have been verified", YesNo.No);
							sa.assertTrue(true,  "The UI of Connections popup have been verified");
						}
						else
						{
							log(LogStatus.ERROR, "The UI of Connections popup are not verified. "+result, YesNo.No);
							sa.assertTrue(false,  "The UI of Connections popup are not verified. "+result);

						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to Connection icon of "+contactName, YesNo.No);
						sa.assertTrue(false,  "Not able to Connection icon of "+contactName);
					}
					
					
					if(click(driver, bp.getMeetingAndCallCount(contactName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactName+" record on contact section",YesNo.No);
						
						ArrayList<String> result1=bp.verifyUIOfMeetingAndCallsPopup( headerNameMeetingAndCall, message);
						if(result1.isEmpty())
						{
							log(LogStatus.INFO, "The UI of Meeting and call page have been verified", YesNo.No);
							sa.assertTrue(true,  "The UI of Meeting and call page have been verified");
						}
						else
						{
							log(LogStatus.ERROR, "The UI of Meeting and call page are not verified. "+result1, YesNo.No);
							sa.assertTrue(false,  "The UI of Meeting and call page are not verified. "+result1);

						}					
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactName+" record on contact section",	YesNo.No);		
						sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactName+" record on contact section");
					}
					
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc019_VerifyUIOfConnectionPageAndMeetingAndCallPageOnIntermediaryRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord9;		
		
		String contactName=ATCE_ContactFullName5;
		String message=bp.acuityDefaultMessage;
		
		String[] meetingAndCall=ATCE_MeetingAndCallHeader.split("<break>");
		
		ArrayList<String> headerNameMeetingAndCall=new ArrayList<String>();
		for(String txt:meetingAndCall)
		{
			headerNameMeetingAndCall.add(txt);
		}

		String[] externalConnectionHeaderArr=ATCE_ConnectionHeader2.split("<break>");
		ArrayList<String> exteralHeaderName=new ArrayList<String>();
		for(String txt:externalConnectionHeaderArr)
		{
			exteralHeaderName.add(txt);
		}
		
		
		String[] val=ATCE_ConnectionHeader1.split("<break>");
		ArrayList<String> headerName=new ArrayList<String>();
		for(String txt:val)
		{
			headerName.add(txt);
		}

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					if(click(driver, bp.getConnectionIconOfContact(contactName, 20), "Connection icon of "+contactName, action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on Connection icon of "+contactName, YesNo.No);

						ArrayList<String> result=bp.verifyUIOfConnectionPopup(contactName, headerName, message,exteralHeaderName,message);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The UI of Connections popup have been verified", YesNo.No);
							sa.assertTrue(true,  "The UI of Connections popup have been verified");
						}
						else
						{
							log(LogStatus.ERROR, "The UI of Connections popup are not verified. "+result, YesNo.No);
							sa.assertTrue(false,  "The UI of Connections popup are not verified. "+result);

						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to Connection icon of "+contactName, YesNo.No);
						sa.assertTrue(false,  "Not able to Connection icon of "+contactName);
					}
					
					
					if(click(driver, bp.getMeetingAndCallCount(contactName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactName+" record on contact section",YesNo.No);
						
						ArrayList<String> result1=bp.verifyUIOfMeetingAndCallsPopup( headerNameMeetingAndCall, message);
						if(result1.isEmpty())
						{
							log(LogStatus.INFO, "The UI of Meeting and call page have been verified", YesNo.No);
							sa.assertTrue(true,  "The UI of Meeting and call page have been verified");
						}
						else
						{
							log(LogStatus.ERROR, "The UI of Meeting and call page are not verified. "+result1, YesNo.No);
							sa.assertTrue(false,  "The UI of Meeting and call page are not verified. "+result1);

						}					
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactName+" record on contact section",	YesNo.No);		
						sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactName+" record on contact section");
					}
					
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc020_VerifyUIOfConnectionPageAndMeetingAndCallPageOnPortfolioCompanyRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord11;		
		
		String contactName=ATCE_ContactFullName11;
		String message=bp.acuityDefaultMessage;
		
		String[] meetingAndCall=ATCE_MeetingAndCallHeader.split("<break>");
		
		ArrayList<String> headerNameMeetingAndCall=new ArrayList<String>();
		for(String txt:meetingAndCall)
		{
			headerNameMeetingAndCall.add(txt);
		}

		String[] externalConnectionHeaderArr=ATCE_ConnectionHeader2.split("<break>");
		ArrayList<String> exteralHeaderName=new ArrayList<String>();
		for(String txt:externalConnectionHeaderArr)
		{
			exteralHeaderName.add(txt);
		}
		
		
		String[] val=ATCE_ConnectionHeader1.split("<break>");
		ArrayList<String> headerName=new ArrayList<String>();
		for(String txt:val)
		{
			headerName.add(txt);
		}

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					if(click(driver, bp.getConnectionIconOfContact(contactName, 20), "Connection icon of "+contactName, action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on Connection icon of "+contactName, YesNo.No);

						ArrayList<String> result=bp.verifyUIOfConnectionPopup(contactName, headerName, message,exteralHeaderName,message);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The UI of Connections popup have been verified", YesNo.No);
							sa.assertTrue(true,  "The UI of Connections popup have been verified");
						}
						else
						{
							log(LogStatus.ERROR, "The UI of Connections popup are not verified. "+result, YesNo.No);
							sa.assertTrue(false,  "The UI of Connections popup are not verified. "+result);

						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to Connection icon of "+contactName, YesNo.No);
						sa.assertTrue(false,  "Not able to Connection icon of "+contactName);
					}
					
					
					if(click(driver, bp.getMeetingAndCallCount(contactName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactName+" record on contact section",YesNo.No);
						
						ArrayList<String> result1=bp.verifyUIOfMeetingAndCallsPopup( headerNameMeetingAndCall, message);
						if(result1.isEmpty())
						{
							log(LogStatus.INFO, "The UI of Meeting and call page have been verified", YesNo.No);
							sa.assertTrue(true,  "The UI of Meeting and call page have been verified");
						}
						else
						{
							log(LogStatus.ERROR, "The UI of Meeting and call page are not verified. "+result1, YesNo.No);
							sa.assertTrue(false,  "The UI of Meeting and call page are not verified. "+result1);

						}					
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactName+" record on contact section",	YesNo.No);		
						sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactName+" record on contact section");
					}
					
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc021_VerifyUIOfConnectionPageAndMeetingAndCallPageOnPrivateEquityRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord13;		
		
		String contactName=ATCE_ContactFullName13;
		String message=bp.acuityDefaultMessage;
		
		String[] meetingAndCall=ATCE_MeetingAndCallHeader.split("<break>");
		
		ArrayList<String> headerNameMeetingAndCall=new ArrayList<String>();
		for(String txt:meetingAndCall)
		{
			headerNameMeetingAndCall.add(txt);
		}

		String[] externalConnectionHeaderArr=ATCE_ConnectionHeader2.split("<break>");
		ArrayList<String> exteralHeaderName=new ArrayList<String>();
		for(String txt:externalConnectionHeaderArr)
		{
			exteralHeaderName.add(txt);
		}
		
		
		String[] val=ATCE_ConnectionHeader1.split("<break>");
		ArrayList<String> headerName=new ArrayList<String>();
		for(String txt:val)
		{
			headerName.add(txt);
		}

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);
				if(bp.clicktabOnPage(TabName.Acuity.toString()))
				{
					log(LogStatus.INFO, "Clicked on Acuity Tab", YesNo.No);
					if(click(driver, bp.getConnectionIconOfContact(contactName, 20), "Connection icon of "+contactName, action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on Connection icon of "+contactName, YesNo.No);

						ArrayList<String> result=bp.verifyUIOfConnectionPopup(contactName, headerName, message,exteralHeaderName,message);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The UI of Connections popup have been verified", YesNo.No);
							sa.assertTrue(true,  "The UI of Connections popup have been verified");
						}
						else
						{
							log(LogStatus.ERROR, "The UI of Connections popup are not verified. "+result, YesNo.No);
							sa.assertTrue(false,  "The UI of Connections popup are not verified. "+result);

						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to Connection icon of "+contactName, YesNo.No);
						sa.assertTrue(false,  "Not able to Connection icon of "+contactName);
					}
					
					
					if(click(driver, bp.getMeetingAndCallCount(contactName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactName+" record on contact section",YesNo.No);
						
						ArrayList<String> result1=bp.verifyUIOfMeetingAndCallsPopup( headerNameMeetingAndCall, message);
						if(result1.isEmpty())
						{
							log(LogStatus.INFO, "The UI of Meeting and call page have been verified", YesNo.No);
							sa.assertTrue(true,  "The UI of Meeting and call page have been verified");
						}
						else
						{
							log(LogStatus.ERROR, "The UI of Meeting and call page are not verified. "+result1, YesNo.No);
							sa.assertTrue(false,  "The UI of Meeting and call page are not verified. "+result1);

						}					
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactName+" record on contact section",	YesNo.No);		
						sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactName+" record on contact section");
					}
					
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on Acuity Tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc022_CreateATaskAndLogACall(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		
		String activityType=ATCE_ATActivityType1;
		String taskSubject=ATCE_ATSubject1;
		String taskRelatedTo=ATCE_ATRelatedTo1;
		String taskNotes=ATCE_ATNote1;
		String taskStatus=ATCE_AdvanceStatus1;
		String taskPriority=ATCE_AdvancePriority1;	
		String dueDateDay=ATCE_ATDay1;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_001", excelLabel.Advance_Due_Date);
		
		String activityType1=ATCE_ATActivityType2;
		String taskSubject1=ATCE_ATSubject2;
		String taskRelatedTo1=ATCE_ATRelatedTo2;
		String taskNotes1=ATCE_ATNote2;	
		String dueDateDay1=ATCE_ATDay2;
		String taskDueDate1 = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay1));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate1, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_002", excelLabel.Advance_Due_Date);
	
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (bp.createActivityTimeline(projectName, true, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
			log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
			sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

		}
		else
		{
			log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
			sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
		}	 
		
		if (bp.createActivityTimeline(projectName, true, activityType1, basicsection1, advanceSection1, null, null, false, null, null,null, null,null,null)) {
			log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject1, YesNo.No);
			sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject1);

		}
		else
		{
			log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject1, YesNo.No);
			sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject1);
		}	 

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc023_VerifyTaskCallFunctionalityOnCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord1;
		String taskSubject=ATCE_ATSubject1;
		String taskRelatedTo=ATCE_ATRelatedTo1;
		String taskNotes=ATCE_ATNote1;
		String taskStatus=ATCE_AdvanceStatus1;
		String taskPriority=ATCE_AdvancePriority1;	
		String taskDueDate =ATCE_ATDueDate1;

		String taskSubject1=ATCE_ATSubject2;
		String taskRelatedTo1=ATCE_ATRelatedTo2;
		String taskNotes1=ATCE_ATNote2;

		String taskDueDate1 =ATCE_ATDueDate2;

		String contactSectionName=ATCE_ConName1;
		String contactSectionTitle=ATCE_ConTitle1;
		String contactSectionDeal=ATCE_ConDeal1;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall1;
		String contactSectionEmail=ATCE_ConEmail1;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName1,ATCE_TaggedFirmsName2,ATCE_TaggedFirmsName3,ATCE_TaggedFirmsName4,ATCE_TaggedFirmsName5,ATCE_TaggedFirmsName6,ATCE_TaggedFirmsName7,ATCE_TaggedFirmsName8,ATCE_TaggedFirmsName9};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount1,ATCE_TaggedFirmsCount2,ATCE_TaggedFirmsCount3,ATCE_TaggedFirmsCount4,ATCE_TaggedFirmsCount5,ATCE_TaggedFirmsCount6,ATCE_TaggedFirmsCount7,ATCE_TaggedFirmsCount8,ATCE_TaggedFirmsCount9};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName1,ATCE_TaggedPeopleName2,ATCE_TaggedPeopleName3,ATCE_TaggedPeopleName4,ATCE_TaggedPeopleName5,ATCE_TaggedPeopleName6};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount1,ATCE_TaggedPeopleCount2,ATCE_TaggedPeopleCount3,ATCE_TaggedPeopleCount4,ATCE_TaggedPeopleCount5,ATCE_TaggedPeopleCount6};

		String[] dealTaggedName= {ATCE_TaggedDealName1};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount1};

		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };

		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};

		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle1;
		String connectionDeal=ATCE_ConnectionDeal1;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall1;
		String connectionEmail=ATCE_ConnectionEmail1;

		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		String userName3=crmUser8FirstName+" "+crmUser8LastName;

		String[] participantArr=ATCE_ATParticipants2.split("<break>");
		String[] participants=new String[participantArr.length];

		for(int i=0; i<participantArr.length; i++)
		{
			if(participantArr[i].trim().equalsIgnoreCase("PE User 1"))
			{
				participants[i]=userName1;
			}
			else if(participantArr[i].trim().equalsIgnoreCase("PE User 2"))
			{
				participants[i]=userName2;
			}
			else if(participantArr[i].trim().equalsIgnoreCase("PE User 3"))
			{
				participants[i]=userName3;
			}
			else
			{
				participants[i]=participantArr[i];
			}
		}


		String[] tagsArr=ATCE_ATTags1.split("<break>");
		
		
		//lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
		lp.CRMLogin("navatariptesting+96281@gmail.com", adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.CompaniesTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					ArrayList<String> result = bp.verifyRecordOnInteractionCard(taskDueDate,IconType.Task,taskSubject, taskNotes, true, false,null,null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,taskSubject + " record has been verified on intraction",YesNo.No);
						sa.assertTrue(true,taskSubject + " record has been verified on intraction");
					} else {
						log(LogStatus.ERROR,taskSubject + " record is not verified on intraction. "+result,YesNo.No);
						sa.assertTrue(false,taskSubject + " record is not verified on intraction. "+result);
					}

					ArrayList<String> result1 = bp.verifyRecordOnInteractionCard(taskDueDate1,IconType.Call,taskSubject1, taskNotes1, true, false,null,null);
					if (result1.isEmpty()) {
						log(LogStatus.PASS,taskSubject1 + " record has been verified on intraction",YesNo.No);
						sa.assertTrue(true,taskSubject1 + " record has been verified on intraction");
					} else {
						log(LogStatus.ERROR,taskSubject1 + " record is not verified on intraction. "+result1,YesNo.No);
						sa.assertTrue(false,taskSubject1 + " record is not verified on intraction. "+result1);
					}

					ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.AcuityDetails);

					if(result2.isEmpty())
					{
						log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
						sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
					}
					else
					{
						log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
						sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);

					}

					ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.AcuityDetails);

					if(result3.isEmpty())
					{
						log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
						sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
					}
					else
					{
						log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
						sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);

					}

					String currentUrl = getURL(driver, 10);
					refresh(driver);

					if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject,20), "Edit button of "+taskSubject))
					{
						log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
						ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
						if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
							log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
						} else {
							log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
							sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
						sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject);
					}
					refresh(driver);

					if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject, 20), "Subject name "+taskSubject))
					{
						log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
						if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

							ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
							if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
							}
						}
						else
						{
							log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
							sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
						}

					}
					else
					{
						log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
						sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
					}

					refresh(driver);
					if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject1,20), "Edit button of "+taskSubject1))
					{
						log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
						ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
						if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
							log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
						} else {
							log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
							sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
						sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject1);
					}
					refresh(driver);
					if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject1, 20), "Subject name "+taskSubject1))
					{
						log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
						if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

							ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
							if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
							}

						}
						else
						{
							log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
						}


					}
					else
					{
						log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
						sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
					}



					ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
					if(result4.isEmpty())
					{
						log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
						sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
					}

					ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
					if(result5.isEmpty())
					{
						log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
						sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
					}

					if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);

						ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity("call", taskDueDate1, taskSubject1, taskNotes1, participants, tagsArr);
						if(result6.isEmpty())
						{
							log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
							sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
						}

					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
						sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
					}


					ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
					if(result7.isEmpty())
					{
						log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
						sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
					}

					if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
							action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
						String parentID=switchOnWindow(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity("call", taskDueDate1, taskSubject1, taskNotes1, participants, tagsArr);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
						}		
						driver.close();
						driver.switchTo().window(parentID);
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
						sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
					}

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc024_VerifyTaskCallFunctionalityOnAdvisorRecordType(String projectName) { 

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord5;
		String taskSubject=ATCE_ATSubject1;
		String taskRelatedTo=ATCE_ATRelatedTo1;
		String taskNotes=ATCE_ATNote1;
		String taskStatus=ATCE_AdvanceStatus1;
		String taskPriority=ATCE_AdvancePriority1;	
		String taskDueDate =ATCE_ATDueDate1;
		
		String taskSubject1=ATCE_ATSubject2;
		String taskRelatedTo1=ATCE_ATRelatedTo2;
		String taskNotes1=ATCE_ATNote2;
		
		String taskDueDate1 =ATCE_ATDueDate2;
		
		String contactSectionName=ATCE_ConName2;
		String contactSectionTitle=ATCE_ConTitle2;
		String contactSectionDeal=ATCE_ConDeal2;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall2;
		String contactSectionEmail=ATCE_ConEmail2;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName1,ATCE_TaggedFirmsName2,ATCE_TaggedFirmsName4,ATCE_TaggedFirmsName5,ATCE_TaggedFirmsName6,ATCE_TaggedFirmsName7,ATCE_TaggedFirmsName8,ATCE_TaggedFirmsName9,ATCE_TaggedFirmsName10};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount1,ATCE_TaggedFirmsCount2,ATCE_TaggedFirmsCount4,ATCE_TaggedFirmsCount5,ATCE_TaggedFirmsCount6,ATCE_TaggedFirmsCount7,ATCE_TaggedFirmsCount8,ATCE_TaggedFirmsCount9,ATCE_TaggedFirmsCount10};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName1,ATCE_TaggedPeopleName2,ATCE_TaggedPeopleName3,ATCE_TaggedPeopleName5,ATCE_TaggedPeopleName6,ATCE_TaggedPeopleName7};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount1,ATCE_TaggedPeopleCount2,ATCE_TaggedPeopleCount3,ATCE_TaggedPeopleCount5,ATCE_TaggedPeopleCount6,ATCE_TaggedPeopleCount7};
				
		String[] dealTaggedName= {ATCE_TaggedDealName1};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount1};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle1;
		String connectionDeal=ATCE_ConnectionDeal1;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall1;
		String connectionEmail=ATCE_ConnectionEmail1;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		String userName3=crmUser8FirstName+" "+crmUser8LastName;
		
		String[] participantArr=ATCE_ATParticipants2.split("<break>");
		String[] participants=new String[participantArr.length];
		
		for(int i=0; i<participantArr.length; i++)
		{
			if(participantArr[i].trim().equalsIgnoreCase("PE User 1"))
			{
				participants[i]=userName1;
			}
			else if(participantArr[i].trim().equalsIgnoreCase("PE User 2"))
			{
				participants[i]=userName2;
			}
			else if(participantArr[i].trim().equalsIgnoreCase("PE User 3"))
			{
				participants[i]=userName3;
			}
			else
			{
				participants[i]=participantArr[i];
			}
		}
		
		
		String[] tagsArr=ATCE_ATTags1.split("<break>");
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

						ArrayList<String> result = bp.verifyRecordOnInteractionCard(taskDueDate,IconType.Task,taskSubject, taskNotes, true, false,null,null);
						if (result.isEmpty()) {
							log(LogStatus.PASS,taskSubject + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject + " record is not verified on intraction. "+result,YesNo.No);
							sa.assertTrue(false,taskSubject + " record is not verified on intraction. "+result);
						}
						
						ArrayList<String> result1 = bp.verifyRecordOnInteractionCard(taskDueDate1,IconType.Call,taskSubject1, taskNotes1, true, false,null,null);
						if (result1.isEmpty()) {
							log(LogStatus.PASS,taskSubject1 + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject1 + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject1 + " record is not verified on intraction. "+result1,YesNo.No);
							sa.assertTrue(false,taskSubject1 + " record is not verified on intraction. "+result1);
						}
						
						ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.AcuityDetails);
						
						if(result2.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
						}
						else
						{
							log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
							
						}
						
                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.AcuityDetails);
						
						if(result3.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
							
						}
						
												
						String currentUrl = getURL(driver, 10);
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject,20), "Edit button of "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject);
						}
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject, 20), "Subject name "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}
							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
							}

						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject1,20), "Edit button of "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject1);
						}
						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject1, 20), "Subject name "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
							}


						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

						
						

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity("call", taskDueDate1, taskSubject1, taskNotes1, participants, tagsArr);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity("call", taskDueDate1, taskSubject1, taskNotes1, participants, tagsArr);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc025_VerifyTaskCallFunctionalityOnLendorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord7;
		String taskSubject=ATCE_ATSubject1;
		String taskRelatedTo=ATCE_ATRelatedTo1;
		String taskNotes=ATCE_ATNote1;
		String taskStatus=ATCE_AdvanceStatus1;
		String taskPriority=ATCE_AdvancePriority1;	
		String taskDueDate =ATCE_ATDueDate1;
		
		String taskSubject1=ATCE_ATSubject2;
		String taskRelatedTo1=ATCE_ATRelatedTo2;
		String taskNotes1=ATCE_ATNote2;
		
		String taskDueDate1 =ATCE_ATDueDate2;
		
		String contactSectionName=ATCE_ConName3;
		String contactSectionTitle=ATCE_ConTitle3;
		String contactSectionDeal=ATCE_ConDeal3;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall3;
		String contactSectionEmail=ATCE_ConEmail3;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName1,ATCE_TaggedFirmsName2,ATCE_TaggedFirmsName3,ATCE_TaggedFirmsName5,ATCE_TaggedFirmsName6,ATCE_TaggedFirmsName7,ATCE_TaggedFirmsName8,ATCE_TaggedFirmsName9,ATCE_TaggedFirmsName10};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount1,ATCE_TaggedFirmsCount3,ATCE_TaggedFirmsCount4,ATCE_TaggedFirmsCount5,ATCE_TaggedFirmsCount6,ATCE_TaggedFirmsCount7,ATCE_TaggedFirmsCount8,ATCE_TaggedFirmsCount9,ATCE_TaggedFirmsCount10};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName1,ATCE_TaggedPeopleName2,ATCE_TaggedPeopleName3,ATCE_TaggedPeopleName4,ATCE_TaggedPeopleName5,ATCE_TaggedPeopleName6,ATCE_TaggedPeopleName7};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount1,ATCE_TaggedPeopleCount2,ATCE_TaggedPeopleCount3,ATCE_TaggedPeopleCount4,ATCE_TaggedPeopleCount5,ATCE_TaggedPeopleCount6,ATCE_TaggedPeopleCount7};
				
		String[] dealTaggedName= {ATCE_TaggedDealName1};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount1};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
	
		String contactName=ATCE_ContactFullName7;
		String message=bp.acuityDefaultMessage;
		
		String[] meetingAndCall=ATCE_MeetingAndCallHeader.split("<break>");
		
		ArrayList<String> headerNameMeetingAndCall=new ArrayList<String>();
		for(String txt:meetingAndCall)
		{
			headerNameMeetingAndCall.add(txt);
		}

		String[] externalConnectionHeaderArr=ATCE_ConnectionHeader2.split("<break>");
		ArrayList<String> exteralHeaderName=new ArrayList<String>();
		for(String txt:externalConnectionHeaderArr)
		{
			exteralHeaderName.add(txt);
		}		
		String[] val=ATCE_ConnectionHeader1.split("<break>");
		ArrayList<String> headerName=new ArrayList<String>();
		for(String txt:val)
		{
			headerName.add(txt);
		}
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

						ArrayList<String> result = bp.verifyRecordOnInteractionCard(taskDueDate,IconType.Task,taskSubject, taskNotes, true, false,null,null);
						if (result.isEmpty()) {
							log(LogStatus.PASS,taskSubject + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject + " record is not verified on intraction. "+result,YesNo.No);
							sa.assertTrue(false,taskSubject + " record is not verified on intraction. "+result);
						}
						
						ArrayList<String> result1 = bp.verifyRecordOnInteractionCard(taskDueDate1,IconType.Call,taskSubject1, taskNotes1, true, false,null,null);
						if (result1.isEmpty()) {
							log(LogStatus.PASS,taskSubject1 + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject1 + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject1 + " record is not verified on intraction. "+result1,YesNo.No);
							sa.assertTrue(false,taskSubject1 + " record is not verified on intraction. "+result1);
						}
						
						ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.AcuityDetails);
						
						if(result2.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
							
						}
						
                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.AcuityDetails);
						
						if(result3.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
							
						}
						
						
						String currentUrl = getURL(driver, 10);
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject,20), "Edit button of "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject);
						}
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject, 20), "Subject name "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}
							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
							}

						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject1,20), "Edit button of "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject1);
						}
						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject1, 20), "Subject name "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
							}


						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

						

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getConnectionIconOfContact(contactName, 20), "Connection icon of "+contactName, action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "clicked on Connection icon of "+contactName, YesNo.No);

							ArrayList<String> result6=bp.verifyUIOfConnectionPopup(contactName, headerName, message,exteralHeaderName,message);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The UI of Connections popup have been verified", YesNo.No);
								sa.assertTrue(true,  "The UI of Connections popup have been verified");
							}
							else
							{
								log(LogStatus.ERROR, "The UI of Connections popup are not verified. "+result6, YesNo.No);
								sa.assertTrue(false,  "The UI of Connections popup are not verified. "+result6);

							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to Connection icon of "+contactName, YesNo.No);
							sa.assertTrue(false,  "Not able to Connection icon of "+contactName);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactName+" record on contact section",YesNo.No);
							
							ArrayList<String> result7=bp.verifyUIOfMeetingAndCallsPopup( headerNameMeetingAndCall, message);
							if(result7.isEmpty())
							{
								log(LogStatus.INFO, "The UI of Meeting and call page have been verified", YesNo.No);
								sa.assertTrue(true,  "The UI of Meeting and call page have been verified");
							}
							else
							{
								log(LogStatus.ERROR, "The UI of Meeting and call page are not verified. "+result7, YesNo.No);
								sa.assertTrue(false,  "The UI of Meeting and call page are not verified. "+result7);

							}					
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactName+" record on contact section");
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc026_VerifyTaskCallFunctionalityOnIntermediaryRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord9;
		String taskSubject=ATCE_ATSubject1;
		String taskRelatedTo=ATCE_ATRelatedTo1;
		String taskNotes=ATCE_ATNote1;
		String taskStatus=ATCE_AdvanceStatus1;
		String taskPriority=ATCE_AdvancePriority1;	
		String taskDueDate =ATCE_ATDueDate1;
		
		String taskSubject1=ATCE_ATSubject2;
		String taskRelatedTo1=ATCE_ATRelatedTo2;
		String taskNotes1=ATCE_ATNote2;
		
		String taskDueDate1 =ATCE_ATDueDate2;
		
		String contactSectionName=ATCE_ConName4;
		String contactSectionTitle=ATCE_ConTitle4;
		String contactSectionDeal=ATCE_ConDeal4;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall4;
		String contactSectionEmail=ATCE_ConEmail4;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName1,ATCE_TaggedFirmsName2,ATCE_TaggedFirmsName3,ATCE_TaggedFirmsName4,ATCE_TaggedFirmsName5,ATCE_TaggedFirmsName7,ATCE_TaggedFirmsName8,ATCE_TaggedFirmsName9,ATCE_TaggedFirmsName10};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount1,ATCE_TaggedFirmsCount3,ATCE_TaggedFirmsCount4,ATCE_TaggedFirmsCount4,ATCE_TaggedFirmsCount5,ATCE_TaggedFirmsCount7,ATCE_TaggedFirmsCount8,ATCE_TaggedFirmsCount9,ATCE_TaggedFirmsCount10};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName1,ATCE_TaggedPeopleName2,ATCE_TaggedPeopleName3,ATCE_TaggedPeopleName4,ATCE_TaggedPeopleName5,ATCE_TaggedPeopleName6,ATCE_TaggedPeopleName7};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount1,ATCE_TaggedPeopleCount2,ATCE_TaggedPeopleCount3,ATCE_TaggedPeopleCount4,ATCE_TaggedPeopleCount5,ATCE_TaggedPeopleCount6,ATCE_TaggedPeopleCount7};
				
		String[] dealTaggedName= {ATCE_TaggedDealName1};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount1};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
	
		String contactName=ATCE_ContactFullName5;
		String message=bp.acuityDefaultMessage;
		
		String[] meetingAndCall=ATCE_MeetingAndCallHeader.split("<break>");
		
		ArrayList<String> headerNameMeetingAndCall=new ArrayList<String>();
		for(String txt:meetingAndCall)
		{
			headerNameMeetingAndCall.add(txt);
		}

		String[] externalConnectionHeaderArr=ATCE_ConnectionHeader2.split("<break>");
		ArrayList<String> exteralHeaderName=new ArrayList<String>();
		for(String txt:externalConnectionHeaderArr)
		{
			exteralHeaderName.add(txt);
		}		
		String[] val=ATCE_ConnectionHeader1.split("<break>");
		ArrayList<String> headerName=new ArrayList<String>();
		for(String txt:val)
		{
			headerName.add(txt);
		}
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

						ArrayList<String> result = bp.verifyRecordOnInteractionCard(taskDueDate,IconType.Task,taskSubject, taskNotes, true, false,null,null);
						if (result.isEmpty()) {
							log(LogStatus.PASS,taskSubject + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject + " record is not verified on intraction. "+result,YesNo.No);
							sa.assertTrue(false,taskSubject + " record is not verified on intraction. "+result);
						}
						
						ArrayList<String> result1 = bp.verifyRecordOnInteractionCard(taskDueDate1,IconType.Call,taskSubject1, taskNotes1, true, false,null,null);
						if (result1.isEmpty()) {
							log(LogStatus.PASS,taskSubject1 + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject1 + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject1 + " record is not verified on intraction. "+result1,YesNo.No);
							sa.assertTrue(false,taskSubject1 + " record is not verified on intraction. "+result1);
						}
						
						ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.AcuityDetails);
						
						if(result2.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
							
						}
						
                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.AcuityDetails);
						
						if(result3.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
							
						}
						
						
						String currentUrl = getURL(driver, 10);
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject,20), "Edit button of "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject);
						}
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject, 20), "Subject name "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}
							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
							}

						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject1,20), "Edit button of "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject1);
						}
						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject1, 20), "Subject name "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
							}


						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}
						

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getConnectionIconOfContact(contactName, 20), "Connection icon of "+contactName, action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "clicked on Connection icon of "+contactName, YesNo.No);

							ArrayList<String> result6=bp.verifyUIOfConnectionPopup(contactName, headerName, message,exteralHeaderName,message);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The UI of Connections popup have been verified", YesNo.No);
								sa.assertTrue(true,  "The UI of Connections popup have been verified");
							}
							else
							{
								log(LogStatus.ERROR, "The UI of Connections popup are not verified. "+result6, YesNo.No);
								sa.assertTrue(false,  "The UI of Connections popup are not verified. "+result6);

							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to Connection icon of "+contactName, YesNo.No);
							sa.assertTrue(false,  "Not able to Connection icon of "+contactName);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactName+" record on contact section",YesNo.No);
							
							ArrayList<String> result7=bp.verifyUIOfMeetingAndCallsPopup( headerNameMeetingAndCall, message);
							if(result7.isEmpty())
							{
								log(LogStatus.INFO, "The UI of Meeting and call page have been verified", YesNo.No);
								sa.assertTrue(true,  "The UI of Meeting and call page have been verified");
							}
							else
							{
								log(LogStatus.ERROR, "The UI of Meeting and call page are not verified. "+result7, YesNo.No);
								sa.assertTrue(false,  "The UI of Meeting and call page are not verified. "+result7);

							}					
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactName+" record on contact section");
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc027_VerifyTaskCallFunctionalityOnInstitutionRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord3;
		String taskSubject=ATCE_ATSubject1;
		String taskRelatedTo=ATCE_ATRelatedTo1;
		String taskNotes=ATCE_ATNote1;
		String taskStatus=ATCE_AdvanceStatus1;
		String taskPriority=ATCE_AdvancePriority1;	
		String taskDueDate =ATCE_ATDueDate1;
		
		String taskSubject1=ATCE_ATSubject2;
		String taskRelatedTo1=ATCE_ATRelatedTo2;
		String taskNotes1=ATCE_ATNote2;
		
		String taskDueDate1 =ATCE_ATDueDate2;
		
		String contactSectionName=ATCE_ConName5;
		String contactSectionTitle=ATCE_ConTitle5;
		String contactSectionDeal=ATCE_ConDeal5;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall5;
		String contactSectionEmail=ATCE_ConEmail5;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName2,ATCE_TaggedFirmsName3,ATCE_TaggedFirmsName4,ATCE_TaggedFirmsName5,ATCE_TaggedFirmsName7,ATCE_TaggedFirmsName8,ATCE_TaggedFirmsName9,ATCE_TaggedFirmsName10};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount3,ATCE_TaggedFirmsCount4,ATCE_TaggedFirmsCount4,ATCE_TaggedFirmsCount5,ATCE_TaggedFirmsCount7,ATCE_TaggedFirmsCount8,ATCE_TaggedFirmsCount9,ATCE_TaggedFirmsCount10};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName1,ATCE_TaggedPeopleName2,ATCE_TaggedPeopleName3,ATCE_TaggedPeopleName4,ATCE_TaggedPeopleName5,ATCE_TaggedPeopleName6,ATCE_TaggedPeopleName7};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount1,ATCE_TaggedPeopleCount2,ATCE_TaggedPeopleCount3,ATCE_TaggedPeopleCount4,ATCE_TaggedPeopleCount5,ATCE_TaggedPeopleCount6,ATCE_TaggedPeopleCount7};
				
		String[] fundTaggedName= {ATCE_TaggedFundName1};
		String[] fundTaggedTimeReference= {ATCE_TaggedFundCount1};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
	
		String contactName=ATCE_ContactFullName3;
		String message=bp.acuityDefaultMessage;
		
		String[] meetingAndCall=ATCE_MeetingAndCallHeader.split("<break>");
		
		ArrayList<String> headerNameMeetingAndCall=new ArrayList<String>();
		for(String txt:meetingAndCall)
		{
			headerNameMeetingAndCall.add(txt);
		}

		String[] externalConnectionHeaderArr=ATCE_ConnectionHeader2.split("<break>");
		ArrayList<String> exteralHeaderName=new ArrayList<String>();
		for(String txt:externalConnectionHeaderArr)
		{
			exteralHeaderName.add(txt);
		}		
		String[] val=ATCE_ConnectionHeader1.split("<break>");
		ArrayList<String> headerName=new ArrayList<String>();
		for(String txt:val)
		{
			headerName.add(txt);
		}
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

						ArrayList<String> result = bp.verifyRecordOnInteractionCard(taskDueDate,IconType.Task,taskSubject, taskNotes, true, false,null,null);
						if (result.isEmpty()) {
							log(LogStatus.PASS,taskSubject + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject + " record is not verified on intraction. "+result,YesNo.No);
							sa.assertTrue(false,taskSubject + " record is not verified on intraction. "+result);
						}
						
						ArrayList<String> result1 = bp.verifyRecordOnInteractionCard(taskDueDate1,IconType.Call,taskSubject1, taskNotes1, true, false,null,null);
						if (result1.isEmpty()) {
							log(LogStatus.PASS,taskSubject1 + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject1 + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject1 + " record is not verified on intraction. "+result1,YesNo.No);
							sa.assertTrue(false,taskSubject1 + " record is not verified on intraction. "+result1);
						}
						
						ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.AcuityDetails);
						
						if(result2.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
							
						}
						
                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.AcuityDetails);
						
						if(result3.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
							
						}
						
						String currentUrl = getURL(driver, 10);
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject,20), "Edit button of "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject);
						}
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject, 20), "Subject name "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}
							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
							}

						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject1,20), "Edit button of "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject1);
						}
						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject1, 20), "Subject name "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
							}


						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

						

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null, null,true, fundTaggedName,fundTaggedTimeReference);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getConnectionIconOfContact(contactName, 20), "Connection icon of "+contactName, action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "clicked on Connection icon of "+contactName, YesNo.No);

							ArrayList<String> result6=bp.verifyUIOfConnectionPopup(contactName, headerName, message,exteralHeaderName,message);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The UI of Connections popup have been verified", YesNo.No);
								sa.assertTrue(true,  "The UI of Connections popup have been verified");
							}
							else
							{
								log(LogStatus.ERROR, "The UI of Connections popup are not verified. "+result6, YesNo.No);
								sa.assertTrue(false,  "The UI of Connections popup are not verified. "+result6);

							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to Connection icon of "+contactName, YesNo.No);
							sa.assertTrue(false,  "Not able to Connection icon of "+contactName);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactName+" record on contact section",YesNo.No);
							
							ArrayList<String> result7=bp.verifyUIOfMeetingAndCallsPopup( headerNameMeetingAndCall, message);
							if(result7.isEmpty())
							{
								log(LogStatus.INFO, "The UI of Meeting and call page have been verified", YesNo.No);
								sa.assertTrue(true,  "The UI of Meeting and call page have been verified");
							}
							else
							{
								log(LogStatus.ERROR, "The UI of Meeting and call page are not verified. "+result7, YesNo.No);
								sa.assertTrue(false,  "The UI of Meeting and call page are not verified. "+result7);

							}					
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactName+" record on contact section");
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc028_VerifyTaskCallFunctionalityOnPortfolioCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord11;
		String taskSubject=ATCE_ATSubject1;
		String taskRelatedTo=ATCE_ATRelatedTo1;
		String taskNotes=ATCE_ATNote1;
		String taskStatus=ATCE_AdvanceStatus1;
		String taskPriority=ATCE_AdvancePriority1;	
		String taskDueDate =ATCE_ATDueDate1;
		
		String taskSubject1=ATCE_ATSubject2;
		String taskRelatedTo1=ATCE_ATRelatedTo2;
		String taskNotes1=ATCE_ATNote2;
		
		String taskDueDate1 =ATCE_ATDueDate2;
		
		String contactSectionName=ATCE_ConName6;
		String contactSectionTitle=ATCE_ConTitle6;
		String contactSectionDeal=ATCE_ConDeal6;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall6;
		String contactSectionEmail=ATCE_ConEmail6;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName1,ATCE_TaggedFirmsName2,ATCE_TaggedFirmsName3,ATCE_TaggedFirmsName4,ATCE_TaggedFirmsName5,ATCE_TaggedFirmsName6,ATCE_TaggedFirmsName7,ATCE_TaggedFirmsName9,ATCE_TaggedFirmsName10};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount1,ATCE_TaggedFirmsCount2,ATCE_TaggedFirmsCount3,ATCE_TaggedFirmsCount4,ATCE_TaggedFirmsCount5,ATCE_TaggedFirmsCount6,ATCE_TaggedFirmsCount7,ATCE_TaggedFirmsCount9,ATCE_TaggedFirmsCount10};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName1,ATCE_TaggedPeopleName2,ATCE_TaggedPeopleName3,ATCE_TaggedPeopleName6,ATCE_TaggedPeopleName7};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount1,ATCE_TaggedPeopleCount2,ATCE_TaggedPeopleCount3,ATCE_TaggedPeopleCount6,ATCE_TaggedPeopleCount7};
				
		String[] dealTaggedName= {ATCE_TaggedDealName1};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount1};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle1;
		String connectionDeal=ATCE_ConnectionDeal1;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall1;
		String connectionEmail=ATCE_ConnectionEmail1;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		String userName3=crmUser8FirstName+" "+crmUser8LastName;
		
		String[] participantArr=ATCE_ATParticipants2.split("<break>");
		String[] participants=new String[participantArr.length];
		
		for(int i=0; i<participantArr.length; i++)
		{
			if(participantArr[i].trim().equalsIgnoreCase("PE User 1"))
			{
				participants[i]=userName1;
			}
			else if(participantArr[i].trim().equalsIgnoreCase("PE User 2"))
			{
				participants[i]=userName2;
			}
			else if(participantArr[i].trim().equalsIgnoreCase("PE User 3"))
			{
				participants[i]=userName3;
			}
			else
			{
				participants[i]=participantArr[i];
			}
		}
		
		
		String[] tagsArr=ATCE_ATTags1.split("<break>");
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

						ArrayList<String> result = bp.verifyRecordOnInteractionCard(taskDueDate,IconType.Task,taskSubject, taskNotes, true, false,null,null);
						if (result.isEmpty()) {
							log(LogStatus.PASS,taskSubject + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject + " record is not verified on intraction. "+result,YesNo.No);
							sa.assertTrue(false,taskSubject + " record is not verified on intraction. "+result);
						}
						
						ArrayList<String> result1 = bp.verifyRecordOnInteractionCard(taskDueDate1,IconType.Call,taskSubject1, taskNotes1, true, false,null,null);
						if (result1.isEmpty()) {
							log(LogStatus.PASS,taskSubject1 + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject1 + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject1 + " record is not verified on intraction. "+result1,YesNo.No);
							sa.assertTrue(false,taskSubject1 + " record is not verified on intraction. "+result1);
						}
						
						ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.AcuityDetails);
						
						if(result2.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
							
						}
						
                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.AcuityDetails);
						
						if(result3.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
							
						}
						
						String currentUrl = getURL(driver, 10);
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject,20), "Edit button of "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject);
						}
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject, 20), "Subject name "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}
							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
							}

						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject1,20), "Edit button of "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject1);
						}
						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject1, 20), "Subject name "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
							}


						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

						

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity("call", taskDueDate1, taskSubject1, taskNotes1, participants, tagsArr);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity("call", taskDueDate1, taskSubject1, taskNotes1, participants, tagsArr);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc029_VerifyTaskCallFunctionalityOnPrivateEquityRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord13;
		String taskSubject=ATCE_ATSubject1;
		String taskRelatedTo=ATCE_ATRelatedTo1;
		String taskNotes=ATCE_ATNote1;
		String taskStatus=ATCE_AdvanceStatus1;
		String taskPriority=ATCE_AdvancePriority1;	
		String taskDueDate =ATCE_ATDueDate1;
		
		String taskSubject1=ATCE_ATSubject2;
		String taskRelatedTo1=ATCE_ATRelatedTo2;
		String taskNotes1=ATCE_ATNote2;
		
		String taskDueDate1 =ATCE_ATDueDate2;
		
		String contactSectionName=ATCE_ConName7;
		String contactSectionTitle=ATCE_ConTitle7;
		String contactSectionDeal=ATCE_ConDeal7;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall7;
		String contactSectionEmail=ATCE_ConEmail7;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName1,ATCE_TaggedFirmsName2,ATCE_TaggedFirmsName3,ATCE_TaggedFirmsName4,ATCE_TaggedFirmsName5,ATCE_TaggedFirmsName6,ATCE_TaggedFirmsName7,ATCE_TaggedFirmsName8,ATCE_TaggedFirmsName10};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount1,ATCE_TaggedFirmsCount2,ATCE_TaggedFirmsCount3,ATCE_TaggedFirmsCount4,ATCE_TaggedFirmsCount5,ATCE_TaggedFirmsCount6,ATCE_TaggedFirmsCount7,ATCE_TaggedFirmsCount8,ATCE_TaggedFirmsCount10};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName1,ATCE_TaggedPeopleName2,ATCE_TaggedPeopleName3,ATCE_TaggedPeopleName4,ATCE_TaggedPeopleName5,ATCE_TaggedPeopleName7};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount1,ATCE_TaggedPeopleCount2,ATCE_TaggedPeopleCount3,ATCE_TaggedPeopleCount4,ATCE_TaggedPeopleCount5,ATCE_TaggedPeopleCount7};
				
		String[] dealTaggedName= {ATCE_TaggedDealName1};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount1};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle1;
		String connectionDeal=ATCE_ConnectionDeal1;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall1;
		String connectionEmail=ATCE_ConnectionEmail1;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		String userName3=crmUser8FirstName+" "+crmUser8LastName;
		
		String[] participantArr=ATCE_ATParticipants2.split("<break>");
		String[] participants=new String[participantArr.length];
		
		for(int i=0; i<participantArr.length; i++)
		{
			if(participantArr[i].trim().equalsIgnoreCase("PE User 1"))
			{
				participants[i]=userName1;
			}
			else if(participantArr[i].trim().equalsIgnoreCase("PE User 2"))
			{
				participants[i]=userName2;
			}
			else if(participantArr[i].trim().equalsIgnoreCase("PE User 3"))
			{
				participants[i]=userName3;
			}
			else
			{
				participants[i]=participantArr[i];
			}
		}
		
		
		String[] tagsArr=ATCE_ATTags1.split("<break>");
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

						ArrayList<String> result = bp.verifyRecordOnInteractionCard(taskDueDate,IconType.Task,taskSubject, taskNotes, true, false,null,null);
						if (result.isEmpty()) {
							log(LogStatus.PASS,taskSubject + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject + " record is not verified on intraction. "+result,YesNo.No);
							sa.assertTrue(false,taskSubject + " record is not verified on intraction. "+result);
						}
						
						ArrayList<String> result1 = bp.verifyRecordOnInteractionCard(taskDueDate1,IconType.Call,taskSubject1, taskNotes1, true, false,null,null);
						if (result1.isEmpty()) {
							log(LogStatus.PASS,taskSubject1 + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject1 + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject1 + " record is not verified on intraction. "+result1,YesNo.No);
							sa.assertTrue(false,taskSubject1 + " record is not verified on intraction. "+result1);
						}
						
						ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.AcuityDetails);
						
						if(result2.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
							
						}
						
                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.AcuityDetails);
						
						if(result3.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
							
						}
						
						String currentUrl = getURL(driver, 10);
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject,20), "Edit button of "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject);
						}
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject, 20), "Subject name "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}
							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
							}

						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject1,20), "Edit button of "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject1);
						}
						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject1, 20), "Subject name "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
							}


						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

						

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity("call", taskDueDate1, taskSubject1, taskNotes1, participants, tagsArr);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity("call", taskDueDate1, taskSubject1, taskNotes1, participants, tagsArr);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc030_VerifyTaskCallFunctionalityOnContactRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Con1;
		String taskSubject=ATCE_ATSubject1;
		String taskRelatedTo=ATCE_ATRelatedTo1;
		String taskNotes=ATCE_ATNote1;
		String taskStatus=ATCE_AdvanceStatus1;
		String taskPriority=ATCE_AdvancePriority1;	
		String taskDueDate =ATCE_ATDueDate1;
		
		String taskSubject1=ATCE_ATSubject2;
		String taskRelatedTo1=ATCE_ATRelatedTo2;
		String taskNotes1=ATCE_ATNote2;
		
		String taskDueDate1 =ATCE_ATDueDate2;
		
		String contactSectionName=ATCE_ConName7;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName1,ATCE_TaggedFirmsName2,ATCE_TaggedFirmsName3,ATCE_TaggedFirmsName4,ATCE_TaggedFirmsName5,ATCE_TaggedFirmsName6,ATCE_TaggedFirmsName7,ATCE_TaggedFirmsName8,ATCE_TaggedFirmsName9};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount1,ATCE_TaggedFirmsCount2,ATCE_TaggedFirmsCount3,ATCE_TaggedFirmsCount4,ATCE_TaggedFirmsCount5,ATCE_TaggedFirmsCount6,ATCE_TaggedFirmsCount7,ATCE_TaggedFirmsCount8,ATCE_TaggedFirmsCount9};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName1,ATCE_TaggedPeopleName2,ATCE_TaggedPeopleName3,ATCE_TaggedPeopleName4,ATCE_TaggedPeopleName5,ATCE_TaggedPeopleName6};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount1,ATCE_TaggedPeopleCount2,ATCE_TaggedPeopleCount3,ATCE_TaggedPeopleCount4,ATCE_TaggedPeopleCount5,ATCE_TaggedPeopleCount6};
				
		String[] dealTaggedName= {ATCE_TaggedDealName1};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount1};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle1;
		String connectionDeal=ATCE_ConnectionDeal1;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall1;
		String connectionEmail=ATCE_ConnectionEmail1;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		String userName3=crmUser8FirstName+" "+crmUser8LastName;
		
		String[] participantArr=ATCE_ATParticipants2.split("<break>");
		String[] participants=new String[participantArr.length];
		
		for(int i=0; i<participantArr.length; i++)
		{
			if(participantArr[i].trim().equalsIgnoreCase("PE User 1"))
			{
				participants[i]=userName1;
			}
			else if(participantArr[i].trim().equalsIgnoreCase("PE User 2"))
			{
				participants[i]=userName2;
			}
			else if(participantArr[i].trim().equalsIgnoreCase("PE User 3"))
			{
				participants[i]=userName3;
			}
			else
			{
				participants[i]=participantArr[i];
			}
		}
		
		
		String[] tagsArr=ATCE_ATTags1.split("<break>");
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj2)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

						ArrayList<String> result = bp.verifyRecordOnInteractionCard(taskDueDate,IconType.Task,taskSubject, taskNotes, true, false,null,null);
						if (result.isEmpty()) {
							log(LogStatus.PASS,taskSubject + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject + " record is not verified on intraction. "+result,YesNo.No);
							sa.assertTrue(false,taskSubject + " record is not verified on intraction. "+result);
						}
						
						ArrayList<String> result1 = bp.verifyRecordOnInteractionCard(taskDueDate1,IconType.Call,taskSubject1, taskNotes1, true, false,null,null);
						if (result1.isEmpty()) {
							log(LogStatus.PASS,taskSubject1 + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject1 + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject1 + " record is not verified on intraction. "+result1,YesNo.No);
							sa.assertTrue(false,taskSubject1 + " record is not verified on intraction. "+result1);
						}
						
						ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.AcuityDetails);
						
						if(result2.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
							
						}
						
                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.AcuityDetails);
						
						if(result3.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
							
						}
						
						String currentUrl = getURL(driver, 10);
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject,20), "Edit button of "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject);
						}
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject, 20), "Subject name "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}
							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
							}

						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject1,20), "Edit button of "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject1);
						}
						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject1, 20), "Subject name "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
							}


						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

						
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
					
						ArrayList<String> result6=bp.verifyRecordOnConnectionsSectionInAcuity(recordName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);

						if(result6.isEmpty())
						{
							log(LogStatus.INFO, "The records have been verified on Connection section in Acuity user : "+connectionUserName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records are not verified on Connection section in Acuity. user : "+connectionUserName+" "+result6, YesNo.No);
							sa.assertTrue(false,  "The records are not verified on Connection section in Acuity.  user : "+connectionUserName+" "+result6);
						}
						
						
						
						if(click(driver, bp.getMeetingAndCallCount(connectionUserName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result7=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity("call", taskDueDate1, taskSubject1, taskNotes1, participants, tagsArr);
							if(result7.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result7, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result7);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj2, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj2);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc031_VerifyTaskCallFunctionalityOnDealRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Deal1;
	
		String taskSubject=ATCE_ATSubject1;
		String taskRelatedTo=ATCE_ATRelatedTo1;
		String taskNotes=ATCE_ATNote1;
		String taskStatus=ATCE_AdvanceStatus1;
		String taskPriority=ATCE_AdvancePriority1;	
		String taskDueDate =ATCE_ATDueDate1;
		
		String taskSubject1=ATCE_ATSubject2;
		String taskRelatedTo1=ATCE_ATRelatedTo2;
		String taskNotes1=ATCE_ATNote2;
		
		String taskDueDate1 =ATCE_ATDueDate2;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName1,ATCE_TaggedFirmsName2,ATCE_TaggedFirmsName3,ATCE_TaggedFirmsName4,ATCE_TaggedFirmsName5,ATCE_TaggedFirmsName6,ATCE_TaggedFirmsName7,ATCE_TaggedFirmsName8,ATCE_TaggedFirmsName9};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount1,ATCE_TaggedFirmsCount2,ATCE_TaggedFirmsCount3,ATCE_TaggedFirmsCount4,ATCE_TaggedFirmsCount5,ATCE_TaggedFirmsCount6,ATCE_TaggedFirmsCount7,ATCE_TaggedFirmsCount8,ATCE_TaggedFirmsCount9};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName1,ATCE_TaggedPeopleName2,ATCE_TaggedPeopleName3,ATCE_TaggedPeopleName4,ATCE_TaggedPeopleName5,ATCE_TaggedPeopleName6,ATCE_TaggedPeopleName7};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount1,ATCE_TaggedPeopleCount2,ATCE_TaggedPeopleCount3,ATCE_TaggedPeopleCount4,ATCE_TaggedPeopleCount5,ATCE_TaggedPeopleCount6,ATCE_TaggedPeopleCount7};
	
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj4)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

						ArrayList<String> result = bp.verifyRecordOnInteractionCard(taskDueDate,IconType.Task,taskSubject, taskNotes, true, false,null,null);
						if (result.isEmpty()) {
							log(LogStatus.PASS,taskSubject + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject + " record is not verified on intraction. "+result,YesNo.No);
							sa.assertTrue(false,taskSubject + " record is not verified on intraction. "+result);
						}
						
						ArrayList<String> result1 = bp.verifyRecordOnInteractionCard(taskDueDate1,IconType.Call,taskSubject1, taskNotes1, true, false,null,null);
						if (result1.isEmpty()) {
							log(LogStatus.PASS,taskSubject1 + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject1 + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject1 + " record is not verified on intraction. "+result1,YesNo.No);
							sa.assertTrue(false,taskSubject1 + " record is not verified on intraction. "+result1);
						}
						
						ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.AcuityDetails);
						
						if(result2.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
							
						}
						
                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.AcuityDetails);
						
						if(result3.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
							
						}
						
						String currentUrl = getURL(driver, 10);
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject,20), "Edit button of "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject);
						}
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject, 20), "Subject name "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}
							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
							}

						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject1,20), "Edit button of "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject1);
						}
						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject1, 20), "Subject name "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
							}


						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

												
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null, null,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
					
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc032_VerifyTaskCallFunctionalityOnFundraisingRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fundraising1;
	
		String taskSubject=ATCE_ATSubject1;
		String taskRelatedTo=ATCE_ATRelatedTo1;
		String taskNotes=ATCE_ATNote1;
		String taskStatus=ATCE_AdvanceStatus1;
		String taskPriority=ATCE_AdvancePriority1;	
		String taskDueDate =ATCE_ATDueDate1;
		
		String taskSubject1=ATCE_ATSubject2;
		String taskRelatedTo1=ATCE_ATRelatedTo2;
		String taskNotes1=ATCE_ATNote2;
		
		String taskDueDate1 =ATCE_ATDueDate2;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName1,ATCE_TaggedFirmsName2,ATCE_TaggedFirmsName3,ATCE_TaggedFirmsName4,ATCE_TaggedFirmsName5,ATCE_TaggedFirmsName6,ATCE_TaggedFirmsName7,ATCE_TaggedFirmsName8,ATCE_TaggedFirmsName9,ATCE_TaggedFirmsName10};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount1,ATCE_TaggedFirmsCount2,ATCE_TaggedFirmsCount3,ATCE_TaggedFirmsCount4,ATCE_TaggedFirmsCount5,ATCE_TaggedFirmsCount6,ATCE_TaggedFirmsCount7,ATCE_TaggedFirmsCount8,ATCE_TaggedFirmsCount9,ATCE_TaggedFirmsCount10};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName1,ATCE_TaggedPeopleName2,ATCE_TaggedPeopleName3,ATCE_TaggedPeopleName4,ATCE_TaggedPeopleName5,ATCE_TaggedPeopleName6,ATCE_TaggedPeopleName7};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount1,ATCE_TaggedPeopleCount2,ATCE_TaggedPeopleCount3,ATCE_TaggedPeopleCount4,ATCE_TaggedPeopleCount5,ATCE_TaggedPeopleCount6,ATCE_TaggedPeopleCount7};
	
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

				log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

						ArrayList<String> result = bp.verifyRecordOnInteractionCard(taskDueDate,IconType.Task,taskSubject, taskNotes, true, false,null,null);
						if (result.isEmpty()) {
							log(LogStatus.PASS,taskSubject + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject + " record is not verified on intraction. "+result,YesNo.No);
							sa.assertTrue(false,taskSubject + " record is not verified on intraction. "+result);
						}
						
						ArrayList<String> result1 = bp.verifyRecordOnInteractionCard(taskDueDate1,IconType.Call,taskSubject1, taskNotes1, true, false,null,null);
						if (result1.isEmpty()) {
							log(LogStatus.PASS,taskSubject1 + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject1 + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject1 + " record is not verified on intraction. "+result1,YesNo.No);
							sa.assertTrue(false,taskSubject1 + " record is not verified on intraction. "+result1);
						}
						
						ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.AcuityDetails);
						
						if(result2.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
							
						}
						
                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.AcuityDetails);
						
						if(result3.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
							
						}
						
						String currentUrl = getURL(driver, 10);
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject,20), "Edit button of "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject);
						}
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject, 20), "Subject name "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}
							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
							}

						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject1,20), "Edit button of "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject1);
						}
						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject1, 20), "Subject name "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
							}


						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

												
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null, null,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
					
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+TabName.Fundraising.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+TabName.Fundraising.toString());
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc033_VerifyTaskCallFunctionalityOnFundRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fund1;
	
		String taskSubject=ATCE_ATSubject1;
		String taskRelatedTo=ATCE_ATRelatedTo1;
		String taskNotes=ATCE_ATNote1;
		String taskStatus=ATCE_AdvanceStatus1;
		String taskPriority=ATCE_AdvancePriority1;	
		String taskDueDate =ATCE_ATDueDate1;
		
		String taskSubject1=ATCE_ATSubject2;
		String taskRelatedTo1=ATCE_ATRelatedTo2;
		String taskNotes1=ATCE_ATNote2;
		
		String taskDueDate1 =ATCE_ATDueDate2;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName1,ATCE_TaggedFirmsName2,ATCE_TaggedFirmsName3,ATCE_TaggedFirmsName4,ATCE_TaggedFirmsName5,ATCE_TaggedFirmsName6,ATCE_TaggedFirmsName7,ATCE_TaggedFirmsName8,ATCE_TaggedFirmsName9,ATCE_TaggedFirmsName10};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount1,ATCE_TaggedFirmsCount2,ATCE_TaggedFirmsCount3,ATCE_TaggedFirmsCount4,ATCE_TaggedFirmsCount5,ATCE_TaggedFirmsCount6,ATCE_TaggedFirmsCount7,ATCE_TaggedFirmsCount8,ATCE_TaggedFirmsCount9,ATCE_TaggedFirmsCount10};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName1,ATCE_TaggedPeopleName2,ATCE_TaggedPeopleName3,ATCE_TaggedPeopleName4,ATCE_TaggedPeopleName5,ATCE_TaggedPeopleName6,ATCE_TaggedPeopleName7};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount1,ATCE_TaggedPeopleCount2,ATCE_TaggedPeopleCount3,ATCE_TaggedPeopleCount4,ATCE_TaggedPeopleCount5,ATCE_TaggedPeopleCount6,ATCE_TaggedPeopleCount7};
	
		String[] dealTaggedName= {ATCE_TaggedDealName1};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount1};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj3)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj3, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

						ArrayList<String> result = bp.verifyRecordOnInteractionCard(taskDueDate,IconType.Task,taskSubject, taskNotes, true, false,null,null);
						if (result.isEmpty()) {
							log(LogStatus.PASS,taskSubject + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject + " record is not verified on intraction. "+result,YesNo.No);
							sa.assertTrue(false,taskSubject + " record is not verified on intraction. "+result);
						}
						
						ArrayList<String> result1 = bp.verifyRecordOnInteractionCard(taskDueDate1,IconType.Call,taskSubject1, taskNotes1, true, false,null,null);
						if (result1.isEmpty()) {
							log(LogStatus.PASS,taskSubject1 + " record has been verified on intraction",YesNo.No);
							sa.assertTrue(true,taskSubject1 + " record has been verified on intraction");
						} else {
							log(LogStatus.ERROR,taskSubject1 + " record is not verified on intraction. "+result1,YesNo.No);
							sa.assertTrue(false,taskSubject1 + " record is not verified on intraction. "+result1);
						}
						
						ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.AcuityDetails);
						
						if(result2.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
							
						}
						
                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.AcuityDetails);
						
						if(result3.isEmpty())
						{
							log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
							sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
						}
						else
						{
							log(LogStatus.ERROR,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
							sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
							
						}
						
						String currentUrl = getURL(driver, 10);
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject,20), "Edit button of "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject);
						}
						refresh(driver);

						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject, 20), "Subject name "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}
							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
							}

						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject1,20), "Edit button of "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
							if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject1);
						}
						refresh(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject1, 20), "Subject name "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

								ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
								if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
									log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
								} else {
									log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
									sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
							}


						}
						else
						{
							log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
						}

												
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
					
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj3, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj3);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc034_VerifyTaskCallFunctionalityOnThemeRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Theme1;	

		String taskSubject=ATCE_ATSubject1;
		String taskRelatedTo=ATCE_ATRelatedTo1;
		String taskNotes=ATCE_ATNote1;
		String taskStatus=ATCE_AdvanceStatus1;
		String taskPriority=ATCE_AdvancePriority1;	
		String taskDueDate =ATCE_ATDueDate1;

		String taskSubject1=ATCE_ATSubject2;
		String taskRelatedTo1=ATCE_ATRelatedTo2;
		String taskNotes1=ATCE_ATNote2;

		String taskDueDate1 =ATCE_ATDueDate2;

		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };

		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};


		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, TabName.Themes.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : "+TabName.Themes.toString(), YesNo.No);

			String parentWindowID=bp.clickOnThemeRecord(recordName);

			if (parentWindowID!=null) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					ArrayList<String> result = bp.verifyRecordOnInteractionCard(taskDueDate,IconType.Task,taskSubject, taskNotes, true, false,null,null);
					if (result.isEmpty()) {
						log(LogStatus.PASS,taskSubject + " record has been verified on intraction",YesNo.No);
						sa.assertTrue(true,taskSubject + " record has been verified on intraction");
					} else {
						log(LogStatus.ERROR,taskSubject + " record is not verified on intraction. "+result,YesNo.No);
						sa.assertTrue(false,taskSubject + " record is not verified on intraction. "+result);
					}

					ArrayList<String> result1 = bp.verifyRecordOnInteractionCard(taskDueDate1,IconType.Call,taskSubject1, taskNotes1, true, false,null,null);
					if (result1.isEmpty()) {
						log(LogStatus.PASS,taskSubject1 + " record has been verified on intraction",YesNo.No);
						sa.assertTrue(true,taskSubject1 + " record has been verified on intraction");
					} else {
						log(LogStatus.ERROR,taskSubject1 + " record is not verified on intraction. "+result1,YesNo.No);
						sa.assertTrue(false,taskSubject1 + " record is not verified on intraction. "+result1);
					}

					ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.AcuityDetails);

					if(result2.isEmpty())
					{
						log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
						sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
					}
					else
					{
						log(LogStatus.ERROR,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
						sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);

					}

					ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.AcuityDetails);

					if(result3.isEmpty())
					{
						log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
						sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
					}
					else
					{
						log(LogStatus.ERROR,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
						sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);

					}
					
					String currentUrl = getURL(driver, 10);
					refresh(driver);

					if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject,20), "Edit button of "+taskSubject))
					{
						log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
						ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
						if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
							log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
						} else {
							log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
							sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject,YesNo.No);
						sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject);
					}
					refresh(driver);

					if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject, 20), "Subject name "+taskSubject))
					{
						log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
						if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
						{
							log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

							ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
							if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
							}
						}
						else
						{
							log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
							sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
						}

					}
					else
					{
						log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
						sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
					}

					refresh(driver);
					if(CommonLib.clickUsingJavaScript(driver, bp.editButtonOnInteractionCard(taskSubject1,20), "Edit button of "+taskSubject1))
					{
						log(LogStatus.INFO,"Clicked on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
						ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
						if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
							log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
						} else {
							log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
							sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Edit button on interaction section of subject name "+taskSubject1,YesNo.No);
						sa.assertTrue(false, "Not able to click on Edit button on interaction section of subject name "+taskSubject1);
					}
					refresh(driver);
					if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionCard(taskSubject1, 20), "Subject name "+taskSubject1))
					{
						log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
						if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
						{
							log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

							ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection1,advanceSection1, null);
							if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
								log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
							} else {
								log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
								sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
							}

						}
						else
						{
							log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
							sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
						}


					}
					else
					{
						log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
						sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
					}


				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open "+recordName +" reocrd", YesNo.No);
				sa.assertTrue(false, "Not able to open "+recordName +" reocrd");
			}
			driver.close();
			driver.switchTo().window(parentWindowID);
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+TabName.Themes.toString(), YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+TabName.Themes.toString());
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc035_CreateATaskAndLogACallFromCompanyRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord1;
		String activityType=null;
		if(ATCE_ATActivityType3.trim().equals("Task"))
		{
			activityType="Create Task";
		}
		else if(ATCE_ATActivityType3.trim().equals("Call"))
		{
			activityType="Log a Call";
		}

		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo=ATCE_ATRelatedTo3;
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus2;
		String taskPriority=ATCE_AdvancePriority2;	
		String dueDateDay=ATCE_ATDay3;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_003", excelLabel.Advance_Due_Date);

		String activityType1=ATCE_ATActivityType4;
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1=ATCE_ATRelatedTo4;
		String taskNotes1=ATCE_ATNote4;	
		String dueDateDay1=ATCE_ATDay4;
		String taskDueDate1 = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay1));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate1, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_004", excelLabel.Advance_Due_Date);

		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };

		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.CompaniesTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
					}	 

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.CompaniesTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType1, basicsection1, advanceSection1, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject1);
					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject1);
					}	 
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc036_CreateATaskAndLogACallFromAdvisorRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord5;
		String activityType=null;
		if(ATCE_ATActivityType5.trim().equals("Task"))
		{
			activityType="Create Task";
		}
		else if(ATCE_ATActivityType5.trim().equals("Call"))
		{
			activityType="Log a Call";
		}

		String taskSubject=ATCE_ATSubject5;
		String taskRelatedTo=ATCE_ATRelatedTo5;
		String taskNotes=ATCE_ATNote5;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String dueDateDay=ATCE_ATDay5;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_005", excelLabel.Advance_Due_Date);

		String activityType1=ATCE_ATActivityType6;
		String taskSubject1=ATCE_ATSubject6;
		String taskRelatedTo1=ATCE_ATRelatedTo6;
		String taskNotes1=ATCE_ATNote6;	
		String dueDateDay1=ATCE_ATDay6;
		String taskDueDate1 = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay1));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate1, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_006", excelLabel.Advance_Due_Date);

		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };

		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
					}	 

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType1, basicsection1, advanceSection1, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject1);
					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject1);
					}	 
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc037_CreateATaskAndLogACallFromLendorRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord7;
		String activityType=null;
		if(ATCE_ATActivityType7.trim().equals("Task"))
		{
			activityType="Create Task";
		}
		else if(ATCE_ATActivityType7.trim().equals("Call"))
		{
			activityType="Log a Call";
		}

		String taskSubject=ATCE_ATSubject7;
		String taskRelatedTo=ATCE_ATRelatedTo7;
		String taskNotes=ATCE_ATNote7;
		String taskStatus=ATCE_AdvanceStatus4;
		String taskPriority=ATCE_AdvancePriority4;	
		String dueDateDay=ATCE_ATDay7;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_007", excelLabel.Advance_Due_Date);

		String activityType1=ATCE_ATActivityType8;
		String taskSubject1=ATCE_ATSubject8;
		String taskRelatedTo1=ATCE_ATRelatedTo8;
		String taskNotes1=ATCE_ATNote8;	
		String dueDateDay1=ATCE_ATDay8;
		String taskDueDate1 = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay1));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate1, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_008", excelLabel.Advance_Due_Date);

		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };

		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
					}	 

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType1, basicsection1, advanceSection1, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject1);
					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject1);
					}	 
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc038_CreateATaskAndLogACallFromIntermediaryRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord9;
		String activityType=null;
		if(ATCE_ATActivityType9.trim().equals("Task"))
		{
			activityType="Create Task";
		}
		else if(ATCE_ATActivityType9.trim().equals("Call"))
		{
			activityType="Log a Call";
		}

		String taskSubject=ATCE_ATSubject9;
		String taskRelatedTo=ATCE_ATRelatedTo9;
		String taskNotes=ATCE_ATNote9;
		String taskStatus=ATCE_AdvanceStatus5;
		String taskPriority=ATCE_AdvancePriority5;	
		String dueDateDay=ATCE_ATDay9;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_009", excelLabel.Advance_Due_Date);

		String activityType1=ATCE_ATActivityType10;
		String taskSubject1=ATCE_ATSubject10;
		String taskRelatedTo1=ATCE_ATRelatedTo10;
		String taskNotes1=ATCE_ATNote10;	
		String dueDateDay1=ATCE_ATDay10;
		String taskDueDate1 = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay1));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate1, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_010", excelLabel.Advance_Due_Date);

		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };

		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
					}	 

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType1, basicsection1, advanceSection1, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject1);
					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject1);
					}	 
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc039_CreateATaskAndLogACallFromInstitutionRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord3;
		String activityType=null;
		if(ATCE_ATActivityType11.trim().equals("Task"))
		{
			activityType="Create Task";
		}
		else if(ATCE_ATActivityType11.trim().equals("Call"))
		{
			activityType="Log a Call";
		}

		String taskSubject=ATCE_ATSubject11;
		String taskRelatedTo=ATCE_ATRelatedTo11;
		String taskNotes=ATCE_ATNote11;
		String taskStatus=ATCE_AdvanceStatus6;
		String taskPriority=ATCE_AdvancePriority6;	
		String dueDateDay=ATCE_ATDay11;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_011", excelLabel.Advance_Due_Date);

		String activityType1=ATCE_ATActivityType12;
		String taskSubject1=ATCE_ATSubject12;
		String taskRelatedTo1=ATCE_ATRelatedTo12;
		String taskNotes1=ATCE_ATNote12;	
		String dueDateDay1=ATCE_ATDay12;
		String taskDueDate1 = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay1));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate1, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_012", excelLabel.Advance_Due_Date);

		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };

		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
					}	 

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType1, basicsection1, advanceSection1, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject1);
					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject1);
					}	 
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc040_CreateATaskAndLogACallFromPortfolioCompanyRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord11;
		String activityType=null;
		if(ATCE_ATActivityType13.trim().equals("Task"))
		{
			activityType="Create Task";
		}
		else if(ATCE_ATActivityType13.trim().equals("Call"))
		{
			activityType="Log a Call";
		}

		String taskSubject=ATCE_ATSubject13;
		String taskRelatedTo=ATCE_ATRelatedTo13;
		String taskNotes=ATCE_ATNote13;
		String taskStatus=ATCE_AdvanceStatus7;
		String taskPriority=ATCE_AdvancePriority7;	
		String dueDateDay=ATCE_ATDay13;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_013", excelLabel.Advance_Due_Date);

		String activityType1=ATCE_ATActivityType14;
		String taskSubject1=ATCE_ATSubject14;
		String taskRelatedTo1=ATCE_ATRelatedTo14;
		String taskNotes1=ATCE_ATNote14;	
		String dueDateDay1=ATCE_ATDay14;
		String taskDueDate1 = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay1));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate1, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_014", excelLabel.Advance_Due_Date);

		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };

		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
					}	 

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType1, basicsection1, advanceSection1, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject1);
					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject1);
					}	 
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc041_CreateATaskAndLogACallFromPrivateEquityRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord13;
		String activityType=null;
		if(ATCE_ATActivityType15.trim().equals("Task"))
		{
			activityType="Create Task";
		}
		else if(ATCE_ATActivityType15.trim().equals("Call"))
		{
			activityType="Log a Call";
		}

		String taskSubject=ATCE_ATSubject15;
		String taskRelatedTo=ATCE_ATRelatedTo15;
		String taskNotes=ATCE_ATNote15;
		String taskStatus=ATCE_AdvanceStatus8;
		String taskPriority=ATCE_AdvancePriority8;	
		String dueDateDay=ATCE_ATDay15;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_015", excelLabel.Advance_Due_Date);

		String activityType1=ATCE_ATActivityType16;
		String taskSubject1=ATCE_ATSubject16;
		String taskRelatedTo1=ATCE_ATRelatedTo16;
		String taskNotes1=ATCE_ATNote16;	
		String dueDateDay1=ATCE_ATDay16;
		String taskDueDate1 = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay1));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate1, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_016", excelLabel.Advance_Due_Date);

		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };

		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
					}	 

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType1, basicsection1, advanceSection1, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject1);
					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject1);
					}	 
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc042_CreateATaskAndLogACallFromContactRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Con1;
		String activityType=null;
		if(ATCE_ATActivityType17.trim().equals("Task"))
		{
			activityType="Create Task";
		}
		else if(ATCE_ATActivityType17.trim().equals("Call"))
		{
			activityType="Log a Call";
		}

		String taskSubject=ATCE_ATSubject17;
		String taskRelatedTo=ATCE_ATRelatedTo17;
		String taskNotes=ATCE_ATNote17;
		String taskStatus=ATCE_AdvanceStatus9;
		String taskPriority=ATCE_AdvancePriority9;	
		String dueDateDay=ATCE_ATDay17;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_017", excelLabel.Advance_Due_Date);

		String activityType1=ATCE_ATActivityType18;
		String taskSubject1=ATCE_ATSubject18;
		String taskRelatedTo1=ATCE_ATRelatedTo18;
		String taskNotes1=ATCE_ATNote18;	
		String dueDateDay1=ATCE_ATDay18;
		String taskDueDate1 = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay1));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate1, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_018", excelLabel.Advance_Due_Date);

		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };

		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
					}	 

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj2, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj2);
		}

		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType1, basicsection1, advanceSection1, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject1);
					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject1);
					}	 
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj2, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj2);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc043_CreateATaskAndLogACallFromDealRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Deal1;
		String activityType=null;
		if(ATCE_ATActivityType19.trim().equals("Task"))
		{
			activityType="Create Task";
		}
		else if(ATCE_ATActivityType19.trim().equals("Call"))
		{
			activityType="Log a Call";
		}

		String taskSubject=ATCE_ATSubject19;
		String taskRelatedTo=ATCE_ATRelatedTo19;
		String taskNotes=ATCE_ATNote19;
		String taskStatus=ATCE_AdvanceStatus10;
		String taskPriority=ATCE_AdvancePriority10;	
		String dueDateDay=ATCE_ATDay19;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_019", excelLabel.Advance_Due_Date);

		String activityType1=ATCE_ATActivityType20;
		String taskSubject1=ATCE_ATSubject20;
		String taskRelatedTo1=ATCE_ATRelatedTo20;
		String taskNotes1=ATCE_ATNote20;	
		String dueDateDay1=ATCE_ATDay20;
		String taskDueDate1 = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay1));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate1, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_020", excelLabel.Advance_Due_Date);

		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };

		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj4)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
					}	 

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
		}

		if (lp.clickOnTab(projectName, tabObj4)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType1, basicsection1, advanceSection1, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject1);
					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject1);
					}	 
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc044_CreateATaskAndLogACallFromFundraisingRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fundraising1;
		String activityType=null;
		if(ATCE_ATActivityType21.trim().equals("Task"))
		{
			activityType="Create Task";
		}
		else if(ATCE_ATActivityType21.trim().equals("Call"))
		{
			activityType="Log a Call";
		}

		String taskSubject=ATCE_ATSubject21;
		String taskRelatedTo=ATCE_ATRelatedTo21;
		String taskNotes=ATCE_ATNote21;
		String taskStatus=ATCE_AdvanceStatus11;
		String taskPriority=ATCE_AdvancePriority11;	
		String dueDateDay=ATCE_ATDay21;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_021", excelLabel.Advance_Due_Date);

		String activityType1=ATCE_ATActivityType22;
		String taskSubject1=ATCE_ATSubject22;
		String taskRelatedTo1=ATCE_ATRelatedTo22;
		String taskNotes1=ATCE_ATNote22;	
		String dueDateDay1=ATCE_ATDay22;
		String taskDueDate1 = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay1));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate1, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_022", excelLabel.Advance_Due_Date);

		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };

		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
					}	 

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+TabName.Fundraising.toString(), YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+TabName.Fundraising.toString());
		}

		if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType1, basicsection1, advanceSection1, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject1);
					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject1);
					}	 
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+TabName.Fundraising.toString(), YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+TabName.Fundraising.toString());
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc045_CreateATaskAndLogACallFromFundRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fund1;
		String activityType=null;
		if(ATCE_ATActivityType23.trim().equals("Task"))
		{
			activityType="Create Task";
		}
		else if(ATCE_ATActivityType23.trim().equals("Call"))
		{
			activityType="Log a Call";
		}

		String taskSubject=ATCE_ATSubject23;
		String taskRelatedTo=ATCE_ATRelatedTo23;
		String taskNotes=ATCE_ATNote23;
		String taskStatus=ATCE_AdvanceStatus12;
		String taskPriority=ATCE_AdvancePriority12;	
		String dueDateDay=ATCE_ATDay23;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_023", excelLabel.Advance_Due_Date);

		String activityType1=ATCE_ATActivityType24;
		String taskSubject1=ATCE_ATSubject24;
		String taskRelatedTo1=ATCE_ATRelatedTo24;
		String taskNotes1=ATCE_ATNote24;	
		String dueDateDay1=ATCE_ATDay24;
		String taskDueDate1 = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay1));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate1, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_024", excelLabel.Advance_Due_Date);

		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };

		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj3)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj3, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
					}	 

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj3, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj3);
		}

		if (lp.clickOnTab(projectName, tabObj3)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj3, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType1, basicsection1, advanceSection1, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject1);
					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject1);
					}	 
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj3, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj3);
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc046_CreateATaskAndLogACallFromThemeRecord(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Theme1;
		String activityType=null;
		if(ATCE_ATActivityType25.trim().equals("Task"))
		{
			activityType="Create Task";
		}
		else if(ATCE_ATActivityType25.trim().equals("Call"))
		{
			activityType="Log a Call";
		}

		String taskSubject=ATCE_ATSubject25;
		String taskRelatedTo=ATCE_ATRelatedTo25;
		String taskNotes=ATCE_ATNote25;
		String taskStatus=ATCE_AdvanceStatus13;
		String taskPriority=ATCE_AdvancePriority13;	
		String dueDateDay=ATCE_ATDay25;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_025", excelLabel.Advance_Due_Date);

		String activityType1=ATCE_ATActivityType26;
		String taskSubject1=ATCE_ATSubject26;
		String taskRelatedTo1=ATCE_ATRelatedTo26;
		String taskNotes1=ATCE_ATNote26;	
		String dueDateDay1=ATCE_ATDay26;
		String taskDueDate1 = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay1));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate1, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_026", excelLabel.Advance_Due_Date);

		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };

		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, TabName.Themes.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : "+TabName.Themes.toString(), YesNo.No);

			String parentWindowID=bp.clickOnThemeRecord(recordName);

			if (parentWindowID!=null) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
					}	 

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
			driver.close();
			driver.switchTo().window(parentWindowID);
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+TabName.Themes.toString(), YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+TabName.Themes.toString());
		}

		if (lp.clickOnTab(projectName, TabName.Themes.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : "+TabName.Themes.toString(), YesNo.No);

			String parentWindowID=bp.clickOnThemeRecord(recordName);

			if (parentWindowID!=null) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if (bp.createActivityTimeline(projectName, false, activityType1, basicsection1, advanceSection1, null, null, false, null, null,null, null,null,null)) {
						log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject1);
					}
					else
					{
						log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject1, YesNo.No);
						sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject1);
					}	 
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
			driver.close();
			driver.switchTo().window(parentWindowID);
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab : "+TabName.Themes.toString(), YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab : "+TabName.Themes.toString());
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc047_VerifyTaskCallFunctionalityOnCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord1;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String contactSectionName=ATCE_ConName8;
		String contactSectionTitle=ATCE_ConTitle8;
		String contactSectionDeal=ATCE_ConDeal8;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall8;
		String contactSectionEmail=ATCE_ConEmail8;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20};
				
		String[] dealTaggedName= {ATCE_TaggedDealName2};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount2};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle2;
		String connectionDeal=ATCE_ConnectionDeal2;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall2;
		String connectionEmail=ATCE_ConnectionEmail2;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType2,ATCE_ATActivityType12,ATCE_ATActivityType14,ATCE_ATActivityType16,ATCE_ATActivityType18,ATCE_ATActivityType20,ATCE_ATActivityType22,ATCE_ATActivityType24,ATCE_ATActivityType26};
		String[] date= {ATCE_ATDueDate2,ATCE_ATDueDate12,ATCE_ATDueDate14,ATCE_ATDueDate16,ATCE_ATDueDate18,ATCE_ATDueDate20,ATCE_ATDueDate22,ATCE_ATDueDate24,ATCE_ATDueDate26};
		String[] subject= {ATCE_ATSubject2,ATCE_ATSubject12,ATCE_ATSubject14,ATCE_ATSubject16,ATCE_ATSubject18,ATCE_ATSubject20,ATCE_ATSubject22,ATCE_ATSubject24,ATCE_ATSubject26};
		String[] notes= {ATCE_ATNote2,ATCE_ATNote12,ATCE_ATNote14,ATCE_ATNote16,ATCE_ATNote18,ATCE_ATNote20,ATCE_ATNote22,ATCE_ATNote24,ATCE_ATNote26};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag= {ATCE_ATTags2.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags20.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.CompaniesTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(ATCERecord1,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc048_VerifyTaskCallFunctionalityOnAdvisorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord5;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String contactSectionName=ATCE_ConName9;
		String contactSectionTitle=ATCE_ConTitle9;
		String contactSectionDeal=ATCE_ConDeal9;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall9;
		String contactSectionEmail=ATCE_ConEmail9;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23,ATCE_TaggedFirmsName24};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23,ATCE_TaggedFirmsCount24};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		String[] dealTaggedName= {ATCE_TaggedDealName2};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount2};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle2;
		String connectionDeal=ATCE_ConnectionDeal2;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall2;
		String connectionEmail=ATCE_ConnectionEmail2;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType2,ATCE_ATActivityType12,ATCE_ATActivityType14,ATCE_ATActivityType16,ATCE_ATActivityType18,ATCE_ATActivityType20,ATCE_ATActivityType22,ATCE_ATActivityType24,ATCE_ATActivityType26};
		String[] date= {ATCE_ATDueDate2,ATCE_ATDueDate12,ATCE_ATDueDate14,ATCE_ATDueDate16,ATCE_ATDueDate18,ATCE_ATDueDate20,ATCE_ATDueDate22,ATCE_ATDueDate24,ATCE_ATDueDate26};
		String[] subject= {ATCE_ATSubject2,ATCE_ATSubject12,ATCE_ATSubject14,ATCE_ATSubject16,ATCE_ATSubject18,ATCE_ATSubject20,ATCE_ATSubject22,ATCE_ATSubject24,ATCE_ATSubject26};
		String[] notes= {ATCE_ATNote2,ATCE_ATNote12,ATCE_ATNote14,ATCE_ATNote16,ATCE_ATNote18,ATCE_ATNote20,ATCE_ATNote22,ATCE_ATNote24,ATCE_ATNote26};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag= {ATCE_ATTags2.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags20.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
			
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(ATCERecord1,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc049_VerifyTaskCallFunctionalityOnLendorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord7;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String contactSectionName=ATCE_ConName10;
		String contactSectionTitle=ATCE_ConTitle10;
		String contactSectionDeal=ATCE_ConDeal10;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall10;
		String contactSectionEmail=ATCE_ConEmail10;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23,ATCE_TaggedFirmsName24};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23,ATCE_TaggedFirmsCount24};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		String[] dealTaggedName= {ATCE_TaggedDealName2};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount2};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle3;
		String connectionDeal=ATCE_ConnectionDeal3;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall3;
		String connectionEmail=ATCE_ConnectionEmail3;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType4,ATCE_ATActivityType6,ATCE_ATActivityType8,ATCE_ATActivityType10,ATCE_ATActivityType12,ATCE_ATActivityType14,ATCE_ATActivityType16,ATCE_ATActivityType18,ATCE_ATActivityType20,ATCE_ATActivityType22,ATCE_ATActivityType24,ATCE_ATActivityType26};
		String[] date= {ATCE_ATDueDate4,ATCE_ATDueDate6,ATCE_ATDueDate8,ATCE_ATDueDate10,ATCE_ATDueDate12,ATCE_ATDueDate14,ATCE_ATDueDate16,ATCE_ATDueDate18,ATCE_ATDueDate20,ATCE_ATDueDate22,ATCE_ATDueDate24,ATCE_ATDueDate26};
		String[] subject= {ATCE_ATSubject4,ATCE_ATSubject6,ATCE_ATSubject8,ATCE_ATSubject10,ATCE_ATSubject12,ATCE_ATSubject14,ATCE_ATSubject16,ATCE_ATSubject18,ATCE_ATSubject20,ATCE_ATSubject22,ATCE_ATSubject24,ATCE_ATSubject26};
		String[] notes= {ATCE_ATNote4,ATCE_ATNote6,ATCE_ATNote8,ATCE_ATNote10,ATCE_ATNote12,ATCE_ATNote14,ATCE_ATNote16,ATCE_ATNote18,ATCE_ATNote20,ATCE_ATNote22,ATCE_ATNote24,ATCE_ATNote26};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag= {ATCE_ATTags4.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags20.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
			
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(ATCERecord1,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc050_VerifyTaskCallFunctionalityOnIntermediaryRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord9;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String contactSectionName=ATCE_ConName11;
		String contactSectionTitle=ATCE_ConTitle11;
		String contactSectionDeal=ATCE_ConDeal11;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall11;
		String contactSectionEmail=ATCE_ConEmail11;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23,ATCE_TaggedFirmsName24};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23,ATCE_TaggedFirmsCount24};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		String[] dealTaggedName= {ATCE_TaggedDealName2};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount2};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle3;
		String connectionDeal=ATCE_ConnectionDeal3;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall3;
		String connectionEmail=ATCE_ConnectionEmail3;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType4,ATCE_ATActivityType6,ATCE_ATActivityType8,ATCE_ATActivityType10,ATCE_ATActivityType12,ATCE_ATActivityType14,ATCE_ATActivityType16,ATCE_ATActivityType18,ATCE_ATActivityType20,ATCE_ATActivityType22,ATCE_ATActivityType24,ATCE_ATActivityType26};
		String[] date= {ATCE_ATDueDate4,ATCE_ATDueDate6,ATCE_ATDueDate8,ATCE_ATDueDate10,ATCE_ATDueDate12,ATCE_ATDueDate14,ATCE_ATDueDate16,ATCE_ATDueDate18,ATCE_ATDueDate20,ATCE_ATDueDate22,ATCE_ATDueDate24,ATCE_ATDueDate26};
		String[] subject= {ATCE_ATSubject4,ATCE_ATSubject6,ATCE_ATSubject8,ATCE_ATSubject10,ATCE_ATSubject12,ATCE_ATSubject14,ATCE_ATSubject16,ATCE_ATSubject18,ATCE_ATSubject20,ATCE_ATSubject22,ATCE_ATSubject24,ATCE_ATSubject26};
		String[] notes= {ATCE_ATNote4,ATCE_ATNote6,ATCE_ATNote8,ATCE_ATNote10,ATCE_ATNote12,ATCE_ATNote14,ATCE_ATNote16,ATCE_ATNote18,ATCE_ATNote20,ATCE_ATNote22,ATCE_ATNote24,ATCE_ATNote26};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag= {ATCE_ATTags4.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags20.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
			
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	

	@Parameters({ "projectName" })
	@Test
	public void ATCETc051_VerifyTaskCallFunctionalityOnInstitutionRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord3;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String contactSectionName=ATCE_ConName12;
		String contactSectionTitle=ATCE_ConTitle12;
		String contactSectionDeal=ATCE_ConDeal12;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall12;
		String contactSectionEmail=ATCE_ConEmail12;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23,ATCE_TaggedFirmsName24};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23,ATCE_TaggedFirmsCount24};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		String[] fundTaggedName= {ATCE_TaggedFundName2};
		String[] fundTaggedTimeReference= {ATCE_TaggedFundCount2};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle3;
		String connectionDeal=ATCE_ConnectionDeal3;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall3;
		String connectionEmail=ATCE_ConnectionEmail3;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType4,ATCE_ATActivityType6,ATCE_ATActivityType8,ATCE_ATActivityType10,ATCE_ATActivityType12,ATCE_ATActivityType14,ATCE_ATActivityType16,ATCE_ATActivityType18,ATCE_ATActivityType20,ATCE_ATActivityType22,ATCE_ATActivityType24,ATCE_ATActivityType26};
		String[] date= {ATCE_ATDueDate4,ATCE_ATDueDate6,ATCE_ATDueDate8,ATCE_ATDueDate10,ATCE_ATDueDate12,ATCE_ATDueDate14,ATCE_ATDueDate16,ATCE_ATDueDate18,ATCE_ATDueDate20,ATCE_ATDueDate22,ATCE_ATDueDate24,ATCE_ATDueDate26};
		String[] subject= {ATCE_ATSubject4,ATCE_ATSubject6,ATCE_ATSubject8,ATCE_ATSubject10,ATCE_ATSubject12,ATCE_ATSubject14,ATCE_ATSubject16,ATCE_ATSubject18,ATCE_ATSubject20,ATCE_ATSubject22,ATCE_ATSubject24,ATCE_ATSubject26};
		String[] notes= {ATCE_ATNote4,ATCE_ATNote6,ATCE_ATNote8,ATCE_ATNote10,ATCE_ATNote12,ATCE_ATNote14,ATCE_ATNote16,ATCE_ATNote18,ATCE_ATNote20,ATCE_ATNote22,ATCE_ATNote24,ATCE_ATNote26};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag= {ATCE_ATTags4.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags20.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
			
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null,null,true,fundTaggedName, fundTaggedTimeReference);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc052_VerifyTaskCallFunctionalityOnPortfolioCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord11;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String contactSectionName=ATCE_ConName13;
		String contactSectionTitle=ATCE_ConTitle13;
		String contactSectionDeal=ATCE_ConDeal13;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall13;
		String contactSectionEmail=ATCE_ConEmail13;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23,ATCE_TaggedFirmsName24};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23,ATCE_TaggedFirmsCount24};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		String[] dealTaggedName= {ATCE_TaggedDealName2};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount2};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle2;
		String connectionDeal=ATCE_ConnectionDeal2;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall2;
		String connectionEmail=ATCE_ConnectionEmail2;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType2,ATCE_ATActivityType12,ATCE_ATActivityType14,ATCE_ATActivityType16,ATCE_ATActivityType18,ATCE_ATActivityType20,ATCE_ATActivityType22,ATCE_ATActivityType24,ATCE_ATActivityType26};
		String[] date= {ATCE_ATDueDate2,ATCE_ATDueDate12,ATCE_ATDueDate14,ATCE_ATDueDate16,ATCE_ATDueDate18,ATCE_ATDueDate20,ATCE_ATDueDate22,ATCE_ATDueDate24,ATCE_ATDueDate26};
		String[] subject= {ATCE_ATSubject2,ATCE_ATSubject12,ATCE_ATSubject14,ATCE_ATSubject16,ATCE_ATSubject18,ATCE_ATSubject20,ATCE_ATSubject22,ATCE_ATSubject24,ATCE_ATSubject26};
		String[] notes= {ATCE_ATNote2,ATCE_ATNote12,ATCE_ATNote14,ATCE_ATNote16,ATCE_ATNote18,ATCE_ATNote20,ATCE_ATNote22,ATCE_ATNote24,ATCE_ATNote26};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag= {ATCE_ATTags2.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags20.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
			
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);	
							}
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc053_VerifyTaskCallFunctionalityOnPrivateEquityRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord13;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String contactSectionName=ATCE_ConName14;
		String contactSectionTitle=ATCE_ConTitle14;
		String contactSectionDeal=ATCE_ConDeal14;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall14;
		String contactSectionEmail=ATCE_ConEmail14;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23,ATCE_TaggedFirmsName24};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23,ATCE_TaggedFirmsCount24};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		String[] dealTaggedName= {ATCE_TaggedDealName2};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount2};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle2;
		String connectionDeal=ATCE_ConnectionDeal2;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall2;
		String connectionEmail=ATCE_ConnectionEmail2;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType2,ATCE_ATActivityType12,ATCE_ATActivityType14,ATCE_ATActivityType16,ATCE_ATActivityType18,ATCE_ATActivityType20,ATCE_ATActivityType22,ATCE_ATActivityType24,ATCE_ATActivityType26};
		String[] date= {ATCE_ATDueDate2,ATCE_ATDueDate12,ATCE_ATDueDate14,ATCE_ATDueDate16,ATCE_ATDueDate18,ATCE_ATDueDate20,ATCE_ATDueDate22,ATCE_ATDueDate24,ATCE_ATDueDate26};
		String[] subject= {ATCE_ATSubject2,ATCE_ATSubject12,ATCE_ATSubject14,ATCE_ATSubject16,ATCE_ATSubject18,ATCE_ATSubject20,ATCE_ATSubject22,ATCE_ATSubject24,ATCE_ATSubject26};
		String[] notes= {ATCE_ATNote2,ATCE_ATNote12,ATCE_ATNote14,ATCE_ATNote16,ATCE_ATNote18,ATCE_ATNote20,ATCE_ATNote22,ATCE_ATNote24,ATCE_ATNote26};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag= {ATCE_ATTags2.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags20.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
			
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection page have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection page are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection page are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}


	@Parameters({ "projectName" })
	@Test
	public void ATCETc054_VerifyTaskCallFunctionalityOnContactRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Con1;
		String taskSubject=ATCE_ATSubject11;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo11.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo11.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo11;
		}
	
		String taskNotes=ATCE_ATNote11;
		String taskStatus=ATCE_AdvanceStatus11;
		String taskPriority=ATCE_AdvancePriority11;	
		String taskDueDate =ATCE_ATDueDate11;
		
		String taskSubject1=ATCE_ATSubject12;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo12.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo12.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo12;
		}
		
		String taskNotes1=ATCE_ATNote12;
		
		String taskDueDate1 =ATCE_ATDueDate12;
		
		String[] firmsTaggedName= {ATCE_TaggedFirmsName25,ATCE_TaggedFirmsName26,ATCE_TaggedFirmsName27,ATCE_TaggedFirmsName28,ATCE_TaggedFirmsName29,ATCE_TaggedFirmsName30,ATCE_TaggedFirmsName31,ATCE_TaggedFirmsName32,ATCE_TaggedFirmsName33};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount25,ATCE_TaggedFirmsCount26,ATCE_TaggedFirmsCount27,ATCE_TaggedFirmsCount28,ATCE_TaggedFirmsCount29,ATCE_TaggedFirmsCount30,ATCE_TaggedFirmsCount31,ATCE_TaggedFirmsCount32,ATCE_TaggedFirmsCount33};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName22,ATCE_TaggedPeopleName23,ATCE_TaggedPeopleName24,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount22,ATCE_TaggedPeopleCount23,ATCE_TaggedPeopleCount24,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20};
				
		String[] dealTaggedName= {ATCE_TaggedDealName3};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount3};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle2;
		String connectionDeal=ATCE_ConnectionDeal2;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall2;
		String connectionEmail=ATCE_ConnectionEmail2;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType2,ATCE_ATActivityType12,ATCE_ATActivityType14,ATCE_ATActivityType16,ATCE_ATActivityType18,ATCE_ATActivityType20,ATCE_ATActivityType22,ATCE_ATActivityType24,ATCE_ATActivityType26};
		String[] date= {ATCE_ATDueDate2,ATCE_ATDueDate12,ATCE_ATDueDate14,ATCE_ATDueDate16,ATCE_ATDueDate18,ATCE_ATDueDate20,ATCE_ATDueDate22,ATCE_ATDueDate24,ATCE_ATDueDate26};
		String[] subject= {ATCE_ATSubject2,ATCE_ATSubject12,ATCE_ATSubject14,ATCE_ATSubject16,ATCE_ATSubject18,ATCE_ATSubject20,ATCE_ATSubject22,ATCE_ATSubject24,ATCE_ATSubject26};
		String[] notes= {ATCE_ATNote2,ATCE_ATNote12,ATCE_ATNote14,ATCE_ATNote16,ATCE_ATNote18,ATCE_ATNote20,ATCE_ATNote22,ATCE_ATNote24,ATCE_ATNote26};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag= {ATCE_ATTags2.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags20.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
	
			
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj2)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			
						ArrayList<String> result6=bp.verifyRecordOnConnectionsSectionInAcuity(recordName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);

						if(result6.isEmpty())
						{
							log(LogStatus.INFO, "The records have been verified on Connection section in Acuity user : "+connectionUserName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records are not verified on Connection section in Acuity. user : "+connectionUserName+" "+result6, YesNo.No);
							sa.assertTrue(false,  "The records are not verified on Connection section in Acuity.  user : "+connectionUserName+" "+result6);
						}
						
					
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(userName1, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+userName1+" record on contact section",YesNo.No);
							
							ArrayList<String> result7=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result7.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+userName1, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+userName1+". "+result7, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+userName1+". "+result7);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+userName1+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+userName1+" record on contact section");
						}
						
						
						
								
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType,date, subject, notes, subject, participant, tag);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj2, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj2);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc055_VerifyTaskCallFunctionalityOnDealRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Deal1;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj4)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null, null,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}	
								
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1, date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc056_VerifyTaskCallFunctionalityOnFundraisingRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fundraising1;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23,ATCE_TaggedFirmsName24};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23,ATCE_TaggedFirmsCount24};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
		
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null, null,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}	
								
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1, date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+TabName.Fundraising.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+TabName.Fundraising.toString());
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc057_VerifyTaskCallFunctionalityOnFundRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fund1;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23,ATCE_TaggedFirmsName24};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23,ATCE_TaggedFirmsCount24};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		
		String[] dealTaggedName= {ATCE_TaggedDealName2};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount2};
				
		
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
		if (lp.clickOnTab(projectName, tabObj3)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj3, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}	
								
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1, date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj3, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj3);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc058_VerifyTaskCallFunctionalityOnThemeRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Theme1;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
	
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, TabName.Themes.toString())) {

				log(LogStatus.INFO, "Clicked on Tab : "+TabName.Themes.toString(), YesNo.No);

				String parentWindowID=bp.clickOnThemeRecord(recordName);

				if (parentWindowID!=null) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
						
				
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1, date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchToWindowOpenNextToParentWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
				driver.close();
				driver.switchTo().window(parentWindowID);
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab : "+TabName.Themes.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab : "+TabName.Themes.toString());
			}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc059_LoginWithUser2AndVerifyTaskCallFunctionalityOnCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord1;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String contactSectionName=ATCE_ConName8;
		String contactSectionTitle=ATCE_ConTitle8;
		String contactSectionDeal=ATCE_ConDeal8;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall8;
		String contactSectionEmail=ATCE_ConEmail8;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20};
				
		String[] dealTaggedName= {ATCE_TaggedDealName2};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount2};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle2;
		String connectionDeal=ATCE_ConnectionDeal2;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall2;
		String connectionEmail=ATCE_ConnectionEmail2;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType2,ATCE_ATActivityType12,ATCE_ATActivityType14,ATCE_ATActivityType16,ATCE_ATActivityType18,ATCE_ATActivityType20,ATCE_ATActivityType22,ATCE_ATActivityType24,ATCE_ATActivityType26};
		String[] date= {ATCE_ATDueDate2,ATCE_ATDueDate12,ATCE_ATDueDate14,ATCE_ATDueDate16,ATCE_ATDueDate18,ATCE_ATDueDate20,ATCE_ATDueDate22,ATCE_ATDueDate24,ATCE_ATDueDate26};
		String[] subject= {ATCE_ATSubject2,ATCE_ATSubject12,ATCE_ATSubject14,ATCE_ATSubject16,ATCE_ATSubject18,ATCE_ATSubject20,ATCE_ATSubject22,ATCE_ATSubject24,ATCE_ATSubject26};
		String[] notes= {ATCE_ATNote2,ATCE_ATNote12,ATCE_ATNote14,ATCE_ATNote16,ATCE_ATNote18,ATCE_ATNote20,ATCE_ATNote22,ATCE_ATNote24,ATCE_ATNote26};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag= {ATCE_ATTags2.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags20.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser7EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.CompaniesTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc060_LoginWithUser2AndVerifyTaskCallFunctionalityOnAdvisorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord5;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String contactSectionName=ATCE_ConName9;
		String contactSectionTitle=ATCE_ConTitle9;
		String contactSectionDeal=ATCE_ConDeal9;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall9;
		String contactSectionEmail=ATCE_ConEmail9;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23,ATCE_TaggedFirmsName24};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23,ATCE_TaggedFirmsCount24};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		String[] dealTaggedName= {ATCE_TaggedDealName2};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount2};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle2;
		String connectionDeal=ATCE_ConnectionDeal2;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall2;
		String connectionEmail=ATCE_ConnectionEmail2;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType2,ATCE_ATActivityType12,ATCE_ATActivityType14,ATCE_ATActivityType16,ATCE_ATActivityType18,ATCE_ATActivityType20,ATCE_ATActivityType22,ATCE_ATActivityType24,ATCE_ATActivityType26};
		String[] date= {ATCE_ATDueDate2,ATCE_ATDueDate12,ATCE_ATDueDate14,ATCE_ATDueDate16,ATCE_ATDueDate18,ATCE_ATDueDate20,ATCE_ATDueDate22,ATCE_ATDueDate24,ATCE_ATDueDate26};
		String[] subject= {ATCE_ATSubject2,ATCE_ATSubject12,ATCE_ATSubject14,ATCE_ATSubject16,ATCE_ATSubject18,ATCE_ATSubject20,ATCE_ATSubject22,ATCE_ATSubject24,ATCE_ATSubject26};
		String[] notes= {ATCE_ATNote2,ATCE_ATNote12,ATCE_ATNote14,ATCE_ATNote16,ATCE_ATNote18,ATCE_ATNote20,ATCE_ATNote22,ATCE_ATNote24,ATCE_ATNote26};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag= {ATCE_ATTags2.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags20.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
			
		lp.CRMLogin(crmUser7EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc061_LoginWithUser2AndVerifyTaskCallFunctionalityOnLendorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord7;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String contactSectionName=ATCE_ConName10;
		String contactSectionTitle=ATCE_ConTitle10;
		String contactSectionDeal=ATCE_ConDeal10;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall10;
		String contactSectionEmail=ATCE_ConEmail10;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23,ATCE_TaggedFirmsName24};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23,ATCE_TaggedFirmsCount24};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		String[] dealTaggedName= {ATCE_TaggedDealName2};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount2};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle3;
		String connectionDeal=ATCE_ConnectionDeal3;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall3;
		String connectionEmail=ATCE_ConnectionEmail3;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType4,ATCE_ATActivityType6,ATCE_ATActivityType8,ATCE_ATActivityType10,ATCE_ATActivityType12,ATCE_ATActivityType14,ATCE_ATActivityType16,ATCE_ATActivityType18,ATCE_ATActivityType20,ATCE_ATActivityType22,ATCE_ATActivityType24,ATCE_ATActivityType26};
		String[] date= {ATCE_ATDueDate4,ATCE_ATDueDate6,ATCE_ATDueDate8,ATCE_ATDueDate10,ATCE_ATDueDate12,ATCE_ATDueDate14,ATCE_ATDueDate16,ATCE_ATDueDate18,ATCE_ATDueDate20,ATCE_ATDueDate22,ATCE_ATDueDate24,ATCE_ATDueDate26};
		String[] subject= {ATCE_ATSubject4,ATCE_ATSubject6,ATCE_ATSubject8,ATCE_ATSubject10,ATCE_ATSubject12,ATCE_ATSubject14,ATCE_ATSubject16,ATCE_ATSubject18,ATCE_ATSubject20,ATCE_ATSubject22,ATCE_ATSubject24,ATCE_ATSubject26};
		String[] notes= {ATCE_ATNote4,ATCE_ATNote6,ATCE_ATNote8,ATCE_ATNote10,ATCE_ATNote12,ATCE_ATNote14,ATCE_ATNote16,ATCE_ATNote18,ATCE_ATNote20,ATCE_ATNote22,ATCE_ATNote24,ATCE_ATNote26};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag= {ATCE_ATTags4.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags20.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
			
		lp.CRMLogin(crmUser7EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc062_LoginWithUser2AndVerifyTaskCallFunctionalityOnIntermediaryRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord9;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String contactSectionName=ATCE_ConName11;
		String contactSectionTitle=ATCE_ConTitle11;
		String contactSectionDeal=ATCE_ConDeal11;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall11;
		String contactSectionEmail=ATCE_ConEmail11;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23,ATCE_TaggedFirmsName24};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23,ATCE_TaggedFirmsCount24};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		String[] dealTaggedName= {ATCE_TaggedDealName2};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount2};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle3;
		String connectionDeal=ATCE_ConnectionDeal3;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall3;
		String connectionEmail=ATCE_ConnectionEmail3;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType4,ATCE_ATActivityType6,ATCE_ATActivityType8,ATCE_ATActivityType10,ATCE_ATActivityType12,ATCE_ATActivityType14,ATCE_ATActivityType16,ATCE_ATActivityType18,ATCE_ATActivityType20,ATCE_ATActivityType22,ATCE_ATActivityType24,ATCE_ATActivityType26};
		String[] date= {ATCE_ATDueDate4,ATCE_ATDueDate6,ATCE_ATDueDate8,ATCE_ATDueDate10,ATCE_ATDueDate12,ATCE_ATDueDate14,ATCE_ATDueDate16,ATCE_ATDueDate18,ATCE_ATDueDate20,ATCE_ATDueDate22,ATCE_ATDueDate24,ATCE_ATDueDate26};
		String[] subject= {ATCE_ATSubject4,ATCE_ATSubject6,ATCE_ATSubject8,ATCE_ATSubject10,ATCE_ATSubject12,ATCE_ATSubject14,ATCE_ATSubject16,ATCE_ATSubject18,ATCE_ATSubject20,ATCE_ATSubject22,ATCE_ATSubject24,ATCE_ATSubject26};
		String[] notes= {ATCE_ATNote4,ATCE_ATNote6,ATCE_ATNote8,ATCE_ATNote10,ATCE_ATNote12,ATCE_ATNote14,ATCE_ATNote16,ATCE_ATNote18,ATCE_ATNote20,ATCE_ATNote22,ATCE_ATNote24,ATCE_ATNote26};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag= {ATCE_ATTags4.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags20.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
			
		lp.CRMLogin(crmUser7EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	

	@Parameters({ "projectName" })
	@Test
	public void ATCETc063_LoginWithUser2AndVerifyTaskCallFunctionalityOnInstitutionRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord3;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String contactSectionName=ATCE_ConName12;
		String contactSectionTitle=ATCE_ConTitle12;
		String contactSectionDeal=ATCE_ConDeal12;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall12;
		String contactSectionEmail=ATCE_ConEmail12;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23,ATCE_TaggedFirmsName24};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23,ATCE_TaggedFirmsCount24};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		String[] fundTaggedName= {ATCE_TaggedFundName2};
		String[] fundTaggedTimeReference= {ATCE_TaggedFundCount2};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle3;
		String connectionDeal=ATCE_ConnectionDeal3;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall3;
		String connectionEmail=ATCE_ConnectionEmail3;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType4,ATCE_ATActivityType6,ATCE_ATActivityType8,ATCE_ATActivityType10,ATCE_ATActivityType12,ATCE_ATActivityType14,ATCE_ATActivityType16,ATCE_ATActivityType18,ATCE_ATActivityType20,ATCE_ATActivityType22,ATCE_ATActivityType24,ATCE_ATActivityType26};
		String[] date= {ATCE_ATDueDate4,ATCE_ATDueDate6,ATCE_ATDueDate8,ATCE_ATDueDate10,ATCE_ATDueDate12,ATCE_ATDueDate14,ATCE_ATDueDate16,ATCE_ATDueDate18,ATCE_ATDueDate20,ATCE_ATDueDate22,ATCE_ATDueDate24,ATCE_ATDueDate26};
		String[] subject= {ATCE_ATSubject4,ATCE_ATSubject6,ATCE_ATSubject8,ATCE_ATSubject10,ATCE_ATSubject12,ATCE_ATSubject14,ATCE_ATSubject16,ATCE_ATSubject18,ATCE_ATSubject20,ATCE_ATSubject22,ATCE_ATSubject24,ATCE_ATSubject26};
		String[] notes= {ATCE_ATNote4,ATCE_ATNote6,ATCE_ATNote8,ATCE_ATNote10,ATCE_ATNote12,ATCE_ATNote14,ATCE_ATNote16,ATCE_ATNote18,ATCE_ATNote20,ATCE_ATNote22,ATCE_ATNote24,ATCE_ATNote26};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag= {ATCE_ATTags4.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags20.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
			
		lp.CRMLogin(crmUser7EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null,null,true,fundTaggedName, fundTaggedTimeReference);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc064_LoginWithUser2AndVerifyTaskCallFunctionalityOnPortfolioCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord11;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String contactSectionName=ATCE_ConName13;
		String contactSectionTitle=ATCE_ConTitle13;
		String contactSectionDeal=ATCE_ConDeal13;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall13;
		String contactSectionEmail=ATCE_ConEmail13;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23,ATCE_TaggedFirmsName24};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23,ATCE_TaggedFirmsCount24};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		String[] dealTaggedName= {ATCE_TaggedDealName2};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount2};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle2;
		String connectionDeal=ATCE_ConnectionDeal2;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall2;
		String connectionEmail=ATCE_ConnectionEmail2;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType2,ATCE_ATActivityType12,ATCE_ATActivityType14,ATCE_ATActivityType16,ATCE_ATActivityType18,ATCE_ATActivityType20,ATCE_ATActivityType22,ATCE_ATActivityType24,ATCE_ATActivityType26};
		String[] date= {ATCE_ATDueDate2,ATCE_ATDueDate12,ATCE_ATDueDate14,ATCE_ATDueDate16,ATCE_ATDueDate18,ATCE_ATDueDate20,ATCE_ATDueDate22,ATCE_ATDueDate24,ATCE_ATDueDate26};
		String[] subject= {ATCE_ATSubject2,ATCE_ATSubject12,ATCE_ATSubject14,ATCE_ATSubject16,ATCE_ATSubject18,ATCE_ATSubject20,ATCE_ATSubject22,ATCE_ATSubject24,ATCE_ATSubject26};
		String[] notes= {ATCE_ATNote2,ATCE_ATNote12,ATCE_ATNote14,ATCE_ATNote16,ATCE_ATNote18,ATCE_ATNote20,ATCE_ATNote22,ATCE_ATNote24,ATCE_ATNote26};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag= {ATCE_ATTags2.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags20.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
			
		lp.CRMLogin(crmUser7EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}	
							
							
							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc065_LoginWithUser2AndVerifyTaskCallFunctionalityOnPrivateEquityRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord13;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String contactSectionName=ATCE_ConName14;
		String contactSectionTitle=ATCE_ConTitle14;
		String contactSectionDeal=ATCE_ConDeal14;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall14;
		String contactSectionEmail=ATCE_ConEmail14;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23,ATCE_TaggedFirmsName24};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23,ATCE_TaggedFirmsCount24};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		String[] dealTaggedName= {ATCE_TaggedDealName2};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount2};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle2;
		String connectionDeal=ATCE_ConnectionDeal2;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall2;
		String connectionEmail=ATCE_ConnectionEmail2;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType2,ATCE_ATActivityType12,ATCE_ATActivityType14,ATCE_ATActivityType16,ATCE_ATActivityType18,ATCE_ATActivityType20,ATCE_ATActivityType22,ATCE_ATActivityType24,ATCE_ATActivityType26};
		String[] date= {ATCE_ATDueDate2,ATCE_ATDueDate12,ATCE_ATDueDate14,ATCE_ATDueDate16,ATCE_ATDueDate18,ATCE_ATDueDate20,ATCE_ATDueDate22,ATCE_ATDueDate24,ATCE_ATDueDate26};
		String[] subject= {ATCE_ATSubject2,ATCE_ATSubject12,ATCE_ATSubject14,ATCE_ATSubject16,ATCE_ATSubject18,ATCE_ATSubject20,ATCE_ATSubject22,ATCE_ATSubject24,ATCE_ATSubject26};
		String[] notes= {ATCE_ATNote2,ATCE_ATNote12,ATCE_ATNote14,ATCE_ATNote16,ATCE_ATNote18,ATCE_ATNote20,ATCE_ATNote22,ATCE_ATNote24,ATCE_ATNote26};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag= {ATCE_ATTags2.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags20.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
			
		lp.CRMLogin(crmUser7EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection page have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection page are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection page are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}


	@Parameters({ "projectName" })
	@Test
	public void ATCETc066_LoginWithUser2AndVerifyTaskCallFunctionalityOnContactRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Con1;
		String taskSubject=ATCE_ATSubject11;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo11.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo11.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo11;
		}
	
		String taskNotes=ATCE_ATNote11;
		String taskStatus=ATCE_AdvanceStatus11;
		String taskPriority=ATCE_AdvancePriority11;	
		String taskDueDate =ATCE_ATDueDate11;
		
		String taskSubject1=ATCE_ATSubject12;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo12.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo12.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo12;
		}
		
		String taskNotes1=ATCE_ATNote12;
		
		String taskDueDate1 =ATCE_ATDueDate12;
		
		String[] firmsTaggedName= {ATCE_TaggedFirmsName25,ATCE_TaggedFirmsName26,ATCE_TaggedFirmsName27,ATCE_TaggedFirmsName28,ATCE_TaggedFirmsName29,ATCE_TaggedFirmsName30,ATCE_TaggedFirmsName31,ATCE_TaggedFirmsName32,ATCE_TaggedFirmsName33};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount25,ATCE_TaggedFirmsCount26,ATCE_TaggedFirmsCount27,ATCE_TaggedFirmsCount28,ATCE_TaggedFirmsCount29,ATCE_TaggedFirmsCount30,ATCE_TaggedFirmsCount31,ATCE_TaggedFirmsCount32,ATCE_TaggedFirmsCount33};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName22,ATCE_TaggedPeopleName23,ATCE_TaggedPeopleName24,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount22,ATCE_TaggedPeopleCount23,ATCE_TaggedPeopleCount24,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20};
				
		String[] dealTaggedName= {ATCE_TaggedDealName3};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount3};
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle2;
		String connectionDeal=ATCE_ConnectionDeal2;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall2;
		String connectionEmail=ATCE_ConnectionEmail2;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType2,ATCE_ATActivityType12,ATCE_ATActivityType14,ATCE_ATActivityType16,ATCE_ATActivityType18,ATCE_ATActivityType20,ATCE_ATActivityType22,ATCE_ATActivityType24,ATCE_ATActivityType26};
		String[] date= {ATCE_ATDueDate2,ATCE_ATDueDate12,ATCE_ATDueDate14,ATCE_ATDueDate16,ATCE_ATDueDate18,ATCE_ATDueDate20,ATCE_ATDueDate22,ATCE_ATDueDate24,ATCE_ATDueDate26};
		String[] subject= {ATCE_ATSubject2,ATCE_ATSubject12,ATCE_ATSubject14,ATCE_ATSubject16,ATCE_ATSubject18,ATCE_ATSubject20,ATCE_ATSubject22,ATCE_ATSubject24,ATCE_ATSubject26};
		String[] notes= {ATCE_ATNote2,ATCE_ATNote12,ATCE_ATNote14,ATCE_ATNote16,ATCE_ATNote18,ATCE_ATNote20,ATCE_ATNote22,ATCE_ATNote24,ATCE_ATNote26};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag= {ATCE_ATTags2.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags20.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
	
			
		lp.CRMLogin(crmUser7EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj2)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			
						ArrayList<String> result6=bp.verifyRecordOnConnectionsSectionInAcuity(recordName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);

						if(result6.isEmpty())
						{
							log(LogStatus.INFO, "The records have been verified on Connection section in Acuity user : "+connectionUserName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records are not verified on Connection section in Acuity. user : "+connectionUserName+" "+result6, YesNo.No);
							sa.assertTrue(false,  "The records are not verified on Connection section in Acuity.  user : "+connectionUserName+" "+result6);
						}
						
					
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(userName1, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+userName1+" record on contact section",YesNo.No);
							
							ArrayList<String> result7=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result7.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+userName1, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+userName1+". "+result7, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+userName1+". "+result7);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+userName1+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+userName1+" record on contact section");
						}
						
						
						
								
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType,date, subject, notes, subject, participant, tag);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj2, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj2);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc067_LoginWithUser2AndVerifyTaskCallFunctionalityOnDealRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Deal1;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		lp.CRMLogin(crmUser7EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj4)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null, null,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}	
								
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1, date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc068_LoginWithUser2AndVerifyTaskCallFunctionalityOnFundraisingRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fundraising1;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23,ATCE_TaggedFirmsName24};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23,ATCE_TaggedFirmsCount24};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		lp.CRMLogin(crmUser7EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
		
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null, null,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}	
								
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1, date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+TabName.Fundraising.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+TabName.Fundraising.toString());
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc069_LoginWithUser2AndVerifyTaskCallFunctionalityOnFundRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fund1;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
		
		String[] firmsTaggedName= {ATCE_TaggedFirmsName11,ATCE_TaggedFirmsName12,ATCE_TaggedFirmsName13,ATCE_TaggedFirmsName14,ATCE_TaggedFirmsName15,ATCE_TaggedFirmsName16,ATCE_TaggedFirmsName17,ATCE_TaggedFirmsName18,ATCE_TaggedFirmsName19,ATCE_TaggedFirmsName20,ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22,ATCE_TaggedFirmsName23,ATCE_TaggedFirmsName24};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount11,ATCE_TaggedFirmsCount12,ATCE_TaggedFirmsCount13,ATCE_TaggedFirmsCount14,ATCE_TaggedFirmsCount15,ATCE_TaggedFirmsCount16,ATCE_TaggedFirmsCount17,ATCE_TaggedFirmsCount18,ATCE_TaggedFirmsCount19,ATCE_TaggedFirmsCount20,ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22,ATCE_TaggedFirmsCount23,ATCE_TaggedFirmsCount24};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12,ATCE_TaggedPeopleName13,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName18,ATCE_TaggedPeopleName19,ATCE_TaggedPeopleName20,ATCE_TaggedPeopleName21};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12,ATCE_TaggedPeopleCount13,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount18,ATCE_TaggedPeopleCount19,ATCE_TaggedPeopleCount20,ATCE_TaggedPeopleCount21};
				
		
		String[] dealTaggedName= {ATCE_TaggedDealName2};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount2};
				
		
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		lp.CRMLogin(crmUser7EmailID, adminPassword, appName);
		if (lp.clickOnTab(projectName, tabObj3)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj3, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}	
								
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1, date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj3, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj3);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc070_LoginWithUser2AndVerifyTaskCallFunctionalityOnThemeRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Theme1;
		String taskSubject=ATCE_ATSubject3;
		String taskRelatedTo;
		if(ATCE_ATRelatedTo3.contains("<Prefilled>"))
		{
			taskRelatedTo=ATCE_ATRelatedTo3.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo=ATCE_ATRelatedTo3;
		}
	
		String taskNotes=ATCE_ATNote3;
		String taskStatus=ATCE_AdvanceStatus3;
		String taskPriority=ATCE_AdvancePriority3;	
		String taskDueDate =ATCE_ATDueDate3;
		
		String taskSubject1=ATCE_ATSubject4;
		String taskRelatedTo1;
		if(ATCE_ATRelatedTo4.contains("<Prefilled>"))
		{
			taskRelatedTo1=ATCE_ATRelatedTo4.replace("<Prefilled>", "");
		}
		else
		{
			taskRelatedTo1=ATCE_ATRelatedTo4;
		}
		
		String taskNotes1=ATCE_ATNote4;
		
		String taskDueDate1 =ATCE_ATDueDate4;
	
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		lp.CRMLogin(crmUser7EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, TabName.Themes.toString())) {

				log(LogStatus.INFO, "Clicked on Tab : "+TabName.Themes.toString(), YesNo.No);

				String parentWindowID=bp.clickOnThemeRecord(recordName);

				if (parentWindowID!=null) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
						
				
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1, date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchToWindowOpenNextToParentWindow(driver);
							
							ArrayList<String> result2=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject, basicsection, advanceSection, IconType.Task, PageName.Interaction);
							
							if(result2.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject+" are not verified. "+result2,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject+" are not verified. "+result2);
								
							}
							
	                       ArrayList<String> result3=bp.verifySubjectLinkPopUpOnIntraction(driver, taskSubject1, basicsection1, advanceSection1, IconType.Call, PageName.Interaction);
							
							if(result3.isEmpty())
							{
								log(LogStatus.PASS,"The details on popup of subject "+taskSubject1+" has been verified",YesNo.No);
								sa.assertTrue(true,"The details on popup of subject "+taskSubject1+" has been verified");							
							}
							else
							{
								log(LogStatus.FAIL,"The details on popup of subject "+taskSubject1+" are not verified. "+result3,YesNo.No);
								sa.assertTrue(false,"The details on popup of subject "+taskSubject1+" are not verified. "+result3);
								
							}
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject, 20), "Subject name "+taskSubject))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject, 20), "Edit button of popup of subject name "+taskSubject))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl, basicsection,advanceSection, null);
									if (NotesPopUpPrefilledNegativeResult.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject);
							}

							
							
							refresh(driver);
							ThreadSleep(3000);
							String currentUrl1=driver.getCurrentUrl();
							if(CommonLib.clickUsingJavaScript(driver, bp.subjectOfInteractionPage(taskSubject1, 20), "Subject name "+taskSubject1))
							{
								log(LogStatus.INFO,"Clicked on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(taskSubject1, 20), "Edit button of popup of subject name "+taskSubject1))
								{
									log(LogStatus.INFO,"Clicked on edit button of subject "+taskSubject1,YesNo.No);

									ArrayList<String> NotesPopUpPrefilledNegativeResult1 = bp.verifyNotesPopupWithPrefilledValueAndOnSameUrl(currentUrl1, basicsection1,advanceSection1, null);
									if (NotesPopUpPrefilledNegativeResult1.isEmpty()) {
										log(LogStatus.INFO,"Notes Popup has been verified and Notes popup is opening in same page with prefilled value",YesNo.No);
									} else {
										log(LogStatus.ERROR,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1,YesNo.No);
										sa.assertTrue(false,"Notes Popup is not verify. Either Notes popup is not opening in same page or with prefilled value, Reason: "+ NotesPopUpPrefilledNegativeResult1);
									}
								}
								else
								{
									log(LogStatus.ERROR,"Not able to clicked on edit button of subject "+taskSubject1,YesNo.No);
									sa.assertTrue(false, "Not able to clicked on edit button of subject "+taskSubject1);
								}

							}
							else
							{
								log(LogStatus.ERROR,"Not able to click on subject name on interaction section of subject name "+taskSubject1,YesNo.No);
								sa.assertTrue(false, "Not able to click on subject name on interaction section of subject name "+taskSubject1);
							}

							
							
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
				driver.close();
				driver.switchTo().window(parentWindowID);
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab : "+TabName.Themes.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab : "+TabName.Themes.toString());
			}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc071_ChangeDealStageToDecline(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fb=new FundsPageBusinessLayer(driver);
		String[] dealName=ATCE_Deal2.split("<break>");
		String[] dealStage=ATCE_DealStage1.split("<break>");
		
	
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if(dealName.length==dealStage.length)
		{
		for(int i=0; i<dealName.length; i++)
		{
			if (lp.clickOnTab(projectName, tabObj4)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
						dealName[i], 30)) {
					log(LogStatus.INFO, dealName[i] + " reocrd has been open", YesNo.No);
					
					if(fb.changeStage(projectName, dealStage[i],20))
					{
						log(LogStatus.INFO,"Deal Stage "+dealStage[i]+" has been changed of record "+dealName[i], YesNo.No);	
					}
					else
					{
						log(LogStatus.ERROR,"Deal Stage "+dealStage[i]+" is not changed of record "+dealName[i], YesNo.No);
						sa.assertTrue(false,  "Deal Stage "+dealStage[i]+" is not changed of record "+dealName[i]);
					}				
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+dealName[i], YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+dealName[i]);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
			}
		}
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc072_VerifyHighligtedFirmOnDeclineDealStageOnCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord1;
		
		String[] highlightedFirm=ATCE_HighlightedFirm1.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.CompaniesTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyNotHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead"+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead"+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc073_VerifyHighligtedFirmOnDeclineDealStageOnAdvisorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord5;
		
		String[] highlightedFirm=ATCE_HighlightedFirm2.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyNotHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc074_VerifyHighligtedFirmOnDeclineDealStageOnLendorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord7;
		
		String[] highlightedFirm=ATCE_HighlightedFirm2.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyNotHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc075_VerifyHighligtedFirmOnDeclineDealStageOnIntermediaryRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord9;
		
		String[] highlightedFirm=ATCE_HighlightedFirm4.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyNotHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc076_VerifyHighligtedFirmOnDeclineDealStageOnInstitutionRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord3;
		
		String[] highlightedFirm=ATCE_HighlightedFirm3.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyNotHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc077_VerifyHighligtedFirmOnDeclineDealStageOnPortfolioCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord11;
		
		String[] highlightedFirm=ATCE_HighlightedFirm2.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyNotHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc078_VerifyHighligtedFirmOnDeclineDealStageOnPrivateEquityRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord13;
		
		String[] highlightedFirm=ATCE_HighlightedFirm2.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyNotHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc079_VerifyHighligtedFirmOnDeclineDealStageOnContactRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Con1;
		
		String[] highlightedFirm=ATCE_HighlightedFirm1.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj2)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyNotHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj2, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj2);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc080_VerifyHighligtedFirmOnDeclineDealStageOnDealRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Deal1;
		
		String[] highlightedFirm=ATCE_HighlightedFirm1.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj4)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyNotHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc081_VerifyHighligtedFirmOnDeclineDealStageOnFundraisingRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fundraising1;
		
		String[] highlightedFirm=ATCE_HighlightedFirm2.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

				log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyNotHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+TabName.Fundraising.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+TabName.Fundraising.toString());
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc082_VerifyHighligtedFirmOnDeclineDealStageOnFundRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fund1;
		
		String[] highlightedFirm=ATCE_HighlightedFirm2.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj3)) {

				log(LogStatus.INFO, "Clicked on Tab : " +tabObj3, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyNotHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj3, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj3);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc083_ChangeDealStageToDealRecieved(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		FundsPageBusinessLayer fb=new FundsPageBusinessLayer(driver);
		String[] dealName=ATCE_Deal3.split("<break>");
		String[] dealStage=ATCE_DealStage2.split("<break>");
		
	
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if(dealName.length==dealStage.length)
		{
		for(int i=0; i<dealName.length; i++)
		{
			if (lp.clickOnTab(projectName, tabObj4)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
						dealName[i], 30)) {
					log(LogStatus.INFO, dealName[i] + " reocrd has been open", YesNo.No);
					
					if(fb.changeStage(projectName, dealStage[i],20))
					{
						log(LogStatus.INFO,"Deal Stage "+dealStage[i]+" has been changed of record "+dealName[i], YesNo.No);	
					}
					else
					{
						log(LogStatus.ERROR,"Deal Stage "+dealStage[i]+" is not changed of record "+dealName[i], YesNo.No);
						sa.assertTrue(false,  "Deal Stage "+dealStage[i]+" is not changed of record "+dealName[i]);
					}				
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+dealName[i], YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+dealName[i]);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
			}
		}
		}
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc084_VerifyHighligtedFirmOnDealRecievedDealStageOnCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord1;
		
		String[] highlightedFirm=ATCE_HighlightedFirm1.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.CompaniesTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead"+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead"+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc085_VerifyHighligtedFirmOnDealRecievedDealStageOnAdvisorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord5;
		
		String[] highlightedFirm=ATCE_HighlightedFirm2.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc086_VerifyHighligtedFirmOnDealRecievedDealStageOnLendorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord7;
		
		String[] highlightedFirm=ATCE_HighlightedFirm2.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc087_VerifyHighligtedFirmOnDealRecievedDealStageOnIntermediaryRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord9;
		
		String[] highlightedFirm=ATCE_HighlightedFirm4.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc088_VerifyHighligtedFirmOnDealRecievedDealStageOnInstitutionRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord3;
		
		String[] highlightedFirm=ATCE_HighlightedFirm3.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc089_VerifyHighligtedFirmOnDealRecievedDealStageOnPortfolioCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord11;
		
		String[] highlightedFirm=ATCE_HighlightedFirm2.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc090_VerifyHighligtedFirmOnDealRecievedDealStageOnPrivateEquityRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord13;
		
		String[] highlightedFirm=ATCE_HighlightedFirm2.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc091_VerifyHighligtedFirmOnDealRecievedDealStageOnContactRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Con1;
		
		String[] highlightedFirm=ATCE_HighlightedFirm5.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj2)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj2, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj2);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc092_VerifyHighligtedFirmOnDealRecievedDealStageOnDealRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Deal1;
		
		String[] highlightedFirm=ATCE_HighlightedFirm1.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj4)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc093_VerifyHighligtedFirmOnDealRecievedDealStageOnFundraisingRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fundraising1;
		
		String[] highlightedFirm=ATCE_HighlightedFirm2.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

				log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+TabName.Fundraising.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+TabName.Fundraising.toString());
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc094_VerifyHighligtedFirmOnDealRecievedDealStageOnFundRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fund1;
		
		String[] highlightedFirm=ATCE_HighlightedFirm2.split("<break>");
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj3)) {

				log(LogStatus.INFO, "Clicked on Tab : " +tabObj3, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyHighlightedFirmNameOnFirmTaggedSection(TaggedName.Firms, highlightedFirm);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "The Firms records are not highligted on deal stage of Decline/Dead", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Firms records are highligted on deal stage of Decline/Dead. "+result, YesNo.No);
							sa.assertTrue(false, "The Firms records are highligted on deal stage of Decline/Dead. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj3, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj3);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc095_VerifyHyperlinkFunctionalityForCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord1;
		
		String contactName=ATCE_ContactFullName1;
		
		String[] highlightedFirm=ATCE_HighlightedFirm1.split("<break>");
		
		String firmTagName=ATCE_TaggedFirmsName17;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount17;
		
		String[] iconType= {ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10};
		String[] date= {ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10};
		String[] subject= {ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10};
		String[] notes= {ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10)};
		String[][] tag= {ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>")};
		
		String peopleTagName=ATCE_TaggedPeopleName14;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount14;
		
		
		String dealTagName=ATCE_TaggedDealName2;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount2;
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] firmsTagname= {ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22};
		String[] firmsTagCount= {ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22};
		
		String[] peopleTagname= {ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16};
		String[] peopleTagCount= {ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16};
		
		String[] dealTagname= {ATCE_TaggedDealName2};
		String[] dealTagCount= {ATCE_TaggedDealCount2};
		
		String taskSubjectName=ATCE_ATSubject1;
		String callSubjectName=ATCE_ATSubject2;
		
		String[] participantRecordName= ATCE_participantRecordName1.split("<break>");
		
		String[] participantRecordObject= ATCE_participantObjectName1.split("<break>");
		
		
		String[] tagsRecordName=ATCE_tagsRecordName1.split("<break>");
		String[] tagsRecordObject= ATCE_tagsObjectName1.split("<break>");
		
	
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.CompaniesTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
										
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
					
						ArrayList<String> result4=bp.verifyRedirectionOnClickRecordAndReferencedTypeOnTagged(firmsTagname, firmsTagCount, peopleTagname, peopleTagCount, dealTagname, dealTagCount, false, null, null);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The Redirection are working properly on Tagged Section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Redirection are not working properly on Tagged Section", YesNo.No);
							sa.assertTrue(false,  "The Redirection are not working properly on Tagged Section");
						}
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getContactNameFromContactSection(contactName,20), "contact name "+contactName+" on Contact section"))
						{
							log(LogStatus.INFO, "Clicked on contact name "+contactName, YesNo.No);	
							String parentID=switchOnWindow(driver);
							if(bp.getObjectPageName("Contact",15)!=null && bp.getRecordNameOnPage(contactName,15)!=null)
					    	{
					    		log(LogStatus.INFO, "The redirection of contact : "+contactName+" is working properly",YesNo.No);
					    	}
					    	else
					    	{
					    		log(LogStatus.ERROR, "The redirection of contact : "+contactName+" is not working properly.",YesNo.No);
					    		sa.assertTrue(false,   "The redirection of contact : "+contactName+" is not working properly.");
					    		
					    	}
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on contact name "+contactName, YesNo.No);	
							sa.assertTrue(false,  "Not able to click on contact name "+contactName);
						}
						
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(taskSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(taskSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(callSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(callSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							driver.close();
							driver.switchTo().window(parentID);
							
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc096_VerifyHyperlinkFunctionalityForAdvisorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord5;
		
		String contactName=ATCE_ContactFullName9;
		
		String[] highlightedFirm=ATCE_HighlightedFirm1.split("<break>");
		
		String firmTagName=ATCE_TaggedFirmsName17;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount17;
		
		String[] iconType= {ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10};
		String[] date= {ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10};
		String[] subject= {ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10};
		String[] notes= {ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10)};
		String[][] tag= {ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>")};
		
		String peopleTagName=ATCE_TaggedPeopleName14;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount14;
		
		
		String dealTagName=ATCE_TaggedDealName2;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount2;
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] firmsTagname= {ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22};
		String[] firmsTagCount= {ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22};
		
		String[] peopleTagname= {ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16};
		String[] peopleTagCount= {ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16};
		
		String[] dealTagname= {ATCE_TaggedDealName2};
		String[] dealTagCount= {ATCE_TaggedDealCount2};
		
		String taskSubjectName=ATCE_ATSubject1;
		String callSubjectName=ATCE_ATSubject2;
		
		String[] participantRecordName= ATCE_participantRecordName1.split("<break>");
		
		String[] participantRecordObject= ATCE_participantObjectName1.split("<break>");
		
		
		String[] tagsRecordName=ATCE_tagsRecordName1.split("<break>");
		String[] tagsRecordObject= ATCE_tagsObjectName1.split("<break>");
		
	
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
										
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
					
						ArrayList<String> result4=bp.verifyRedirectionOnClickRecordAndReferencedTypeOnTagged(firmsTagname, firmsTagCount, peopleTagname, peopleTagCount, dealTagname, dealTagCount, false, null, null);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The Redirection are working properly on Tagged Section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Redirection are not working properly on Tagged Section", YesNo.No);
							sa.assertTrue(false,  "The Redirection are not working properly on Tagged Section");
						}
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getContactNameFromContactSection(contactName,20), "contact name "+contactName+" on Contact section"))
						{
							log(LogStatus.INFO, "Clicked on contact name "+contactName, YesNo.No);	
							String parentID=switchOnWindow(driver);
							if(bp.getObjectPageName("Contact",15)!=null && bp.getRecordNameOnPage(contactName,15)!=null)
					    	{
					    		log(LogStatus.INFO, "The redirection of contact : "+contactName+" is working properly",YesNo.No);
					    	}
					    	else
					    	{
					    		log(LogStatus.ERROR, "The redirection of contact : "+contactName+" is not working properly.",YesNo.No);
					    		sa.assertTrue(false,   "The redirection of contact : "+contactName+" is not working properly.");
					    		
					    	}
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on contact name "+contactName, YesNo.No);	
							sa.assertTrue(false,  "Not able to click on contact name "+contactName);
						}
						
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(taskSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(taskSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(callSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(callSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							driver.close();
							driver.switchTo().window(parentID);
							
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc097_VerifyHyperlinkFunctionalityForLendorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord7;
		
		String contactName=ATCE_ContactFullName7;
		
		String[] highlightedFirm=ATCE_HighlightedFirm1.split("<break>");
		
		String firmTagName=ATCE_TaggedFirmsName17;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount17;
		
		String[] iconType= {ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10};
		String[] date= {ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10};
		String[] subject= {ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10};
		String[] notes= {ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10)};
		String[][] tag= {ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>")};
		
		String peopleTagName=ATCE_TaggedPeopleName14;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount14;
		
		
		String dealTagName=ATCE_TaggedDealName2;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount2;
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] firmsTagname= {ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22};
		String[] firmsTagCount= {ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22};
		
		String[] peopleTagname= {ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16};
		String[] peopleTagCount= {ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16};
		
		String[] dealTagname= {ATCE_TaggedDealName2};
		String[] dealTagCount= {ATCE_TaggedDealCount2};
		
		String taskSubjectName=ATCE_ATSubject1;
		String callSubjectName=ATCE_ATSubject2;
		
		String[] participantRecordName= ATCE_participantRecordName1.split("<break>");
		
		String[] participantRecordObject= ATCE_participantObjectName1.split("<break>");
		
		
		String[] tagsRecordName=ATCE_tagsRecordName1.split("<break>");
		String[] tagsRecordObject= ATCE_tagsObjectName1.split("<break>");
		
	
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
										
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
					
						ArrayList<String> result4=bp.verifyRedirectionOnClickRecordAndReferencedTypeOnTagged(firmsTagname, firmsTagCount, peopleTagname, peopleTagCount, dealTagname, dealTagCount, false, null, null);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The Redirection are working properly on Tagged Section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Redirection are not working properly on Tagged Section", YesNo.No);
							sa.assertTrue(false,  "The Redirection are not working properly on Tagged Section");
						}
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getContactNameFromContactSection(contactName,20), "contact name "+contactName+" on Contact section"))
						{
							log(LogStatus.INFO, "Clicked on contact name "+contactName, YesNo.No);	
							String parentID=switchOnWindow(driver);
							if(bp.getObjectPageName("Contact",15)!=null && bp.getRecordNameOnPage(contactName,15)!=null)
					    	{
					    		log(LogStatus.INFO, "The redirection of contact : "+contactName+" is working properly",YesNo.No);
					    	}
					    	else
					    	{
					    		log(LogStatus.ERROR, "The redirection of contact : "+contactName+" is not working properly.",YesNo.No);
					    		sa.assertTrue(false,   "The redirection of contact : "+contactName+" is not working properly.");
					    		
					    	}
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on contact name "+contactName, YesNo.No);	
							sa.assertTrue(false,  "Not able to click on contact name "+contactName);
						}
						
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(taskSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(taskSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(callSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(callSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							driver.close();
							driver.switchTo().window(parentID);
							
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc098_VerifyHyperlinkFunctionalityForIntermediaryRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord9;
		
		String contactName=ATCE_ContactFullName5;
		
		String[] highlightedFirm=ATCE_HighlightedFirm1.split("<break>");
		
		String firmTagName=ATCE_TaggedFirmsName17;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount17;
		
		String[] iconType= {ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10};
		String[] date= {ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10};
		String[] subject= {ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10};
		String[] notes= {ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10)};
		String[][] tag= {ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>")};
		
		String peopleTagName=ATCE_TaggedPeopleName14;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount14;
		
		
		String dealTagName=ATCE_TaggedDealName2;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount2;
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] firmsTagname= {ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22};
		String[] firmsTagCount= {ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22};
		
		String[] peopleTagname= {ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16};
		String[] peopleTagCount= {ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16};
		
		String[] dealTagname= {ATCE_TaggedDealName2};
		String[] dealTagCount= {ATCE_TaggedDealCount2};
		
		String taskSubjectName=ATCE_ATSubject1;
		String callSubjectName=ATCE_ATSubject2;
		
		String[] participantRecordName= ATCE_participantRecordName1.split("<break>");
		
		String[] participantRecordObject= ATCE_participantObjectName1.split("<break>");
		
		
		String[] tagsRecordName=ATCE_tagsRecordName1.split("<break>");
		String[] tagsRecordObject= ATCE_tagsObjectName1.split("<break>");
		
	
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
										
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
					
						ArrayList<String> result4=bp.verifyRedirectionOnClickRecordAndReferencedTypeOnTagged(firmsTagname, firmsTagCount, peopleTagname, peopleTagCount, dealTagname, dealTagCount, false, null, null);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The Redirection are working properly on Tagged Section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Redirection are not working properly on Tagged Section", YesNo.No);
							sa.assertTrue(false,  "The Redirection are not working properly on Tagged Section");
						}
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getContactNameFromContactSection(contactName,20), "contact name "+contactName+" on Contact section"))
						{
							log(LogStatus.INFO, "Clicked on contact name "+contactName, YesNo.No);	
							String parentID=switchOnWindow(driver);
							if(bp.getObjectPageName("Contact",15)!=null && bp.getRecordNameOnPage(contactName,15)!=null)
					    	{
					    		log(LogStatus.INFO, "The redirection of contact : "+contactName+" is working properly",YesNo.No);
					    	}
					    	else
					    	{
					    		log(LogStatus.ERROR, "The redirection of contact : "+contactName+" is not working properly.",YesNo.No);
					    		sa.assertTrue(false,   "The redirection of contact : "+contactName+" is not working properly.");
					    		
					    	}
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on contact name "+contactName, YesNo.No);	
							sa.assertTrue(false,  "Not able to click on contact name "+contactName);
						}
						
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(taskSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(taskSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(callSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(callSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							driver.close();
							driver.switchTo().window(parentID);
							
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc099_VerifyHyperlinkFunctionalityForInstitutionRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord3;
		
		String contactName=ATCE_ContactFullName3;
		
		String[] highlightedFirm=ATCE_HighlightedFirm1.split("<break>");
		
		String firmTagName=ATCE_TaggedFirmsName17;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount17;
		
		String[] iconType= {ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10};
		String[] date= {ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10};
		String[] subject= {ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10};
		String[] notes= {ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10)};
		String[][] tag= {ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>")};
		
		String peopleTagName=ATCE_TaggedPeopleName14;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount14;
		
		
		String fundTagName=ATCE_TaggedFundName2;
		String fundTimeReferenceCount=ATCE_TaggedFundCount2;
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] firmsTagname= {ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22};
		String[] firmsTagCount= {ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22};
		
		String[] peopleTagname= {ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16};
		String[] peopleTagCount= {ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16};
		
		String[] fundTagname= {ATCE_TaggedFundName2};
		String[] fundCount= {ATCE_TaggedFundCount2};
		
		String taskSubjectName=ATCE_ATSubject1;
		String callSubjectName=ATCE_ATSubject2;
		
		String[] participantRecordName= ATCE_participantRecordName1.split("<break>");
		
		String[] participantRecordObject= ATCE_participantObjectName1.split("<break>");
		
		
		String[] tagsRecordName=ATCE_tagsRecordName1.split("<break>");
		String[] tagsRecordObject= ATCE_tagsObjectName1.split("<break>");
		
	
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
										
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Funds", 30), "Funds tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Funds tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Funds", fundTagName, fundTimeReferenceCount,30), fundTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+fundTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(fundTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+fundTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+fundTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+fundTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+fundTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+fundTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Funds tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Funds tab name");
						}
						
					
						ArrayList<String> result4=bp.verifyRedirectionOnClickRecordAndReferencedTypeOnTagged(firmsTagname, firmsTagCount, peopleTagname, peopleTagCount, null, null, true, fundTagname, fundCount);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The Redirection are working properly on Tagged Section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Redirection are not working properly on Tagged Section", YesNo.No);
							sa.assertTrue(false,  "The Redirection are not working properly on Tagged Section");
						}
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getContactNameFromContactSection(contactName,20), "contact name "+contactName+" on Contact section"))
						{
							log(LogStatus.INFO, "Clicked on contact name "+contactName, YesNo.No);	
							String parentID=switchOnWindow(driver);
							if(bp.getObjectPageName("Contact",15)!=null && bp.getRecordNameOnPage(contactName,15)!=null)
					    	{
					    		log(LogStatus.INFO, "The redirection of contact : "+contactName+" is working properly",YesNo.No);
					    	}
					    	else
					    	{
					    		log(LogStatus.ERROR, "The redirection of contact : "+contactName+" is not working properly.",YesNo.No);
					    		sa.assertTrue(false,   "The redirection of contact : "+contactName+" is not working properly.");
					    		
					    	}
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on contact name "+contactName, YesNo.No);	
							sa.assertTrue(false,  "Not able to click on contact name "+contactName);
						}
						
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(taskSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(taskSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(callSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(callSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							driver.close();
							driver.switchTo().window(parentID);
							
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc100_VerifyHyperlinkFunctionalityForPortfolioCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord11;
		
		String contactName=ATCE_ContactFullName11;
		
		String[] highlightedFirm=ATCE_HighlightedFirm1.split("<break>");
		
		String firmTagName=ATCE_TaggedFirmsName17;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount17;
		
		String[] iconType= {ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10};
		String[] date= {ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10};
		String[] subject= {ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10};
		String[] notes= {ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10)};
		String[][] tag= {ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>")};
		
		String peopleTagName=ATCE_TaggedPeopleName14;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount14;
		
		
		String dealTagName=ATCE_TaggedDealName2;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount2;
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] firmsTagname= {ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22};
		String[] firmsTagCount= {ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22};
		
		String[] peopleTagname= {ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16};
		String[] peopleTagCount= {ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16};
		
		String[] dealTagname= {ATCE_TaggedDealName2};
		String[] dealTagCount= {ATCE_TaggedDealCount2};
		
		String taskSubjectName=ATCE_ATSubject1;
		String callSubjectName=ATCE_ATSubject2;
		
		String[] participantRecordName= ATCE_participantRecordName1.split("<break>");
		
		String[] participantRecordObject= ATCE_participantObjectName1.split("<break>");
		
		
		String[] tagsRecordName=ATCE_tagsRecordName1.split("<break>");
		String[] tagsRecordObject= ATCE_tagsObjectName1.split("<break>");
		
	
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
										
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
					
						ArrayList<String> result4=bp.verifyRedirectionOnClickRecordAndReferencedTypeOnTagged(firmsTagname, firmsTagCount, peopleTagname, peopleTagCount, dealTagname, dealTagCount, false, null, null);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The Redirection are working properly on Tagged Section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Redirection are not working properly on Tagged Section", YesNo.No);
							sa.assertTrue(false,  "The Redirection are not working properly on Tagged Section");
						}
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getContactNameFromContactSection(contactName,20), "contact name "+contactName+" on Contact section"))
						{
							log(LogStatus.INFO, "Clicked on contact name "+contactName, YesNo.No);	
							String parentID=switchOnWindow(driver);
							if(bp.getObjectPageName("Contact",15)!=null && bp.getRecordNameOnPage(contactName,15)!=null)
					    	{
					    		log(LogStatus.INFO, "The redirection of contact : "+contactName+" is working properly",YesNo.No);
					    	}
					    	else
					    	{
					    		log(LogStatus.ERROR, "The redirection of contact : "+contactName+" is not working properly.",YesNo.No);
					    		sa.assertTrue(false,   "The redirection of contact : "+contactName+" is not working properly.");
					    		
					    	}
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on contact name "+contactName, YesNo.No);	
							sa.assertTrue(false,  "Not able to click on contact name "+contactName);
						}
						
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(taskSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(taskSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(callSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(callSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							driver.close();
							driver.switchTo().window(parentID);
							
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc101_VerifyHyperlinkFunctionalityForPrivateEquityRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord13;
		
		String contactName=ATCE_ContactFullName13;
		
		String[] highlightedFirm=ATCE_HighlightedFirm1.split("<break>");
		
		String firmTagName=ATCE_TaggedFirmsName17;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount17;
		
		String[] iconType= {ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10};
		String[] date= {ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10};
		String[] subject= {ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10};
		String[] notes= {ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10)};
		String[][] tag= {ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>")};
		
		String peopleTagName=ATCE_TaggedPeopleName14;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount14;
		
		
		String dealTagName=ATCE_TaggedDealName2;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount2;
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] firmsTagname= {ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22};
		String[] firmsTagCount= {ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22};
		
		String[] peopleTagname= {ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16};
		String[] peopleTagCount= {ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16};
		
		String[] dealTagname= {ATCE_TaggedDealName2};
		String[] dealTagCount= {ATCE_TaggedDealCount2};
		
		String taskSubjectName=ATCE_ATSubject1;
		String callSubjectName=ATCE_ATSubject2;
		
		String[] participantRecordName= ATCE_participantRecordName1.split("<break>");
		
		String[] participantRecordObject= ATCE_participantObjectName1.split("<break>");
		
		
		String[] tagsRecordName=ATCE_tagsRecordName1.split("<break>");
		String[] tagsRecordObject= ATCE_tagsObjectName1.split("<break>");
		
	
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
										
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
					
						ArrayList<String> result4=bp.verifyRedirectionOnClickRecordAndReferencedTypeOnTagged(firmsTagname, firmsTagCount, peopleTagname, peopleTagCount, dealTagname, dealTagCount, false, null, null);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The Redirection are working properly on Tagged Section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Redirection are not working properly on Tagged Section", YesNo.No);
							sa.assertTrue(false,  "The Redirection are not working properly on Tagged Section");
						}
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getContactNameFromContactSection(contactName,20), "contact name "+contactName+" on Contact section"))
						{
							log(LogStatus.INFO, "Clicked on contact name "+contactName, YesNo.No);	
							String parentID=switchOnWindow(driver);
							if(bp.getObjectPageName("Contact",15)!=null && bp.getRecordNameOnPage(contactName,15)!=null)
					    	{
					    		log(LogStatus.INFO, "The redirection of contact : "+contactName+" is working properly",YesNo.No);
					    	}
					    	else
					    	{
					    		log(LogStatus.ERROR, "The redirection of contact : "+contactName+" is not working properly.",YesNo.No);
					    		sa.assertTrue(false,   "The redirection of contact : "+contactName+" is not working properly.");
					    		
					    	}
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on contact name "+contactName, YesNo.No);	
							sa.assertTrue(false,  "Not able to click on contact name "+contactName);
						}
						
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(taskSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(taskSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(callSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(callSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							driver.close();
							driver.switchTo().window(parentID);
							
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc102_VerifyHyperlinkFunctionalityForContactType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Con1;
		
				
		String firmTagName=ATCE_TaggedFirmsName2;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount2;
		
		String[] iconType= {ATCE_ATActivityType1,ATCE_ATActivityType2};
		String[] date= {ATCE_ATDueDate1,ATCE_ATDueDate2};
		String[] subject= {ATCE_ATSubject1,ATCE_ATSubject2};
		String[] notes= {ATCE_ATNote1,ATCE_ATNote2};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2)};
		String[][] tag= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>")};
		
		String peopleTagName=ATCE_TaggedPeopleName1;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount1;
		
		
		String dealTagName=ATCE_TaggedDealName3;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount3;
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] firmsTagname= {ATCE_TaggedFirmsName25,ATCE_TaggedFirmsName26};
		String[] firmsTagCount= {ATCE_TaggedFirmsCount25,ATCE_TaggedFirmsCount26};
		
		String[] peopleTagname= {ATCE_TaggedPeopleName11,ATCE_TaggedPeopleName12};
		String[] peopleTagCount= {ATCE_TaggedPeopleCount11,ATCE_TaggedPeopleCount12};
		
		String[] dealTagname= {ATCE_TaggedDealName3};
		String[] dealTagCount= {ATCE_TaggedDealCount3};
		
		String taskSubjectName=ATCE_ATSubject1;
		String callSubjectName=ATCE_ATSubject2;
		
		String[] participantRecordName= ATCE_participantRecordName1.split("<break>");
		
		String[] participantRecordObject= ATCE_participantObjectName1.split("<break>");
		
		
		String[] tagsRecordName=ATCE_tagsRecordName1.split("<break>");
		String[] tagsRecordObject= ATCE_tagsObjectName1.split("<break>");
		
	
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
					
						ArrayList<String> result4=bp.verifyRedirectionOnClickRecordAndReferencedTypeOnTagged(firmsTagname, firmsTagCount, peopleTagname, peopleTagCount, dealTagname, dealTagCount, false, null, null);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The Redirection are working properly on Tagged Section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Redirection are not working properly on Tagged Section", YesNo.No);
							sa.assertTrue(false,  "The Redirection are not working properly on Tagged Section");
						}
						
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(taskSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(taskSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(callSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(callSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							driver.close();
							driver.switchTo().window(parentID);
							
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj2, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj2);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc103_VerifyHyperlinkFunctionalityForDealType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Deal1;
		
		
		String firmTagName=ATCE_TaggedFirmsName17;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount17;
		
		String[] iconType= {ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10};
		String[] date= {ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10};
		String[] subject= {ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10};
		String[] notes= {ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10)};
		String[][] tag= {ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>")};
		
		String peopleTagName=ATCE_TaggedPeopleName14;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount14;
		
		
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] firmsTagname= {ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22};
		String[] firmsTagCount= {ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22};
		
		String[] peopleTagname= {ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16};
		String[] peopleTagCount= {ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16};
		
		String[] dealTagname= {ATCE_TaggedDealName2};
		String[] dealTagCount= {ATCE_TaggedDealCount2};
		
		String taskSubjectName=ATCE_ATSubject1;
		String callSubjectName=ATCE_ATSubject2;
		
		String[] participantRecordName= ATCE_participantRecordName1.split("<break>");
		
		String[] participantRecordObject= ATCE_participantObjectName1.split("<break>");
		
		
		String[] tagsRecordName=ATCE_tagsRecordName1.split("<break>");
		String[] tagsRecordObject= ATCE_tagsObjectName1.split("<break>");
		
	
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
		if (lp.clickOnTab(projectName, tabObj4)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
					
						ArrayList<String> result4=bp.verifyRedirectionOnClickRecordAndReferencedTypeOnTagged(firmsTagname, firmsTagCount, peopleTagname, peopleTagCount, null, null, false, null, null);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The Redirection are working properly on Tagged Section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Redirection are not working properly on Tagged Section", YesNo.No);
							sa.assertTrue(false,  "The Redirection are not working properly on Tagged Section");
						}
						
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(taskSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup, subject name "+taskSubjectName+". "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup, subject name "+taskSubjectName+". "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(taskSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup, subject name "+taskSubjectName+". "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup, subject name "+taskSubjectName+".  "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(callSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup, subject name "+taskSubjectName+".  "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup, subject name "+taskSubjectName+".  "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(callSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup, subject name "+taskSubjectName+".  "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup, subject name "+taskSubjectName+".  "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							driver.close();
							driver.switchTo().window(parentID);
							
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc104_VerifyHyperlinkFunctionalityForFundraisingType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fundraising1;
		
		
		String firmTagName=ATCE_TaggedFirmsName17;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount17;
		
		String[] iconType= {ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10};
		String[] date= {ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10};
		String[] subject= {ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10};
		String[] notes= {ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10)};
		String[][] tag= {ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>")};
		
		String peopleTagName=ATCE_TaggedPeopleName14;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount14;
		
	
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] firmsTagname= {ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22};
		String[] firmsTagCount= {ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22};
		
		String[] peopleTagname= {ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16};
		String[] peopleTagCount= {ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16};
		
		
		
		String taskSubjectName=ATCE_ATSubject1;
		String callSubjectName=ATCE_ATSubject2;
		
		String[] participantRecordName= ATCE_participantRecordName1.split("<break>");
		
		String[] participantRecordObject= ATCE_participantObjectName1.split("<break>");
		
		
		String[] tagsRecordName=ATCE_tagsRecordName1.split("<break>");
		String[] tagsRecordObject= ATCE_tagsObjectName1.split("<break>");
		
	
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
		if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
						
						
					
						ArrayList<String> result4=bp.verifyRedirectionOnClickRecordAndReferencedTypeOnTagged(firmsTagname, firmsTagCount, peopleTagname, peopleTagCount, null, null, false, null, null);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The Redirection are working properly on Tagged Section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Redirection are not working properly on Tagged Section", YesNo.No);
							sa.assertTrue(false,  "The Redirection are not working properly on Tagged Section");
						}
						
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(taskSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(taskSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(callSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(callSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							driver.close();
							driver.switchTo().window(parentID);
							
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+TabName.Fundraising.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+TabName.Fundraising.toString());
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc105_VerifyHyperlinkFunctionalityForFundType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fund1;
		
		
		String firmTagName=ATCE_TaggedFirmsName17;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount17;
		
		String[] iconType= {ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10};
		String[] date= {ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10};
		String[] subject= {ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10};
		String[] notes= {ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10)};
		String[][] tag= {ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>")};
		
		String peopleTagName=ATCE_TaggedPeopleName14;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount14;
		
		
		String dealTagName=ATCE_TaggedDealName2;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount2;
		
		
		String[] iconType1= {ATCE_ATActivityType1,ATCE_ATActivityType2,ATCE_ATActivityType3,ATCE_ATActivityType4,ATCE_ATActivityType5,ATCE_ATActivityType6,ATCE_ATActivityType7,ATCE_ATActivityType8,ATCE_ATActivityType9,ATCE_ATActivityType10,ATCE_ATActivityType11,ATCE_ATActivityType12,ATCE_ATActivityType13,ATCE_ATActivityType14,ATCE_ATActivityType15,ATCE_ATActivityType16,ATCE_ATActivityType17,ATCE_ATActivityType18,ATCE_ATActivityType19,ATCE_ATActivityType20,ATCE_ATActivityType21,ATCE_ATActivityType22,ATCE_ATActivityType23,ATCE_ATActivityType24,ATCE_ATActivityType25,ATCE_ATActivityType26};
		String[] date1= {ATCE_ATDueDate1,ATCE_ATDueDate2,ATCE_ATDueDate3,ATCE_ATDueDate4,ATCE_ATDueDate5,ATCE_ATDueDate6,ATCE_ATDueDate7,ATCE_ATDueDate8,ATCE_ATDueDate9,ATCE_ATDueDate10,ATCE_ATDueDate11,ATCE_ATDueDate12,ATCE_ATDueDate13,ATCE_ATDueDate14,ATCE_ATDueDate15,ATCE_ATDueDate16,ATCE_ATDueDate17,ATCE_ATDueDate18,ATCE_ATDueDate19,ATCE_ATDueDate20,ATCE_ATDueDate21,ATCE_ATDueDate22,ATCE_ATDueDate23,ATCE_ATDueDate24,ATCE_ATDueDate25,ATCE_ATDueDate26};
		String[] subject1= {ATCE_ATSubject1,ATCE_ATSubject2,ATCE_ATSubject3,ATCE_ATSubject4,ATCE_ATSubject5,ATCE_ATSubject6,ATCE_ATSubject7,ATCE_ATSubject8,ATCE_ATSubject9,ATCE_ATSubject10,ATCE_ATSubject11,ATCE_ATSubject12,ATCE_ATSubject13,ATCE_ATSubject14,ATCE_ATSubject15,ATCE_ATSubject16,ATCE_ATSubject17,ATCE_ATSubject18,ATCE_ATSubject19,ATCE_ATSubject20,ATCE_ATSubject21,ATCE_ATSubject22,ATCE_ATSubject23,ATCE_ATSubject24,ATCE_ATSubject25,ATCE_ATSubject26};
		String[] notes1= {ATCE_ATNote1,ATCE_ATNote2,ATCE_ATNote3,ATCE_ATNote4,ATCE_ATNote5,ATCE_ATNote6,ATCE_ATNote7,ATCE_ATNote8,ATCE_ATNote9,ATCE_ATNote10,ATCE_ATNote11,ATCE_ATNote12,ATCE_ATNote13,ATCE_ATNote14,ATCE_ATNote15,ATCE_ATNote16,ATCE_ATNote17,ATCE_ATNote18,ATCE_ATNote19,ATCE_ATNote20,ATCE_ATNote21,ATCE_ATNote22,ATCE_ATNote23,ATCE_ATNote24,ATCE_ATNote25,ATCE_ATNote26};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants1),bp.getParticipantData(ATCE_ATParticipants2),bp.getParticipantData(ATCE_ATParticipants3),bp.getParticipantData(ATCE_ATParticipants4),bp.getParticipantData(ATCE_ATParticipants5),bp.getParticipantData(ATCE_ATParticipants6),bp.getParticipantData(ATCE_ATParticipants7),bp.getParticipantData(ATCE_ATParticipants8),bp.getParticipantData(ATCE_ATParticipants9),bp.getParticipantData(ATCE_ATParticipants10),bp.getParticipantData(ATCE_ATParticipants11),bp.getParticipantData(ATCE_ATParticipants12),bp.getParticipantData(ATCE_ATParticipants13),
				bp.getParticipantData(ATCE_ATParticipants14),bp.getParticipantData(ATCE_ATParticipants15),bp.getParticipantData(ATCE_ATParticipants16),bp.getParticipantData(ATCE_ATParticipants17),bp.getParticipantData(ATCE_ATParticipants18),bp.getParticipantData(ATCE_ATParticipants19),bp.getParticipantData(ATCE_ATParticipants20),bp.getParticipantData(ATCE_ATParticipants21),bp.getParticipantData(ATCE_ATParticipants22),bp.getParticipantData(ATCE_ATParticipants23),bp.getParticipantData(ATCE_ATParticipants24),bp.getParticipantData(ATCE_ATParticipants25),bp.getParticipantData(ATCE_ATParticipants26)};
		String[][] tag1= {ATCE_ATTags1.split("<break>"),ATCE_ATTags2.split("<break>"),ATCE_ATTags3.split("<break>"),ATCE_ATTags4.split("<break>"),ATCE_ATTags5.split("<break>"),ATCE_ATTags6.split("<break>"),ATCE_ATTags7.split("<break>"),ATCE_ATTags8.split("<break>"),ATCE_ATTags9.split("<break>"),ATCE_ATTags10.split("<break>"),ATCE_ATTags11.split("<break>"),ATCE_ATTags12.split("<break>"),ATCE_ATTags13.split("<break>"),ATCE_ATTags14.split("<break>"),ATCE_ATTags15.split("<break>"),ATCE_ATTags16.split("<break>"),ATCE_ATTags17.split("<break>"),ATCE_ATTags18.split("<break>"),ATCE_ATTags19.split("<break>"),ATCE_ATTags20.split("<break>"),
				ATCE_ATTags21.split("<break>"),ATCE_ATTags22.split("<break>"),ATCE_ATTags23.split("<break>"),ATCE_ATTags24.split("<break>"),ATCE_ATTags25.split("<break>"),ATCE_ATTags26.split("<break>")};
		
		
		String[] firmsTagname= {ATCE_TaggedFirmsName21,ATCE_TaggedFirmsName22};
		String[] firmsTagCount= {ATCE_TaggedFirmsCount21,ATCE_TaggedFirmsCount22};
		
		String[] peopleTagname= {ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16};
		String[] peopleTagCount= {ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16};
		
		String[] dealTagname= {ATCE_TaggedDealName2};
		String[] dealTagCount= {ATCE_TaggedDealCount2};
		
		String taskSubjectName=ATCE_ATSubject1;
		String callSubjectName=ATCE_ATSubject2;
		
		String[] participantRecordName= ATCE_participantRecordName1.split("<break>");
		
		String[] participantRecordObject= ATCE_participantObjectName1.split("<break>");
		
		
		String[] tagsRecordName=ATCE_tagsRecordName1.split("<break>");
		String[] tagsRecordObject= ATCE_tagsObjectName1.split("<break>");
		
	
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
		if (lp.clickOnTab(projectName, tabObj3)) {

			log(LogStatus.INFO, "Clicked on Tab : " +tabObj3, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType, date, subject, notes, subject,participant, tag);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
					
						ArrayList<String> result4=bp.verifyRedirectionOnClickRecordAndReferencedTypeOnTagged(firmsTagname, firmsTagCount, peopleTagname, peopleTagCount, dealTagname, dealTagCount, false, null, null);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The Redirection are working properly on Tagged Section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The Redirection are not working properly on Tagged Section", YesNo.No);
							sa.assertTrue(false,  "The Redirection are not working properly on Tagged Section");
						}
						
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=switchOnWindow(driver);
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(taskSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(taskSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(callSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(callSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							driver.close();
							driver.switchTo().window(parentID);
							
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj3, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj3);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc106_VerifyHyperlinkFunctionalityForThemeType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Theme1;
		
		
		
		String taskSubjectName=ATCE_ATSubject1;
		String callSubjectName=ATCE_ATSubject2;
		
		String[] participantRecordName= ATCE_participantRecordName1.split("<break>");
		
		String[] participantRecordObject= ATCE_participantObjectName1.split("<break>");
		
		
		String[] tagsRecordName=ATCE_tagsRecordName1.split("<break>");
		String[] tagsRecordObject= ATCE_tagsObjectName1.split("<break>");
		
	
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
		

		if (lp.clickOnTab(projectName, TabName.Themes.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : "+TabName.Themes.toString(), YesNo.No);

			String parentWindowID=bp.clickOnThemeRecord(recordName);

			if (parentWindowID!=null) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					
			
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							String parentID=CommonLib.switchToWindowOpenNextToParentWindow(driver);
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(taskSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(taskSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getParticipantColumn(callSubjectName, 20), "Participant"))
							{
								log(LogStatus.INFO, "clicked on Paticipant column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(participantRecordName, participantRecordObject,null,null);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Participant popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Participant popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Participant popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Paticipant column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Paticipant column" );
							}
							
							
							
							if(CommonLib.clickUsingJavaScript(driver, bp.getTagsColumn(callSubjectName, 20), "tags"))
							{
								log(LogStatus.INFO, "clicked on Tags column", YesNo.No);
								
								ArrayList<String> result=bp.verifyRedirectionFromParticipantAndTagPopup(null, null, tagsRecordName, tagsRecordObject);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "The Redirection are working properly on From Tags popup", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The Redirection are not working properly on From Tags popup. "+result, YesNo.No);
									sa.assertTrue(false,  "The Redirection are not working properly on From Tags popup. "+result);
								}
								
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Tags column", YesNo.No);
								sa.assertTrue(false,  "Not able to click on Tags column" );
							}
							
							driver.close();
							driver.switchTo().window(parentID);
							
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+TabName.Themes.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+TabName.Themes.toString());
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc107_CreateFollowUpTask(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);

		String task1SubjectNameNavigation = ATCE_ATSubject2;
		
		String taskSubject=ATCE_ATSubject27;
		String taskRelatedTo=ATCE_ATRelatedTo27;
		String taskNotes=ATCE_ATNote27;
		String taskStatus=ATCE_AdvanceStatus14;
		String taskPriority=ATCE_AdvancePriority14;	
		String dueDateDay=ATCE_ATDay27;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_027", excelLabel.Advance_Due_Date);

		
		String[][] basicSection = {{ "Related_To", taskRelatedTo } };
		String[][][] taskSection= {{{"Subject",taskSubject}, {"Status",taskStatus}, {"Due Date",taskDueDate}}};	
		

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (home.globalSearchAndNavigate(task1SubjectNameNavigation, "Tasks", false)) {

			log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectNameNavigation + " found in Tasks Object-----",YesNo.No);
			String parentID=switchOnWindow(driver);
			if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(task1SubjectNameNavigation, 20), "Edit button of popup of subject name "+task1SubjectNameNavigation))
			{
				log(LogStatus.INFO,"Clicked on edit button of subject "+task1SubjectNameNavigation,YesNo.No);
				

				if (bp.updateActivityTimelineRecordForMultipleFollowUpTasks(projectName, basicSection,null, taskSection, null, null,false,false)) {
					log(LogStatus.PASS, "Followup record has been created, Subject name : "+taskSubject, YesNo.No);
					sa.assertTrue(true, "Followup record has been created,  Subject name : "+taskSubject);

				}
				else
				{
					log(LogStatus.ERROR, "Followup record is not created, Subject name : "+taskSubject, YesNo.No);
					sa.assertTrue(false, "Followup record is not created,  Subject name : "+taskSubject);
				}	 
				
			}
			else
			{
				log(LogStatus.ERROR,"Not able to click on edit button of subject "+task1SubjectNameNavigation,YesNo.No);
				BaseLib.sa.assertTrue(false,"Not able to click on edit button of subject "+task1SubjectNameNavigation);
				
			}
			driver.close();
			driver.switchTo().window(parentID);
			
		}
		 else {

				log(LogStatus.ERROR, "-----Task named: " + task1SubjectNameNavigation + " not found in Tasks Object-----",YesNo.Yes);
				BaseLib.sa.assertTrue(false,"-----Task named: " + task1SubjectNameNavigation + " not found in Tasks Object-----");

			}


		lp.CRMlogout();	
		sa.assertAll();	
	}

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc108_CreateATaskAndLogACallAndAssignToUser2(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		
		String activityType=ATCE_ATActivityType29;
		String taskSubject=ATCE_ATSubject29;
		String taskRelatedTo=ATCE_ATRelatedTo29;
		String taskNotes=ATCE_ATNote29;
		String taskStatus=ATCE_AdvanceStatus15;
		String taskPriority=ATCE_AdvancePriority15;	
		String dueDateDay=ATCE_ATDay29;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_029", excelLabel.Advance_Due_Date);
		
		String activityType1=ATCE_ATActivityType28;
		String taskSubject1=ATCE_ATSubject28;
		String taskRelatedTo1=ATCE_ATRelatedTo28;
		String taskNotes1=ATCE_ATNote28;	
		String dueDateDay1=ATCE_ATDay28;
		String taskDueDate1 = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay1));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate1, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_028", excelLabel.Advance_Due_Date);
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		String userName3=crmUser8FirstName+" "+crmUser8LastName;
		String assigneduser=null,assigneduser1=null;

		if(ATCE_AUser28.equals("PE User 2"))
		{
			assigneduser1=userName2;
			
		}
		else if(ATCE_AUser28.equals("PE User 1"))
		{
			assigneduser1=userName1;
			
		}
		if(ATCE_AUser29.equals("PE User 2"))
		{
			assigneduser=userName2;
			
		}
		else if(ATCE_AUser29.equals("PE User 1"))
		{
			assigneduser=userName1;
			
		}
	
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority}, {"User",assigneduser} };
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }, {"User",assigneduser1}};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (bp.createActivityTimeline(projectName, true, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
			log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
			sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

		}
		else
		{
			log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
			sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
		}	 
		
		if (bp.createActivityTimeline(projectName, true, activityType1, basicsection1, advanceSection1, null, null, false, null, null,null, null,null,null)) {
			log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject1, YesNo.No);
			sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject1);

		}
		else
		{
			log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject1, YesNo.No);
			sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject1);
		}	 

		lp.CRMlogout();	
		sa.assertAll();	
	}
	

	@Parameters({ "projectName" })
	@Test
	public void ATCETc109_VerifyFollowupTaskTaskCallFunctionalityOnCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord1;
	
		String contactSectionName=ATCE_ConName15;
		String contactSectionTitle=ATCE_ConTitle15;
		String contactSectionDeal=ATCE_ConDeal15;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall15;
		String contactSectionEmail=ATCE_ConEmail15;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName34,ATCE_TaggedFirmsName35,ATCE_TaggedFirmsName36,ATCE_TaggedFirmsName37,ATCE_TaggedFirmsName38,ATCE_TaggedFirmsName39,ATCE_TaggedFirmsName40,ATCE_TaggedFirmsName41,ATCE_TaggedFirmsName42,ATCE_TaggedFirmsName43,ATCE_TaggedFirmsName44,ATCE_TaggedFirmsName45,ATCE_TaggedFirmsName46};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount34,ATCE_TaggedFirmsCount35,ATCE_TaggedFirmsCount36,ATCE_TaggedFirmsCount37,ATCE_TaggedFirmsCount38,ATCE_TaggedFirmsCount39,ATCE_TaggedFirmsCount40,ATCE_TaggedFirmsCount41,ATCE_TaggedFirmsCount42,ATCE_TaggedFirmsCount43,ATCE_TaggedFirmsCount44,ATCE_TaggedFirmsCount45,ATCE_TaggedFirmsCount46};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName25,ATCE_TaggedPeopleName26,ATCE_TaggedPeopleName27,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName28,ATCE_TaggedPeopleName29,ATCE_TaggedPeopleName30};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount25,ATCE_TaggedPeopleCount26,ATCE_TaggedPeopleCount27,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount28,ATCE_TaggedPeopleCount29,ATCE_TaggedPeopleCount30};
				
		String[] dealTaggedName= {ATCE_TaggedDealName4,ATCE_TaggedDealName5};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount4,ATCE_TaggedDealCount5};
		
		
		String[] connectionUserName= {crmUser6FirstName+" "+crmUser6LastName,crmUser7FirstName+" "+crmUser7LastName};
		String[] connectionTitle= {ATCE_ConnectionTitle2,ATCE_ConnectionTitle4};
		String[] connectionDeal= {ATCE_ConnectionDeal2,ATCE_ConnectionDeal4};
		String[] connectionMeetingaAndCall= {ATCE_ConnectionMeetingAndCall2,ATCE_ConnectionMeetingAndCall4};
		String[] connectionEmail= {ATCE_ConnectionEmail2,ATCE_ConnectionEmail4};
		
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		
		String[] iconType= {ATCE_ATActivityType28};
		String[] date= {ATCE_ATDueDate28};
		String[] subject= {ATCE_ATSubject28};
		String[] notes= {ATCE_ATNote28};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants28)};
		String[][] tag= {ATCE_ATTags28.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType27,ATCE_ATActivityType28,ATCE_ATActivityType29};
		String[] date1= {ATCE_ATDueDate27,ATCE_ATDueDate28,ATCE_ATDueDate29};
		String[] subject1= {ATCE_ATSubject27,ATCE_ATSubject28,ATCE_ATSubject29};
		String[] notes1= {ATCE_ATNote27,ATCE_ATNote28,ATCE_ATNote29};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27),bp.getParticipantData(ATCE_ATParticipants28),bp.getParticipantData(ATCE_ATParticipants29)};
		String[][] tag1= {ATCE_ATTags27.split("<break>"),ATCE_ATTags28.split("<break>"),ATCE_ATTags29.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.CompaniesTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName2, 20),"Count of "+userName2+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName2,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc110_VerifyFollowupTaskTaskCallFunctionalityOnAdvisorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord5;
	
		String contactSectionName=ATCE_ConName16;
		String contactSectionTitle=ATCE_ConTitle16;
		String contactSectionDeal=ATCE_ConDeal16;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall16;
		String contactSectionEmail=ATCE_ConEmail16;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName34,ATCE_TaggedFirmsName36,ATCE_TaggedFirmsName37,ATCE_TaggedFirmsName38,ATCE_TaggedFirmsName39,ATCE_TaggedFirmsName40,ATCE_TaggedFirmsName41,ATCE_TaggedFirmsName42,ATCE_TaggedFirmsName43,ATCE_TaggedFirmsName44,ATCE_TaggedFirmsName45,ATCE_TaggedFirmsName46,ATCE_TaggedFirmsName47};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount34,ATCE_TaggedFirmsCount36,ATCE_TaggedFirmsCount37,ATCE_TaggedFirmsCount38,ATCE_TaggedFirmsCount39,ATCE_TaggedFirmsCount40,ATCE_TaggedFirmsCount41,ATCE_TaggedFirmsCount42,ATCE_TaggedFirmsCount43,ATCE_TaggedFirmsCount44,ATCE_TaggedFirmsCount45,ATCE_TaggedFirmsCount46,ATCE_TaggedFirmsCount47};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName26,ATCE_TaggedPeopleName27,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName28,ATCE_TaggedPeopleName29,ATCE_TaggedPeopleName30,ATCE_TaggedPeopleName31};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount26,ATCE_TaggedPeopleCount27,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount28,ATCE_TaggedPeopleCount29,ATCE_TaggedPeopleCount30,ATCE_TaggedPeopleCount31};
				
		String[] dealTaggedName= {ATCE_TaggedDealName4,ATCE_TaggedDealName5};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount4,ATCE_TaggedDealCount5};
		
		
		String[] connectionUserName= {crmUser6FirstName+" "+crmUser6LastName,crmUser7FirstName+" "+crmUser7LastName};
		String[] connectionTitle= {ATCE_ConnectionTitle2,ATCE_ConnectionTitle4};
		String[] connectionDeal= {ATCE_ConnectionDeal2,ATCE_ConnectionDeal4};
		String[] connectionMeetingaAndCall= {ATCE_ConnectionMeetingAndCall2,ATCE_ConnectionMeetingAndCall4};
		String[] connectionEmail= {ATCE_ConnectionEmail2,ATCE_ConnectionEmail4};
		
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		
		String[] iconType= {ATCE_ATActivityType28};
		String[] date= {ATCE_ATDueDate28};
		String[] subject= {ATCE_ATSubject28};
		String[] notes= {ATCE_ATNote28};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants28)};
		String[][] tag= {ATCE_ATTags28.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType27,ATCE_ATActivityType28,ATCE_ATActivityType29};
		String[] date1= {ATCE_ATDueDate27,ATCE_ATDueDate28,ATCE_ATDueDate29};
		String[] subject1= {ATCE_ATSubject27,ATCE_ATSubject28,ATCE_ATSubject29};
		String[] notes1= {ATCE_ATNote27,ATCE_ATNote28,ATCE_ATNote29};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27),bp.getParticipantData(ATCE_ATParticipants28),bp.getParticipantData(ATCE_ATParticipants29)};
		String[][] tag1= {ATCE_ATTags27.split("<break>"),ATCE_ATTags28.split("<break>"),ATCE_ATTags29.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName2, 20),"Count of "+userName2+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName2,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc111_VerifyFollowupTaskTaskCallFunctionalityOnLenderRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord8;
	
		String contactSectionName=ATCE_ConName17;
		String contactSectionTitle=ATCE_ConTitle17;
		String contactSectionDeal=ATCE_ConDeal17;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall17;
		String contactSectionEmail=ATCE_ConEmail17;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName48,ATCE_TaggedFirmsName49,ATCE_TaggedFirmsName50,ATCE_TaggedFirmsName51,ATCE_TaggedFirmsName52,ATCE_TaggedFirmsName53,ATCE_TaggedFirmsName54,ATCE_TaggedFirmsName55,ATCE_TaggedFirmsName56,ATCE_TaggedFirmsName57};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount48,ATCE_TaggedFirmsCount49,ATCE_TaggedFirmsCount50,ATCE_TaggedFirmsCount51,ATCE_TaggedFirmsCount52,ATCE_TaggedFirmsCount53,ATCE_TaggedFirmsCount54,ATCE_TaggedFirmsCount55,ATCE_TaggedFirmsCount56,ATCE_TaggedFirmsCount57};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName32,ATCE_TaggedPeopleName33,ATCE_TaggedPeopleName34,ATCE_TaggedPeopleName35,ATCE_TaggedPeopleName36,ATCE_TaggedPeopleName37};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount32,ATCE_TaggedPeopleCount33,ATCE_TaggedPeopleCount34,ATCE_TaggedPeopleCount35,ATCE_TaggedPeopleCount36,ATCE_TaggedPeopleCount37};
				
		String[] dealTaggedName= {ATCE_TaggedDealName6,ATCE_TaggedDealName7};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount6,ATCE_TaggedDealCount7};
		
		
		String[] connectionUserName= {crmUser6FirstName+" "+crmUser6LastName,crmUser7FirstName+" "+crmUser7LastName};
		String[] connectionTitle= {ATCE_ConnectionTitle1,ATCE_ConnectionTitle4};
		String[] connectionDeal= {ATCE_ConnectionDeal1,ATCE_ConnectionDeal4};
		String[] connectionMeetingaAndCall= {ATCE_ConnectionMeetingAndCall1,ATCE_ConnectionMeetingAndCall4};
		String[] connectionEmail= {ATCE_ConnectionEmail1,ATCE_ConnectionEmail4};
		
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		
		String[] iconType= {ATCE_ATActivityType28};
		String[] date= {ATCE_ATDueDate28};
		String[] subject= {ATCE_ATSubject28};
		String[] notes= {ATCE_ATNote28};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants28)};
		String[][] tag= {ATCE_ATTags28.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType27,ATCE_ATActivityType28,ATCE_ATActivityType29};
		String[] date1= {ATCE_ATDueDate27,ATCE_ATDueDate28,ATCE_ATDueDate29};
		String[] subject1= {ATCE_ATSubject27,ATCE_ATSubject28,ATCE_ATSubject29};
		String[] notes1= {ATCE_ATNote27,ATCE_ATNote28,ATCE_ATNote29};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27),bp.getParticipantData(ATCE_ATParticipants28),bp.getParticipantData(ATCE_ATParticipants29)};
		String[][] tag1= {ATCE_ATTags27.split("<break>"),ATCE_ATTags28.split("<break>"),ATCE_ATTags29.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName2, 20),"Count of "+userName2+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName2,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc112_VerifyFollowupTaskTaskCallFunctionalityOnIntermediaryRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord10;
	
		String contactSectionName=ATCE_ConName18;
		String contactSectionTitle=ATCE_ConTitle18;
		String contactSectionDeal=ATCE_ConDeal18;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall18;
		String contactSectionEmail=ATCE_ConEmail18;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName48,ATCE_TaggedFirmsName49,ATCE_TaggedFirmsName50,ATCE_TaggedFirmsName51,ATCE_TaggedFirmsName52,ATCE_TaggedFirmsName53,ATCE_TaggedFirmsName55,ATCE_TaggedFirmsName56,ATCE_TaggedFirmsName57,ATCE_TaggedFirmsName58};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount48,ATCE_TaggedFirmsCount49,ATCE_TaggedFirmsCount50,ATCE_TaggedFirmsCount51,ATCE_TaggedFirmsCount52,ATCE_TaggedFirmsCount53,ATCE_TaggedFirmsCount55,ATCE_TaggedFirmsCount56,ATCE_TaggedFirmsCount57,ATCE_TaggedFirmsCount58};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName32,ATCE_TaggedPeopleName34,ATCE_TaggedPeopleName35,ATCE_TaggedPeopleName36,ATCE_TaggedPeopleName37,ATCE_TaggedPeopleName38};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount32,ATCE_TaggedPeopleCount34,ATCE_TaggedPeopleCount35,ATCE_TaggedPeopleCount36,ATCE_TaggedPeopleCount37,ATCE_TaggedPeopleCount38};
				
		String[] dealTaggedName= {ATCE_TaggedDealName6,ATCE_TaggedDealName7};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount6,ATCE_TaggedDealCount7};
		
		
		String[] connectionUserName= {crmUser6FirstName+" "+crmUser6LastName,crmUser7FirstName+" "+crmUser7LastName};
		String[] connectionTitle= {ATCE_ConnectionTitle1,ATCE_ConnectionTitle4};
		String[] connectionDeal= {ATCE_ConnectionDeal1,ATCE_ConnectionDeal4};
		String[] connectionMeetingaAndCall= {ATCE_ConnectionMeetingAndCall1,ATCE_ConnectionMeetingAndCall4};
		String[] connectionEmail= {ATCE_ConnectionEmail1,ATCE_ConnectionEmail4};
		
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		
		String[] iconType= {ATCE_ATActivityType28};
		String[] date= {ATCE_ATDueDate28};
		String[] subject= {ATCE_ATSubject28};
		String[] notes= {ATCE_ATNote28};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants28)};
		String[][] tag= {ATCE_ATTags28.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType27,ATCE_ATActivityType28,ATCE_ATActivityType29};
		String[] date1= {ATCE_ATDueDate27,ATCE_ATDueDate28,ATCE_ATDueDate29};
		String[] subject1= {ATCE_ATSubject27,ATCE_ATSubject28,ATCE_ATSubject29};
		String[] notes1= {ATCE_ATNote27,ATCE_ATNote28,ATCE_ATNote29};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27),bp.getParticipantData(ATCE_ATParticipants28),bp.getParticipantData(ATCE_ATParticipants29)};
		String[][] tag1= {ATCE_ATTags27.split("<break>"),ATCE_ATTags28.split("<break>"),ATCE_ATTags29.split("<break>")};
		
				
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName2, 20),"Count of "+userName2+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName2,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc113_VerifyFollowupTaskTaskCallFunctionalityOnInstitutionRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord4;
	
		String contactSectionName=ATCE_ConName19;
		String contactSectionTitle=ATCE_ConTitle19;
		String contactSectionDeal=ATCE_ConDeal19;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall19;
		String contactSectionEmail=ATCE_ConEmail19;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName48,ATCE_TaggedFirmsName49,ATCE_TaggedFirmsName51,ATCE_TaggedFirmsName52,ATCE_TaggedFirmsName53,ATCE_TaggedFirmsName54,ATCE_TaggedFirmsName55,ATCE_TaggedFirmsName56,ATCE_TaggedFirmsName57,ATCE_TaggedFirmsName58};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount48,ATCE_TaggedFirmsCount49,ATCE_TaggedFirmsCount51,ATCE_TaggedFirmsCount52,ATCE_TaggedFirmsCount53,ATCE_TaggedFirmsCount54,ATCE_TaggedFirmsCount55,ATCE_TaggedFirmsCount56,ATCE_TaggedFirmsCount57,ATCE_TaggedFirmsCount58};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName33,ATCE_TaggedPeopleName34,ATCE_TaggedPeopleName35,ATCE_TaggedPeopleName36,ATCE_TaggedPeopleName37,ATCE_TaggedPeopleName38};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount33,ATCE_TaggedPeopleCount34,ATCE_TaggedPeopleCount35,ATCE_TaggedPeopleCount36,ATCE_TaggedPeopleCount37,ATCE_TaggedPeopleCount38};
				
		String[] fundTaggedName= {ATCE_TaggedFundName3,ATCE_TaggedFundName4};
		String[] fundTaggedTimeReference= {ATCE_TaggedFundCount3,ATCE_TaggedFundCount4};
		
		
		String[] connectionUserName= {crmUser6FirstName+" "+crmUser6LastName,crmUser7FirstName+" "+crmUser7LastName};
		String[] connectionTitle= {ATCE_ConnectionTitle1,ATCE_ConnectionTitle4};
		String[] connectionDeal= {ATCE_ConnectionDeal1,ATCE_ConnectionDeal4};
		String[] connectionMeetingaAndCall= {ATCE_ConnectionMeetingAndCall1,ATCE_ConnectionMeetingAndCall4};
		String[] connectionEmail= {ATCE_ConnectionEmail1,ATCE_ConnectionEmail4};
		
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		
		String[] iconType= {ATCE_ATActivityType28};
		String[] date= {ATCE_ATDueDate28};
		String[] subject= {ATCE_ATSubject28};
		String[] notes= {ATCE_ATNote28};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants28)};
		String[][] tag= {ATCE_ATTags28.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType27,ATCE_ATActivityType28,ATCE_ATActivityType29};
		String[] date1= {ATCE_ATDueDate27,ATCE_ATDueDate28,ATCE_ATDueDate29};
		String[] subject1= {ATCE_ATSubject27,ATCE_ATSubject28,ATCE_ATSubject29};
		String[] notes1= {ATCE_ATNote27,ATCE_ATNote28,ATCE_ATNote29};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27),bp.getParticipantData(ATCE_ATParticipants28),bp.getParticipantData(ATCE_ATParticipants29)};
		String[][] tag1= {ATCE_ATTags27.split("<break>"),ATCE_ATTags28.split("<break>"),ATCE_ATTags29.split("<break>")};
		
				
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null, null,true, fundTaggedName, fundTaggedTimeReference);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName2, 20),"Count of "+userName2+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName2,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc114_VerifyFollowupTaskTaskCallFunctionalityOnPortfolioCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord11;
	
		String contactSectionName=ATCE_ConName20;
		String contactSectionTitle=ATCE_ConTitle20;
		String contactSectionDeal=ATCE_ConDeal20;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall20;
		String contactSectionEmail=ATCE_ConEmail20;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName34,ATCE_TaggedFirmsName35,ATCE_TaggedFirmsName36,ATCE_TaggedFirmsName37,ATCE_TaggedFirmsName39,ATCE_TaggedFirmsName40,ATCE_TaggedFirmsName41,ATCE_TaggedFirmsName42,ATCE_TaggedFirmsName43,ATCE_TaggedFirmsName44,ATCE_TaggedFirmsName45,ATCE_TaggedFirmsName46,ATCE_TaggedFirmsName47};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount34,ATCE_TaggedFirmsCount35,ATCE_TaggedFirmsCount36,ATCE_TaggedFirmsCount37,ATCE_TaggedFirmsCount39,ATCE_TaggedFirmsCount40,ATCE_TaggedFirmsCount41,ATCE_TaggedFirmsCount42,ATCE_TaggedFirmsCount43,ATCE_TaggedFirmsCount44,ATCE_TaggedFirmsCount45,ATCE_TaggedFirmsCount46,ATCE_TaggedFirmsCount47};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName25,ATCE_TaggedPeopleName27,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName28,ATCE_TaggedPeopleName29,ATCE_TaggedPeopleName30,ATCE_TaggedPeopleName31};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount25,ATCE_TaggedPeopleCount27,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount28,ATCE_TaggedPeopleCount29,ATCE_TaggedPeopleCount30,ATCE_TaggedPeopleCount31};
				
		String[] dealTaggedName= {ATCE_TaggedDealName4,ATCE_TaggedDealName5};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount4,ATCE_TaggedDealCount5};
		
		
		String[] connectionUserName= {crmUser6FirstName+" "+crmUser6LastName,crmUser7FirstName+" "+crmUser7LastName};
		String[] connectionTitle= {ATCE_ConnectionTitle2,ATCE_ConnectionTitle4};
		String[] connectionDeal= {ATCE_ConnectionDeal2,ATCE_ConnectionDeal4};
		String[] connectionMeetingaAndCall= {ATCE_ConnectionMeetingAndCall2,ATCE_ConnectionMeetingAndCall4};
		String[] connectionEmail= {ATCE_ConnectionEmail2,ATCE_ConnectionEmail4};
		
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		
		String[] iconType= {ATCE_ATActivityType28};
		String[] date= {ATCE_ATDueDate28};
		String[] subject= {ATCE_ATSubject28};
		String[] notes= {ATCE_ATNote28};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants28)};
		String[][] tag= {ATCE_ATTags28.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType27,ATCE_ATActivityType28,ATCE_ATActivityType29};
		String[] date1= {ATCE_ATDueDate27,ATCE_ATDueDate28,ATCE_ATDueDate29};
		String[] subject1= {ATCE_ATSubject27,ATCE_ATSubject28,ATCE_ATSubject29};
		String[] notes1= {ATCE_ATNote27,ATCE_ATNote28,ATCE_ATNote29};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27),bp.getParticipantData(ATCE_ATParticipants28),bp.getParticipantData(ATCE_ATParticipants29)};
		String[][] tag1= {ATCE_ATTags27.split("<break>"),ATCE_ATTags28.split("<break>"),ATCE_ATTags29.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName2, 20),"Count of "+userName2+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName2,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc115_VerifyFollowupTaskTaskCallFunctionalityOnPrivateEquityRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord13;

		String contactSectionName=ATCE_ConName21;
		String contactSectionTitle=ATCE_ConTitle21;
		String contactSectionDeal=ATCE_ConDeal21;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall21;
		String contactSectionEmail=ATCE_ConEmail21;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName34,ATCE_TaggedFirmsName35,ATCE_TaggedFirmsName36,ATCE_TaggedFirmsName37,ATCE_TaggedFirmsName38,ATCE_TaggedFirmsName40,ATCE_TaggedFirmsName41,ATCE_TaggedFirmsName42,ATCE_TaggedFirmsName43,ATCE_TaggedFirmsName44,ATCE_TaggedFirmsName45,ATCE_TaggedFirmsName46,ATCE_TaggedFirmsName47};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount34,ATCE_TaggedFirmsCount35,ATCE_TaggedFirmsCount36,ATCE_TaggedFirmsCount37,ATCE_TaggedFirmsCount38,ATCE_TaggedFirmsCount40,ATCE_TaggedFirmsCount41,ATCE_TaggedFirmsCount42,ATCE_TaggedFirmsCount43,ATCE_TaggedFirmsCount44,ATCE_TaggedFirmsCount45,ATCE_TaggedFirmsCount46,ATCE_TaggedFirmsCount47};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName25,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName28,ATCE_TaggedPeopleName29,ATCE_TaggedPeopleName30,ATCE_TaggedPeopleName31};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount25,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount28,ATCE_TaggedPeopleCount29,ATCE_TaggedPeopleCount30,ATCE_TaggedPeopleCount31};

		String[] dealTaggedName= {ATCE_TaggedDealName4,ATCE_TaggedDealName5};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount4,ATCE_TaggedDealCount5};


		String[] connectionUserName= {crmUser6FirstName+" "+crmUser6LastName,crmUser7FirstName+" "+crmUser7LastName};
		String[] connectionTitle= {ATCE_ConnectionTitle2,ATCE_ConnectionTitle4};
		String[] connectionDeal= {ATCE_ConnectionDeal2,ATCE_ConnectionDeal4};
		String[] connectionMeetingaAndCall= {ATCE_ConnectionMeetingAndCall2,ATCE_ConnectionMeetingAndCall4};
		String[] connectionEmail= {ATCE_ConnectionEmail2,ATCE_ConnectionEmail4};

		String userName2=crmUser7FirstName+" "+crmUser7LastName;

		String[] iconType= {ATCE_ATActivityType28};
		String[] date= {ATCE_ATDueDate28};
		String[] subject= {ATCE_ATSubject28};
		String[] notes= {ATCE_ATNote28};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants28)};
		String[][] tag= {ATCE_ATTags28.split("<break>")};


		String[] iconType1= {ATCE_ATActivityType27,ATCE_ATActivityType28,ATCE_ATActivityType29};
		String[] date1= {ATCE_ATDueDate27,ATCE_ATDueDate28,ATCE_ATDueDate29};
		String[] subject1= {ATCE_ATSubject27,ATCE_ATSubject28,ATCE_ATSubject29};
		String[] notes1= {ATCE_ATNote27,ATCE_ATNote28,ATCE_ATNote29};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27),bp.getParticipantData(ATCE_ATParticipants28),bp.getParticipantData(ATCE_ATParticipants29)};
		String[][] tag1= {ATCE_ATTags27.split("<break>"),ATCE_ATTags28.split("<break>"),ATCE_ATTags29.split("<break>")};		

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);


		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);


					ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
					if(result4.isEmpty())
					{
						log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
						sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
					}

					ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
					if(result5.isEmpty())
					{
						log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
						sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
					}


					if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);

						ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
						if(result6.isEmpty())
						{
							log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
							sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
						}

					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
						sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
					}


					ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
					if(result7.isEmpty())
					{
						log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
						sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
					}

					if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
							action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
						String parentID=switchOnWindow(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName2, 20),"Count of "+userName2+" on contact section" , action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "clicked on count of "+userName2,YesNo.No);
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
						}		
						driver.close();
						driver.switchTo().window(parentID);
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
						sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
					}


					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
						if(result2.isEmpty())
						{
							log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
							sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
						}

					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc116_VerifyTaskCallFunctionalityOnContactRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Con1;
		
		String[] firmsTaggedName= {ATCE_TaggedFirmsName59,ATCE_TaggedFirmsName60,ATCE_TaggedFirmsName61,ATCE_TaggedFirmsName62,ATCE_TaggedFirmsName63,ATCE_TaggedFirmsName64,ATCE_TaggedFirmsName44,ATCE_TaggedFirmsName45,ATCE_TaggedFirmsName46,ATCE_TaggedFirmsName57};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount59,ATCE_TaggedFirmsCount60,ATCE_TaggedFirmsCount61,ATCE_TaggedFirmsCount62,ATCE_TaggedFirmsCount63,ATCE_TaggedFirmsCount64,ATCE_TaggedFirmsCount44,ATCE_TaggedFirmsCount45,ATCE_TaggedFirmsCount46,ATCE_TaggedFirmsCount57};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName25,ATCE_TaggedPeopleName26,ATCE_TaggedPeopleName27,ATCE_TaggedPeopleName22,ATCE_TaggedPeopleName23,ATCE_TaggedPeopleName24,ATCE_TaggedPeopleName32,ATCE_TaggedPeopleName33,ATCE_TaggedPeopleName38};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount25,ATCE_TaggedPeopleCount26,ATCE_TaggedPeopleCount27,ATCE_TaggedPeopleCount22,ATCE_TaggedPeopleCount23,ATCE_TaggedPeopleCount24,ATCE_TaggedPeopleCount32,ATCE_TaggedPeopleCount33,ATCE_TaggedPeopleCount38};

		String[] dealTaggedName= {ATCE_TaggedDealName8,ATCE_TaggedDealName9};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount8,ATCE_TaggedDealCount9};

	
		String connectionUserName=crmUser7FirstName+" "+crmUser7LastName;
		String connectionTitle=ATCE_ConnectionTitle4;
		String connectionDeal=ATCE_ConnectionDeal4;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall4;
		String connectionEmail=ATCE_ConnectionEmail4;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		
		String[] iconType= {ATCE_ATActivityType28};
		String[] date= {ATCE_ATDueDate28};
		String[] subject= {ATCE_ATSubject28};
		String[] notes= {ATCE_ATNote28};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants28)};
		String[][] tag= {ATCE_ATTags28.split("<break>")};

		String[] iconType1= {ATCE_ATActivityType27,ATCE_ATActivityType28,ATCE_ATActivityType29};
		String[] date1= {ATCE_ATDueDate27,ATCE_ATDueDate28,ATCE_ATDueDate29};
		String[] subject1= {ATCE_ATSubject27,ATCE_ATSubject28,ATCE_ATSubject29};
		String[] notes1= {ATCE_ATNote27,ATCE_ATNote28,ATCE_ATNote29};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27),bp.getParticipantData(ATCE_ATParticipants28),bp.getParticipantData(ATCE_ATParticipants29)};
		String[][] tag1= {ATCE_ATTags27.split("<break>"),ATCE_ATTags28.split("<break>"),ATCE_ATTags29.split("<break>")};		

					
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj2)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			
						ArrayList<String> result6=bp.verifyRecordOnConnectionsSectionInAcuity(recordName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						
						if(result6.isEmpty())
						{
							log(LogStatus.INFO, "The records have been verified on Connection section in Acuity user : "+connectionUserName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records are not verified on Connection section in Acuity. user : "+connectionUserName+" "+result6, YesNo.No);
							sa.assertTrue(false,  "The records are not verified on Connection section in Acuity.  user : "+connectionUserName+" "+result6);
						}
						
					
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(userName2, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+userName2+" record on contact section",YesNo.No);
							
							ArrayList<String> result7=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result7.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+userName2, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+userName2+". "+result7, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+userName2+". "+result7);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+userName2+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+userName2+" record on contact section");
						}
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj2, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj2);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc117_VerifyFollowupTaskTaskCallFunctionalityOnDealRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Deal1;
	
	    String[] firmsTaggedName= {ATCE_TaggedFirmsName65,ATCE_TaggedFirmsName66,ATCE_TaggedFirmsName67,ATCE_TaggedFirmsName68,ATCE_TaggedFirmsName69,ATCE_TaggedFirmsName70,ATCE_TaggedFirmsName71,ATCE_TaggedFirmsName41,ATCE_TaggedFirmsName42,ATCE_TaggedFirmsName43,ATCE_TaggedFirmsName72,ATCE_TaggedFirmsName73,ATCE_TaggedFirmsName74};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount65,ATCE_TaggedFirmsCount66,ATCE_TaggedFirmsCount67,ATCE_TaggedFirmsCount68,ATCE_TaggedFirmsCount69,ATCE_TaggedFirmsCount70,ATCE_TaggedFirmsCount71,ATCE_TaggedFirmsCount41,ATCE_TaggedFirmsCount42,ATCE_TaggedFirmsCount43,ATCE_TaggedFirmsCount72,ATCE_TaggedFirmsCount73,ATCE_TaggedFirmsCount74};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName39,ATCE_TaggedPeopleName40,ATCE_TaggedPeopleName41,ATCE_TaggedPeopleName42,ATCE_TaggedPeopleName43,ATCE_TaggedPeopleName44,ATCE_TaggedPeopleName45,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount39,ATCE_TaggedPeopleCount40,ATCE_TaggedPeopleCount41,ATCE_TaggedPeopleCount42,ATCE_TaggedPeopleCount43,ATCE_TaggedPeopleCount44,ATCE_TaggedPeopleCount45,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17};
				
		String[] dealTaggedName= {ATCE_TaggedDealName10};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount10};
		
		
		String[] iconType1= {ATCE_ATActivityType27};
		String[] date1= {ATCE_ATDueDate27};
		String[] subject1= {ATCE_ATSubject27};
		String[] notes1= {ATCE_ATNote27};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27)};
		String[][] tag1= {ATCE_ATTags27.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj4)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	

	@Parameters({ "projectName" })
	@Test
	public void ATCETc118_VerifyFollowupTaskTaskCallFunctionalityOnFundraisingRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fundraising1;
	
	    String[] firmsTaggedName= {ATCE_TaggedFirmsName65,ATCE_TaggedFirmsName66,ATCE_TaggedFirmsName67,ATCE_TaggedFirmsName68,ATCE_TaggedFirmsName69,ATCE_TaggedFirmsName70,ATCE_TaggedFirmsName71,ATCE_TaggedFirmsName41,ATCE_TaggedFirmsName42,ATCE_TaggedFirmsName43,ATCE_TaggedFirmsName72,ATCE_TaggedFirmsName73,ATCE_TaggedFirmsName74};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount65,ATCE_TaggedFirmsCount66,ATCE_TaggedFirmsCount67,ATCE_TaggedFirmsCount68,ATCE_TaggedFirmsCount69,ATCE_TaggedFirmsCount70,ATCE_TaggedFirmsCount71,ATCE_TaggedFirmsCount41,ATCE_TaggedFirmsCount42,ATCE_TaggedFirmsCount43,ATCE_TaggedFirmsCount72,ATCE_TaggedFirmsCount73,ATCE_TaggedFirmsCount74};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName39,ATCE_TaggedPeopleName40,ATCE_TaggedPeopleName41,ATCE_TaggedPeopleName42,ATCE_TaggedPeopleName43,ATCE_TaggedPeopleName44,ATCE_TaggedPeopleName45,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount39,ATCE_TaggedPeopleCount40,ATCE_TaggedPeopleCount41,ATCE_TaggedPeopleCount42,ATCE_TaggedPeopleCount43,ATCE_TaggedPeopleCount44,ATCE_TaggedPeopleCount45,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17};
				
	    String[] iconType1= {ATCE_ATActivityType27};
		String[] date1= {ATCE_ATDueDate27};
		String[] subject1= {ATCE_ATSubject27};
		String[] notes1= {ATCE_ATNote27};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27)};
		String[][] tag1= {ATCE_ATTags27.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

		if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
		
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null, null,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+ TabName.Fundraising.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+ TabName.Fundraising.toString());
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc119_VerifyFollowupTaskTaskCallFunctionalityOnFundRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fund1;
	
	    String[] firmsTaggedName= {ATCE_TaggedFirmsName65,ATCE_TaggedFirmsName66,ATCE_TaggedFirmsName67,ATCE_TaggedFirmsName68,ATCE_TaggedFirmsName69,ATCE_TaggedFirmsName70,ATCE_TaggedFirmsName71,ATCE_TaggedFirmsName41,ATCE_TaggedFirmsName42,ATCE_TaggedFirmsName43,ATCE_TaggedFirmsName72,ATCE_TaggedFirmsName73,ATCE_TaggedFirmsName74};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount65,ATCE_TaggedFirmsCount66,ATCE_TaggedFirmsCount67,ATCE_TaggedFirmsCount68,ATCE_TaggedFirmsCount69,ATCE_TaggedFirmsCount70,ATCE_TaggedFirmsCount71,ATCE_TaggedFirmsCount41,ATCE_TaggedFirmsCount42,ATCE_TaggedFirmsCount43,ATCE_TaggedFirmsCount72,ATCE_TaggedFirmsCount73,ATCE_TaggedFirmsCount74};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName39,ATCE_TaggedPeopleName40,ATCE_TaggedPeopleName41,ATCE_TaggedPeopleName42,ATCE_TaggedPeopleName43,ATCE_TaggedPeopleName44,ATCE_TaggedPeopleName45,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount39,ATCE_TaggedPeopleCount40,ATCE_TaggedPeopleCount41,ATCE_TaggedPeopleCount42,ATCE_TaggedPeopleCount43,ATCE_TaggedPeopleCount44,ATCE_TaggedPeopleCount45,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17};
				
		String[] dealTaggedName= {ATCE_TaggedDealName10};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount10};
		
		
		String[] iconType1= {ATCE_ATActivityType27};
		String[] date1= {ATCE_ATDueDate27};
		String[] subject1= {ATCE_ATSubject27};
		String[] notes1= {ATCE_ATNote27};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27)};
		String[][] tag1= {ATCE_ATTags27.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

		if (lp.clickOnTab(projectName, tabObj3)) {

			log(LogStatus.INFO, "Clicked on Tab : " +tabObj3, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+ tabObj3, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+ tabObj3);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	

	@Parameters({ "projectName" })
	@Test
	public void ATCETc120_VerifyFollowupTaskTaskCallFunctionalityOnThemeRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Theme1;
	
	 
		String[] iconType1= {ATCE_ATActivityType27};
		String[] date1= {ATCE_ATDueDate27};
		String[] subject1= {ATCE_ATSubject27};
		String[] notes1= {ATCE_ATNote27};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27)};
		String[][] tag1= {ATCE_ATTags27.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

		if (lp.clickOnTab(projectName, TabName.Themes.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : "+TabName.Themes.toString(), YesNo.No);

			String parentWindowID=bp.clickOnThemeRecord(recordName);

			if (parentWindowID!=null) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					
			
						
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+TabName.Themes.toString(), YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+TabName.Themes.toString());
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}

		
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc121_EditAndInactiveUser(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		SetupPageBusinessLayer setup = new SetupPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
	
		String parentWindow = null;
		String userfirstName = ATCE_userFirstName1;
		String UserLastName = ATCE_userLastName1;

		String emailId = crmUser7EmailID;
		boolean flag=true;

		lp.CRMLogin(superAdminUserName, adminPassword, appName);
		
		if (home.clickOnSetUpLink()) {
			flag = true;
			parentWindow = switchOnWindow(driver);
			if (parentWindow == null) {
				sa.assertTrue(false,
						"No new window is open after click on setup link in lighting mode so cannot create CRM User1");
				log(LogStatus.SKIP,
						"No new window is open after click on setup link in lighting mode so cannot create CRM User1",
						YesNo.Yes);
				exit("No new window is open after click on setup link in lighting mode so cannot create CRM User1");
			}
			if (setup.editPEUser( userfirstName, UserLastName, emailId)) {
				log(LogStatus.INFO, "CRM User has been updated Successfully and inactive: " + userfirstName + " " + UserLastName, YesNo.No);
				ExcelUtils.writeData(testCasesFilePath, userfirstName, "Users", excelLabel.Variable_Name, "User7",
						excelLabel.User_First_Name);
				ExcelUtils.writeData(testCasesFilePath, UserLastName, "Users", excelLabel.Variable_Name, "User7",
						excelLabel.User_Last_Name);
				flag = true;

			}
			else
			{
				log(LogStatus.ERROR, "CRM User is not updated and inactive" + userfirstName + " " + UserLastName, YesNo.No);
				sa.assertTrue(false,   "CRM User is not updated and inactive " + userfirstName + " " + UserLastName);
			}
			driver.close();
			driver.switchTo().window(parentWindow);
			lp.CRMlogout();	
		}
	}
	

	@Parameters({ "projectName" })
	@Test
	public void ATCETc122_VerifyInactiveUserFunctionalityOnCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord1;
	
		String contactSectionName=ATCE_ConName15;
		String contactSectionTitle=ATCE_ConTitle15;
		String contactSectionDeal=ATCE_ConDeal15;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall15;
		String contactSectionEmail=ATCE_ConEmail15;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName34,ATCE_TaggedFirmsName35,ATCE_TaggedFirmsName36,ATCE_TaggedFirmsName37,ATCE_TaggedFirmsName38,ATCE_TaggedFirmsName39,ATCE_TaggedFirmsName40,ATCE_TaggedFirmsName41,ATCE_TaggedFirmsName42,ATCE_TaggedFirmsName43,ATCE_TaggedFirmsName44,ATCE_TaggedFirmsName45,ATCE_TaggedFirmsName46};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount34,ATCE_TaggedFirmsCount35,ATCE_TaggedFirmsCount36,ATCE_TaggedFirmsCount37,ATCE_TaggedFirmsCount38,ATCE_TaggedFirmsCount39,ATCE_TaggedFirmsCount40,ATCE_TaggedFirmsCount41,ATCE_TaggedFirmsCount42,ATCE_TaggedFirmsCount43,ATCE_TaggedFirmsCount44,ATCE_TaggedFirmsCount45,ATCE_TaggedFirmsCount46};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName25,ATCE_TaggedPeopleName26,ATCE_TaggedPeopleName27,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName28,ATCE_TaggedPeopleName29,ATCE_TaggedPeopleName30};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount25,ATCE_TaggedPeopleCount26,ATCE_TaggedPeopleCount27,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount28,ATCE_TaggedPeopleCount29,ATCE_TaggedPeopleCount30};
				
		String[] dealTaggedName= {ATCE_TaggedDealName4,ATCE_TaggedDealName5};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount4,ATCE_TaggedDealCount5};
		
		
		String[] connectionUserName= {crmUser6FirstName+" "+crmUser6LastName,crmUser7FirstName+" "+crmUser7LastName};
		String[] connectionTitle= {ATCE_ConnectionTitle2,ATCE_ConnectionTitle4};
		String[] connectionDeal= {ATCE_ConnectionDeal2,ATCE_ConnectionDeal4};
		String[] connectionMeetingaAndCall= {ATCE_ConnectionMeetingAndCall2,ATCE_ConnectionMeetingAndCall4};
		String[] connectionEmail= {ATCE_ConnectionEmail2,ATCE_ConnectionEmail4};
		
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		
		String[] iconType= {ATCE_ATActivityType28};
		String[] date= {ATCE_ATDueDate28};
		String[] subject= {ATCE_ATSubject28};
		String[] notes= {ATCE_ATNote28};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants28)};
		String[][] tag= {ATCE_ATTags28.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType27,ATCE_ATActivityType28,ATCE_ATActivityType29};
		String[] date1= {ATCE_ATDueDate27,ATCE_ATDueDate28,ATCE_ATDueDate29};
		String[] subject1= {ATCE_ATSubject27,ATCE_ATSubject28,ATCE_ATSubject29};
		String[] notes1= {ATCE_ATNote27,ATCE_ATNote28,ATCE_ATNote29};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27),bp.getParticipantData(ATCE_ATParticipants28),bp.getParticipantData(ATCE_ATParticipants29)};
		String[][] tag1= {ATCE_ATTags27.split("<break>"),ATCE_ATTags28.split("<break>"),ATCE_ATTags29.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.CompaniesTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName2, 20),"Count of "+userName2+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName2,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc123_VerifyInactiveUserFunctionalityOnAdvisorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord5;
	
		String contactSectionName=ATCE_ConName16;
		String contactSectionTitle=ATCE_ConTitle16;
		String contactSectionDeal=ATCE_ConDeal16;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall16;
		String contactSectionEmail=ATCE_ConEmail16;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName34,ATCE_TaggedFirmsName36,ATCE_TaggedFirmsName37,ATCE_TaggedFirmsName38,ATCE_TaggedFirmsName39,ATCE_TaggedFirmsName40,ATCE_TaggedFirmsName41,ATCE_TaggedFirmsName42,ATCE_TaggedFirmsName43,ATCE_TaggedFirmsName44,ATCE_TaggedFirmsName45,ATCE_TaggedFirmsName46,ATCE_TaggedFirmsName47};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount34,ATCE_TaggedFirmsCount36,ATCE_TaggedFirmsCount37,ATCE_TaggedFirmsCount38,ATCE_TaggedFirmsCount39,ATCE_TaggedFirmsCount40,ATCE_TaggedFirmsCount41,ATCE_TaggedFirmsCount42,ATCE_TaggedFirmsCount43,ATCE_TaggedFirmsCount44,ATCE_TaggedFirmsCount45,ATCE_TaggedFirmsCount46,ATCE_TaggedFirmsCount47};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName26,ATCE_TaggedPeopleName27,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName28,ATCE_TaggedPeopleName29,ATCE_TaggedPeopleName30,ATCE_TaggedPeopleName31};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount26,ATCE_TaggedPeopleCount27,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount28,ATCE_TaggedPeopleCount29,ATCE_TaggedPeopleCount30,ATCE_TaggedPeopleCount31};
				
		String[] dealTaggedName= {ATCE_TaggedDealName4,ATCE_TaggedDealName5};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount4,ATCE_TaggedDealCount5};
		
		
		String[] connectionUserName= {crmUser6FirstName+" "+crmUser6LastName,crmUser7FirstName+" "+crmUser7LastName};
		String[] connectionTitle= {ATCE_ConnectionTitle2,ATCE_ConnectionTitle4};
		String[] connectionDeal= {ATCE_ConnectionDeal2,ATCE_ConnectionDeal4};
		String[] connectionMeetingaAndCall= {ATCE_ConnectionMeetingAndCall2,ATCE_ConnectionMeetingAndCall4};
		String[] connectionEmail= {ATCE_ConnectionEmail2,ATCE_ConnectionEmail4};
		
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		
		String[] iconType= {ATCE_ATActivityType28};
		String[] date= {ATCE_ATDueDate28};
		String[] subject= {ATCE_ATSubject28};
		String[] notes= {ATCE_ATNote28};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants28)};
		String[][] tag= {ATCE_ATTags28.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType27,ATCE_ATActivityType28,ATCE_ATActivityType29};
		String[] date1= {ATCE_ATDueDate27,ATCE_ATDueDate28,ATCE_ATDueDate29};
		String[] subject1= {ATCE_ATSubject27,ATCE_ATSubject28,ATCE_ATSubject29};
		String[] notes1= {ATCE_ATNote27,ATCE_ATNote28,ATCE_ATNote29};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27),bp.getParticipantData(ATCE_ATParticipants28),bp.getParticipantData(ATCE_ATParticipants29)};
		String[][] tag1= {ATCE_ATTags27.split("<break>"),ATCE_ATTags28.split("<break>"),ATCE_ATTags29.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName2, 20),"Count of "+userName2+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName2,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc124_VerifyInactiveUserFunctionalityOnLenderRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord8;
	
		String contactSectionName=ATCE_ConName17;
		String contactSectionTitle=ATCE_ConTitle17;
		String contactSectionDeal=ATCE_ConDeal17;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall17;
		String contactSectionEmail=ATCE_ConEmail17;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName48,ATCE_TaggedFirmsName49,ATCE_TaggedFirmsName50,ATCE_TaggedFirmsName51,ATCE_TaggedFirmsName52,ATCE_TaggedFirmsName53,ATCE_TaggedFirmsName54,ATCE_TaggedFirmsName55,ATCE_TaggedFirmsName56,ATCE_TaggedFirmsName57};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount48,ATCE_TaggedFirmsCount49,ATCE_TaggedFirmsCount50,ATCE_TaggedFirmsCount51,ATCE_TaggedFirmsCount52,ATCE_TaggedFirmsCount53,ATCE_TaggedFirmsCount54,ATCE_TaggedFirmsCount55,ATCE_TaggedFirmsCount56,ATCE_TaggedFirmsCount57};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName32,ATCE_TaggedPeopleName33,ATCE_TaggedPeopleName34,ATCE_TaggedPeopleName35,ATCE_TaggedPeopleName36,ATCE_TaggedPeopleName37};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount32,ATCE_TaggedPeopleCount33,ATCE_TaggedPeopleCount34,ATCE_TaggedPeopleCount35,ATCE_TaggedPeopleCount36,ATCE_TaggedPeopleCount37};
				
		String[] dealTaggedName= {ATCE_TaggedDealName6,ATCE_TaggedDealName7};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount6,ATCE_TaggedDealCount7};
		
		
		String[] connectionUserName= {crmUser6FirstName+" "+crmUser6LastName,crmUser7FirstName+" "+crmUser7LastName};
		String[] connectionTitle= {ATCE_ConnectionTitle1,ATCE_ConnectionTitle4};
		String[] connectionDeal= {ATCE_ConnectionDeal1,ATCE_ConnectionDeal4};
		String[] connectionMeetingaAndCall= {ATCE_ConnectionMeetingAndCall1,ATCE_ConnectionMeetingAndCall4};
		String[] connectionEmail= {ATCE_ConnectionEmail1,ATCE_ConnectionEmail4};
		
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		
		String[] iconType= {ATCE_ATActivityType28};
		String[] date= {ATCE_ATDueDate28};
		String[] subject= {ATCE_ATSubject28};
		String[] notes= {ATCE_ATNote28};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants28)};
		String[][] tag= {ATCE_ATTags28.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType27,ATCE_ATActivityType28,ATCE_ATActivityType29};
		String[] date1= {ATCE_ATDueDate27,ATCE_ATDueDate28,ATCE_ATDueDate29};
		String[] subject1= {ATCE_ATSubject27,ATCE_ATSubject28,ATCE_ATSubject29};
		String[] notes1= {ATCE_ATNote27,ATCE_ATNote28,ATCE_ATNote29};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27),bp.getParticipantData(ATCE_ATParticipants28),bp.getParticipantData(ATCE_ATParticipants29)};
		String[][] tag1= {ATCE_ATTags27.split("<break>"),ATCE_ATTags28.split("<break>"),ATCE_ATTags29.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName2, 20),"Count of "+userName2+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName2,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc125_VerifyInactiveUserFunctionalityOnIntermediaryRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord10;
	
		String contactSectionName=ATCE_ConName18;
		String contactSectionTitle=ATCE_ConTitle18;
		String contactSectionDeal=ATCE_ConDeal18;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall18;
		String contactSectionEmail=ATCE_ConEmail18;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName48,ATCE_TaggedFirmsName49,ATCE_TaggedFirmsName50,ATCE_TaggedFirmsName51,ATCE_TaggedFirmsName52,ATCE_TaggedFirmsName53,ATCE_TaggedFirmsName55,ATCE_TaggedFirmsName56,ATCE_TaggedFirmsName57,ATCE_TaggedFirmsName58};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount48,ATCE_TaggedFirmsCount49,ATCE_TaggedFirmsCount50,ATCE_TaggedFirmsCount51,ATCE_TaggedFirmsCount52,ATCE_TaggedFirmsCount53,ATCE_TaggedFirmsCount55,ATCE_TaggedFirmsCount56,ATCE_TaggedFirmsCount57,ATCE_TaggedFirmsCount58};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName32,ATCE_TaggedPeopleName34,ATCE_TaggedPeopleName35,ATCE_TaggedPeopleName36,ATCE_TaggedPeopleName37,ATCE_TaggedPeopleName38};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount32,ATCE_TaggedPeopleCount34,ATCE_TaggedPeopleCount35,ATCE_TaggedPeopleCount36,ATCE_TaggedPeopleCount37,ATCE_TaggedPeopleCount38};
				
		String[] dealTaggedName= {ATCE_TaggedDealName6,ATCE_TaggedDealName7};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount6,ATCE_TaggedDealCount7};
		
		
		String[] connectionUserName= {crmUser6FirstName+" "+crmUser6LastName,crmUser7FirstName+" "+crmUser7LastName};
		String[] connectionTitle= {ATCE_ConnectionTitle1,ATCE_ConnectionTitle4};
		String[] connectionDeal= {ATCE_ConnectionDeal1,ATCE_ConnectionDeal4};
		String[] connectionMeetingaAndCall= {ATCE_ConnectionMeetingAndCall1,ATCE_ConnectionMeetingAndCall4};
		String[] connectionEmail= {ATCE_ConnectionEmail1,ATCE_ConnectionEmail4};
		
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		
		String[] iconType= {ATCE_ATActivityType28};
		String[] date= {ATCE_ATDueDate28};
		String[] subject= {ATCE_ATSubject28};
		String[] notes= {ATCE_ATNote28};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants28)};
		String[][] tag= {ATCE_ATTags28.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType27,ATCE_ATActivityType28,ATCE_ATActivityType29};
		String[] date1= {ATCE_ATDueDate27,ATCE_ATDueDate28,ATCE_ATDueDate29};
		String[] subject1= {ATCE_ATSubject27,ATCE_ATSubject28,ATCE_ATSubject29};
		String[] notes1= {ATCE_ATNote27,ATCE_ATNote28,ATCE_ATNote29};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27),bp.getParticipantData(ATCE_ATParticipants28),bp.getParticipantData(ATCE_ATParticipants29)};
		String[][] tag1= {ATCE_ATTags27.split("<break>"),ATCE_ATTags28.split("<break>"),ATCE_ATTags29.split("<break>")};
		
				
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName2, 20),"Count of "+userName2+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName2,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc126_VerifyInactiveUserFunctionalityOnInstitutionRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord4;
	
		String contactSectionName=ATCE_ConName19;
		String contactSectionTitle=ATCE_ConTitle19;
		String contactSectionDeal=ATCE_ConDeal19;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall19;
		String contactSectionEmail=ATCE_ConEmail19;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName48,ATCE_TaggedFirmsName49,ATCE_TaggedFirmsName51,ATCE_TaggedFirmsName52,ATCE_TaggedFirmsName53,ATCE_TaggedFirmsName54,ATCE_TaggedFirmsName55,ATCE_TaggedFirmsName56,ATCE_TaggedFirmsName57,ATCE_TaggedFirmsName58};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount48,ATCE_TaggedFirmsCount49,ATCE_TaggedFirmsCount51,ATCE_TaggedFirmsCount52,ATCE_TaggedFirmsCount53,ATCE_TaggedFirmsCount54,ATCE_TaggedFirmsCount55,ATCE_TaggedFirmsCount56,ATCE_TaggedFirmsCount57,ATCE_TaggedFirmsCount58};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName33,ATCE_TaggedPeopleName34,ATCE_TaggedPeopleName35,ATCE_TaggedPeopleName36,ATCE_TaggedPeopleName37,ATCE_TaggedPeopleName38};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount33,ATCE_TaggedPeopleCount34,ATCE_TaggedPeopleCount35,ATCE_TaggedPeopleCount36,ATCE_TaggedPeopleCount37,ATCE_TaggedPeopleCount38};
				
		String[] fundTaggedName= {ATCE_TaggedFundName3,ATCE_TaggedFundName4};
		String[] fundTaggedTimeReference= {ATCE_TaggedFundCount3,ATCE_TaggedFundCount4};
		
		
		String[] connectionUserName= {crmUser6FirstName+" "+crmUser6LastName,crmUser7FirstName+" "+crmUser7LastName};
		String[] connectionTitle= {ATCE_ConnectionTitle1,ATCE_ConnectionTitle4};
		String[] connectionDeal= {ATCE_ConnectionDeal1,ATCE_ConnectionDeal4};
		String[] connectionMeetingaAndCall= {ATCE_ConnectionMeetingAndCall1,ATCE_ConnectionMeetingAndCall4};
		String[] connectionEmail= {ATCE_ConnectionEmail1,ATCE_ConnectionEmail4};
		
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		
		String[] iconType= {ATCE_ATActivityType28};
		String[] date= {ATCE_ATDueDate28};
		String[] subject= {ATCE_ATSubject28};
		String[] notes= {ATCE_ATNote28};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants28)};
		String[][] tag= {ATCE_ATTags28.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType27,ATCE_ATActivityType28,ATCE_ATActivityType29};
		String[] date1= {ATCE_ATDueDate27,ATCE_ATDueDate28,ATCE_ATDueDate29};
		String[] subject1= {ATCE_ATSubject27,ATCE_ATSubject28,ATCE_ATSubject29};
		String[] notes1= {ATCE_ATNote27,ATCE_ATNote28,ATCE_ATNote29};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27),bp.getParticipantData(ATCE_ATParticipants28),bp.getParticipantData(ATCE_ATParticipants29)};
		String[][] tag1= {ATCE_ATTags27.split("<break>"),ATCE_ATTags28.split("<break>"),ATCE_ATTags29.split("<break>")};
		
				
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null, null,true, fundTaggedName, fundTaggedTimeReference);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName2, 20),"Count of "+userName2+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName2,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc127_VerifyInactiveUserFunctionalityOnPortfolioCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord11;
	
		String contactSectionName=ATCE_ConName20;
		String contactSectionTitle=ATCE_ConTitle20;
		String contactSectionDeal=ATCE_ConDeal20;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall20;
		String contactSectionEmail=ATCE_ConEmail20;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName34,ATCE_TaggedFirmsName35,ATCE_TaggedFirmsName36,ATCE_TaggedFirmsName37,ATCE_TaggedFirmsName39,ATCE_TaggedFirmsName40,ATCE_TaggedFirmsName41,ATCE_TaggedFirmsName42,ATCE_TaggedFirmsName43,ATCE_TaggedFirmsName44,ATCE_TaggedFirmsName45,ATCE_TaggedFirmsName46,ATCE_TaggedFirmsName47};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount34,ATCE_TaggedFirmsCount35,ATCE_TaggedFirmsCount36,ATCE_TaggedFirmsCount37,ATCE_TaggedFirmsCount39,ATCE_TaggedFirmsCount40,ATCE_TaggedFirmsCount41,ATCE_TaggedFirmsCount42,ATCE_TaggedFirmsCount43,ATCE_TaggedFirmsCount44,ATCE_TaggedFirmsCount45,ATCE_TaggedFirmsCount46,ATCE_TaggedFirmsCount47};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName25,ATCE_TaggedPeopleName27,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17,ATCE_TaggedPeopleName28,ATCE_TaggedPeopleName29,ATCE_TaggedPeopleName30,ATCE_TaggedPeopleName31};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount25,ATCE_TaggedPeopleCount27,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17,ATCE_TaggedPeopleCount28,ATCE_TaggedPeopleCount29,ATCE_TaggedPeopleCount30,ATCE_TaggedPeopleCount31};
				
		String[] dealTaggedName= {ATCE_TaggedDealName4,ATCE_TaggedDealName5};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount4,ATCE_TaggedDealCount5};
		
		
		String[] connectionUserName= {crmUser6FirstName+" "+crmUser6LastName,crmUser7FirstName+" "+crmUser7LastName};
		String[] connectionTitle= {ATCE_ConnectionTitle2,ATCE_ConnectionTitle4};
		String[] connectionDeal= {ATCE_ConnectionDeal2,ATCE_ConnectionDeal4};
		String[] connectionMeetingaAndCall= {ATCE_ConnectionMeetingAndCall2,ATCE_ConnectionMeetingAndCall4};
		String[] connectionEmail= {ATCE_ConnectionEmail2,ATCE_ConnectionEmail4};
		
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		
		String[] iconType= {ATCE_ATActivityType28};
		String[] date= {ATCE_ATDueDate28};
		String[] subject= {ATCE_ATSubject28};
		String[] notes= {ATCE_ATNote28};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants28)};
		String[][] tag= {ATCE_ATTags28.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType27,ATCE_ATActivityType28,ATCE_ATActivityType29};
		String[] date1= {ATCE_ATDueDate27,ATCE_ATDueDate28,ATCE_ATDueDate29};
		String[] subject1= {ATCE_ATSubject27,ATCE_ATSubject28,ATCE_ATSubject29};
		String[] notes1= {ATCE_ATNote27,ATCE_ATNote28,ATCE_ATNote29};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27),bp.getParticipantData(ATCE_ATParticipants28),bp.getParticipantData(ATCE_ATParticipants29)};
		String[][] tag1= {ATCE_ATTags27.split("<break>"),ATCE_ATTags28.split("<break>"),ATCE_ATTags29.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName2, 20),"Count of "+userName2+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName2,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc128_VerifyInactiveUserFunctionalityOnPrivateEquityRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord13;

		String contactSectionName=ATCE_ConName21;
		String contactSectionTitle=ATCE_ConTitle21;
		String contactSectionDeal=ATCE_ConDeal21;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall21;
		String contactSectionEmail=ATCE_ConEmail21;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName34,ATCE_TaggedFirmsName35,ATCE_TaggedFirmsName36,ATCE_TaggedFirmsName37,ATCE_TaggedFirmsName38,ATCE_TaggedFirmsName40,ATCE_TaggedFirmsName41,ATCE_TaggedFirmsName42,ATCE_TaggedFirmsName43,ATCE_TaggedFirmsName44,ATCE_TaggedFirmsName45,ATCE_TaggedFirmsName46,ATCE_TaggedFirmsName47};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount34,ATCE_TaggedFirmsCount35,ATCE_TaggedFirmsCount36,ATCE_TaggedFirmsCount37,ATCE_TaggedFirmsCount38,ATCE_TaggedFirmsCount40,ATCE_TaggedFirmsCount41,ATCE_TaggedFirmsCount42,ATCE_TaggedFirmsCount43,ATCE_TaggedFirmsCount44,ATCE_TaggedFirmsCount45,ATCE_TaggedFirmsCount46,ATCE_TaggedFirmsCount47};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName25,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName28,ATCE_TaggedPeopleName29,ATCE_TaggedPeopleName30,ATCE_TaggedPeopleName31};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount25,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount28,ATCE_TaggedPeopleCount29,ATCE_TaggedPeopleCount30,ATCE_TaggedPeopleCount31};

		String[] dealTaggedName= {ATCE_TaggedDealName4,ATCE_TaggedDealName5};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount4,ATCE_TaggedDealCount5};


		String[] connectionUserName= {crmUser6FirstName+" "+crmUser6LastName,crmUser7FirstName+" "+crmUser7LastName};
		String[] connectionTitle= {ATCE_ConnectionTitle2,ATCE_ConnectionTitle4};
		String[] connectionDeal= {ATCE_ConnectionDeal2,ATCE_ConnectionDeal4};
		String[] connectionMeetingaAndCall= {ATCE_ConnectionMeetingAndCall2,ATCE_ConnectionMeetingAndCall4};
		String[] connectionEmail= {ATCE_ConnectionEmail2,ATCE_ConnectionEmail4};

		String userName2=crmUser7FirstName+" "+crmUser7LastName;

		String[] iconType= {ATCE_ATActivityType28};
		String[] date= {ATCE_ATDueDate28};
		String[] subject= {ATCE_ATSubject28};
		String[] notes= {ATCE_ATNote28};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants28)};
		String[][] tag= {ATCE_ATTags28.split("<break>")};


		String[] iconType1= {ATCE_ATActivityType27,ATCE_ATActivityType28,ATCE_ATActivityType29};
		String[] date1= {ATCE_ATDueDate27,ATCE_ATDueDate28,ATCE_ATDueDate29};
		String[] subject1= {ATCE_ATSubject27,ATCE_ATSubject28,ATCE_ATSubject29};
		String[] notes1= {ATCE_ATNote27,ATCE_ATNote28,ATCE_ATNote29};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27),bp.getParticipantData(ATCE_ATParticipants28),bp.getParticipantData(ATCE_ATParticipants29)};
		String[][] tag1= {ATCE_ATTags27.split("<break>"),ATCE_ATTags28.split("<break>"),ATCE_ATTags29.split("<break>")};		

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);


		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);


					ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
					if(result4.isEmpty())
					{
						log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
						sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
					}

					ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
					if(result5.isEmpty())
					{
						log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
						sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
					}


					if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);

						ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
						if(result6.isEmpty())
						{
							log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
							sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
						}

					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
						sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
					}


					ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
					if(result7.isEmpty())
					{
						log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
						sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
					}

					if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
							action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
						String parentID=switchOnWindow(driver);
						if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName2, 20),"Count of "+userName2+" on contact section" , action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "clicked on count of "+userName2,YesNo.No);
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
						}		
						driver.close();
						driver.switchTo().window(parentID);
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
						sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
					}


					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
						if(result2.isEmpty())
						{
							log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
							sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
						}

					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc129_VerifyInactiveUserOnContactRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Con1;
		
		String[] firmsTaggedName= {ATCE_TaggedFirmsName59,ATCE_TaggedFirmsName60,ATCE_TaggedFirmsName61,ATCE_TaggedFirmsName62,ATCE_TaggedFirmsName63,ATCE_TaggedFirmsName64,ATCE_TaggedFirmsName44,ATCE_TaggedFirmsName45,ATCE_TaggedFirmsName46,ATCE_TaggedFirmsName57};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount59,ATCE_TaggedFirmsCount60,ATCE_TaggedFirmsCount61,ATCE_TaggedFirmsCount62,ATCE_TaggedFirmsCount63,ATCE_TaggedFirmsCount64,ATCE_TaggedFirmsCount44,ATCE_TaggedFirmsCount45,ATCE_TaggedFirmsCount46,ATCE_TaggedFirmsCount57};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName25,ATCE_TaggedPeopleName26,ATCE_TaggedPeopleName27,ATCE_TaggedPeopleName22,ATCE_TaggedPeopleName23,ATCE_TaggedPeopleName24,ATCE_TaggedPeopleName32,ATCE_TaggedPeopleName33,ATCE_TaggedPeopleName38};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount25,ATCE_TaggedPeopleCount26,ATCE_TaggedPeopleCount27,ATCE_TaggedPeopleCount22,ATCE_TaggedPeopleCount23,ATCE_TaggedPeopleCount24,ATCE_TaggedPeopleCount32,ATCE_TaggedPeopleCount33,ATCE_TaggedPeopleCount38};

		String[] dealTaggedName= {ATCE_TaggedDealName8,ATCE_TaggedDealName9};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount8,ATCE_TaggedDealCount9};

	
		String connectionUserName=crmUser7FirstName+" "+crmUser7LastName;
		String connectionTitle=ATCE_ConnectionTitle4;
		String connectionDeal=ATCE_ConnectionDeal4;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall4;
		String connectionEmail=ATCE_ConnectionEmail4;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		String userName2=crmUser7FirstName+" "+crmUser7LastName;
		
		String[] iconType= {ATCE_ATActivityType28};
		String[] date= {ATCE_ATDueDate28};
		String[] subject= {ATCE_ATSubject28};
		String[] notes= {ATCE_ATNote28};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants28)};
		String[][] tag= {ATCE_ATTags28.split("<break>")};

		String[] iconType1= {ATCE_ATActivityType27,ATCE_ATActivityType28,ATCE_ATActivityType29};
		String[] date1= {ATCE_ATDueDate27,ATCE_ATDueDate28,ATCE_ATDueDate29};
		String[] subject1= {ATCE_ATSubject27,ATCE_ATSubject28,ATCE_ATSubject29};
		String[] notes1= {ATCE_ATNote27,ATCE_ATNote28,ATCE_ATNote29};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27),bp.getParticipantData(ATCE_ATParticipants28),bp.getParticipantData(ATCE_ATParticipants29)};
		String[][] tag1= {ATCE_ATTags27.split("<break>"),ATCE_ATTags28.split("<break>"),ATCE_ATTags29.split("<break>")};		

					
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj2)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			
						ArrayList<String> result6=bp.verifyRecordOnConnectionsSectionInAcuity(recordName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						
						if(result6.isEmpty())
						{
							log(LogStatus.INFO, "The records have been verified on Connection section in Acuity user : "+connectionUserName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records are not verified on Connection section in Acuity. user : "+connectionUserName+" "+result6, YesNo.No);
							sa.assertTrue(false,  "The records are not verified on Connection section in Acuity.  user : "+connectionUserName+" "+result6);
						}
						
					
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(userName2, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+userName2+" record on contact section",YesNo.No);
							
							ArrayList<String> result7=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result7.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+userName2, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+userName2+". "+result7, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+userName2+". "+result7);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+userName2+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+userName2+" record on contact section");
						}
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj2, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj2);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc130_VerifyInactiveUserFunctionalityOnDealRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Deal1;
	
	    String[] firmsTaggedName= {ATCE_TaggedFirmsName65,ATCE_TaggedFirmsName66,ATCE_TaggedFirmsName67,ATCE_TaggedFirmsName68,ATCE_TaggedFirmsName69,ATCE_TaggedFirmsName70,ATCE_TaggedFirmsName71,ATCE_TaggedFirmsName41,ATCE_TaggedFirmsName42,ATCE_TaggedFirmsName43,ATCE_TaggedFirmsName72,ATCE_TaggedFirmsName73,ATCE_TaggedFirmsName74};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount65,ATCE_TaggedFirmsCount66,ATCE_TaggedFirmsCount67,ATCE_TaggedFirmsCount68,ATCE_TaggedFirmsCount69,ATCE_TaggedFirmsCount70,ATCE_TaggedFirmsCount71,ATCE_TaggedFirmsCount41,ATCE_TaggedFirmsCount42,ATCE_TaggedFirmsCount43,ATCE_TaggedFirmsCount72,ATCE_TaggedFirmsCount73,ATCE_TaggedFirmsCount74};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName39,ATCE_TaggedPeopleName40,ATCE_TaggedPeopleName41,ATCE_TaggedPeopleName42,ATCE_TaggedPeopleName43,ATCE_TaggedPeopleName44,ATCE_TaggedPeopleName45,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount39,ATCE_TaggedPeopleCount40,ATCE_TaggedPeopleCount41,ATCE_TaggedPeopleCount42,ATCE_TaggedPeopleCount43,ATCE_TaggedPeopleCount44,ATCE_TaggedPeopleCount45,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17};
				
		String[] dealTaggedName= {ATCE_TaggedDealName10};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount10};
		
		
		String[] iconType1= {ATCE_ATActivityType27};
		String[] date1= {ATCE_ATDueDate27};
		String[] subject1= {ATCE_ATSubject27};
		String[] notes1= {ATCE_ATNote27};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27)};
		String[][] tag1= {ATCE_ATTags27.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj4)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc131_VerifyInactiveUserFunctionalityOnFundraisingRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fundraising1;
	
	    String[] firmsTaggedName= {ATCE_TaggedFirmsName65,ATCE_TaggedFirmsName66,ATCE_TaggedFirmsName67,ATCE_TaggedFirmsName68,ATCE_TaggedFirmsName69,ATCE_TaggedFirmsName70,ATCE_TaggedFirmsName71,ATCE_TaggedFirmsName41,ATCE_TaggedFirmsName42,ATCE_TaggedFirmsName43,ATCE_TaggedFirmsName72,ATCE_TaggedFirmsName73,ATCE_TaggedFirmsName74};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount65,ATCE_TaggedFirmsCount66,ATCE_TaggedFirmsCount67,ATCE_TaggedFirmsCount68,ATCE_TaggedFirmsCount69,ATCE_TaggedFirmsCount70,ATCE_TaggedFirmsCount71,ATCE_TaggedFirmsCount41,ATCE_TaggedFirmsCount42,ATCE_TaggedFirmsCount43,ATCE_TaggedFirmsCount72,ATCE_TaggedFirmsCount73,ATCE_TaggedFirmsCount74};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName39,ATCE_TaggedPeopleName40,ATCE_TaggedPeopleName41,ATCE_TaggedPeopleName42,ATCE_TaggedPeopleName43,ATCE_TaggedPeopleName44,ATCE_TaggedPeopleName45,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount39,ATCE_TaggedPeopleCount40,ATCE_TaggedPeopleCount41,ATCE_TaggedPeopleCount42,ATCE_TaggedPeopleCount43,ATCE_TaggedPeopleCount44,ATCE_TaggedPeopleCount45,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17};
				
	    String[] iconType1= {ATCE_ATActivityType27};
		String[] date1= {ATCE_ATDueDate27};
		String[] subject1= {ATCE_ATSubject27};
		String[] notes1= {ATCE_ATNote27};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27)};
		String[][] tag1= {ATCE_ATTags27.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

		if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
		
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null, null,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+ TabName.Fundraising.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+ TabName.Fundraising.toString());
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc132_VerifyInactiveUserFunctionalityOnFundRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fund1;
	
	    String[] firmsTaggedName= {ATCE_TaggedFirmsName65,ATCE_TaggedFirmsName66,ATCE_TaggedFirmsName67,ATCE_TaggedFirmsName68,ATCE_TaggedFirmsName69,ATCE_TaggedFirmsName70,ATCE_TaggedFirmsName71,ATCE_TaggedFirmsName41,ATCE_TaggedFirmsName42,ATCE_TaggedFirmsName43,ATCE_TaggedFirmsName72,ATCE_TaggedFirmsName73,ATCE_TaggedFirmsName74};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount65,ATCE_TaggedFirmsCount66,ATCE_TaggedFirmsCount67,ATCE_TaggedFirmsCount68,ATCE_TaggedFirmsCount69,ATCE_TaggedFirmsCount70,ATCE_TaggedFirmsCount71,ATCE_TaggedFirmsCount41,ATCE_TaggedFirmsCount42,ATCE_TaggedFirmsCount43,ATCE_TaggedFirmsCount72,ATCE_TaggedFirmsCount73,ATCE_TaggedFirmsCount74};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName8,ATCE_TaggedPeopleName9,ATCE_TaggedPeopleName10,ATCE_TaggedPeopleName39,ATCE_TaggedPeopleName40,ATCE_TaggedPeopleName41,ATCE_TaggedPeopleName42,ATCE_TaggedPeopleName43,ATCE_TaggedPeopleName44,ATCE_TaggedPeopleName45,ATCE_TaggedPeopleName14,ATCE_TaggedPeopleName15,ATCE_TaggedPeopleName16,ATCE_TaggedPeopleName17};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount8,ATCE_TaggedPeopleCount9,ATCE_TaggedPeopleCount10,ATCE_TaggedPeopleCount39,ATCE_TaggedPeopleCount40,ATCE_TaggedPeopleCount41,ATCE_TaggedPeopleCount42,ATCE_TaggedPeopleCount43,ATCE_TaggedPeopleCount44,ATCE_TaggedPeopleCount45,ATCE_TaggedPeopleCount14,ATCE_TaggedPeopleCount15,ATCE_TaggedPeopleCount16,ATCE_TaggedPeopleCount17};
				
		String[] dealTaggedName= {ATCE_TaggedDealName10};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount10};
		
		
		String[] iconType1= {ATCE_ATActivityType27};
		String[] date1= {ATCE_ATDueDate27};
		String[] subject1= {ATCE_ATSubject27};
		String[] notes1= {ATCE_ATNote27};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27)};
		String[][] tag1= {ATCE_ATTags27.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

		if (lp.clickOnTab(projectName, tabObj3)) {

			log(LogStatus.INFO, "Clicked on Tab : " +tabObj3, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+ tabObj3, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+ tabObj3);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc133_VerifyInactiveUserFunctionalityOnThemeRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Theme1;
	
	 
		String[] iconType1= {ATCE_ATActivityType27};
		String[] date1= {ATCE_ATDueDate27};
		String[] subject1= {ATCE_ATSubject27};
		String[] notes1= {ATCE_ATNote27};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants27)};
		String[][] tag1= {ATCE_ATTags27.split("<break>")};
		
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

		if (lp.clickOnTab(projectName, TabName.Themes.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : "+TabName.Themes.toString(), YesNo.No);

			String parentWindowID=bp.clickOnThemeRecord(recordName);

			if (parentWindowID!=null) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					
			
						
					
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
								
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+TabName.Themes.toString(), YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+TabName.Themes.toString());
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc134_CreateATaskAndLogACall(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		
		String activityType=ATCE_ATActivityType31;
		String taskSubject=ATCE_ATSubject31;
		String taskRelatedTo=ATCE_ATRelatedTo31;
		String taskNotes=ATCE_ATNote31;
		String taskStatus=ATCE_AdvanceStatus16;
		String taskPriority=ATCE_AdvancePriority16;	
		String dueDateDay=ATCE_ATDay31;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_031", excelLabel.Advance_Due_Date);
		
		String activityType1=ATCE_ATActivityType30;
		String taskSubject1=ATCE_ATSubject30;
		String taskRelatedTo1=ATCE_ATRelatedTo30;
		String taskNotes1=ATCE_ATNote30;	
		String dueDateDay1=ATCE_ATDay31;
		String taskDueDate1 = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay1));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate1, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_030", excelLabel.Advance_Due_Date);
	
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority}};
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (bp.createActivityTimeline(projectName, true, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
			log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
			sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

		}
		else
		{
			log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
			sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
		}	 
		
		if (bp.createActivityTimeline(projectName, true, activityType1, basicsection1, advanceSection1, null, null, false, null, null,null, null,null,null)) {
			log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject1, YesNo.No);
			sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject1);

		}
		else
		{
			log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject1, YesNo.No);
			sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject1);
		}	 

		lp.CRMlogout();	
		sa.assertAll();	
	}
			
	@Parameters({ "projectName" })
	@Test
	public void ATCETc135_UpdateTheNameOfAccountsContactDealsAndFund(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		SetupPageBusinessLayer setup = new SetupPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		FundsPageBusinessLayer fp = new FundsPageBusinessLayer(driver);
		BasePageBusinessLayer BP = new BasePageBusinessLayer(driver);
		DealPageBusinessLayer dp = new DealPageBusinessLayer(driver);
		ContactsPageBusinessLayer cp=new ContactsPageBusinessLayer(driver);
		InstitutionsPageBusinessLayer ip=new InstitutionsPageBusinessLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);
		
		String recordName1=ATCERecord2;
		String contactName=ATCE_ContactFullName2;

		String updatedfirmRecordName=ATCERecord15;

		String updatedContactLastName=ATCE_ContactLastName8;

		String contactName2=ATCE_ContactFullName15;
		String updatedContactTitle=ATCE_ContactTitle8;

		String dealName=ATCE_Deal4;
		String updatedDealName=ATCE_Deal5;
		
		String fundRecordName=ATCE_Fund2;
		String updatedFundRecordName=ATCE_Fund3;

		String xPath;
		WebElement ele;

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);
			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName1, 30)) {
				log(LogStatus.INFO, recordName1 + " record has been open", YesNo.No);

				if(ip.UpdateLegalNameAccount(projectName, updatedfirmRecordName, 20))
				{
					log(LogStatus.INFO, updatedfirmRecordName + " legal name has been updated", YesNo.No);
				}
				else
				{
					log(LogStatus.ERROR, updatedfirmRecordName + " legal name is not updated", YesNo.No);
					sa.assertTrue(false, updatedfirmRecordName + " legal name is not updated");
				}				    		 
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName1, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName1);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}


		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);
			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
					contactName, 30)) {
				log(LogStatus.INFO, contactName + " record has been open", YesNo.No);
				if(cp.UpdateLastName(projectName, PageName.ContactPage, updatedContactLastName))
				{
					log(LogStatus.INFO, "Last name has been updated of contact "+contactName, YesNo.No);
				}
				else
				{
					log(LogStatus.ERROR, "Last name is not updated of contact "+contactName, YesNo.No);
					sa.assertTrue(false, "Last name is not updated of contact "+contactName);
				}					    		 
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+contactName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+contactName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj2, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj2);
		}
		refresh(driver);

		if (lp.clickOnTab(projectName, tabObj4)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);
			if (BP.clickOnAlreadyCreatedItem(projectName, TabName.DealTab,
					dealName, 30)) {
				log(LogStatus.INFO, dealName + " record has been open", YesNo.No);

				if(fp.UpdateDealName(projectName, updatedDealName, 20))
				{
					log(LogStatus.INFO,  "Deal name has been updated of "+dealName+" record", YesNo.No);
				}
				else
				{
					log(LogStatus.ERROR,  "Deal name is not updated of "+dealName+" record", YesNo.No);
					sa.assertTrue(false,   "Deal name is not updated of "+dealName+" record");
				}

			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+dealName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+dealName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj4, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
		}


		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);
			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
					contactName2, 30)) {
				log(LogStatus.INFO, contactName2 + " record has been open", YesNo.No);

				if (cp.clickOnShowMoreActionDownArrow(projectName, PageName.ContactPage, ShowMoreActionDropDownList.Edit, 30)) {
					log(LogStatus.INFO, "clicked on edit button on contact page", YesNo.No);

					xPath="//h2[contains(text(),'Edit')]/../..//label[text()='Title']/../..//input";
					ele=FindElement(driver, xPath, "Title", action.SCROLLANDBOOLEAN, 30);
					if(sendKeys(driver, ele, updatedContactTitle, "Title", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, updatedContactTitle+" value has been passed in title field", YesNo.No);
						xPath="//h2[contains(text(),'Edit')]/../..//button[@name='SaveEdit']";
						ele=FindElement(driver, xPath, "Save button", action.SCROLLANDBOOLEAN, 20);
						if(click(driver, ele, "Save button", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on save button", YesNo.No);								
							if(cp.ActivityTimeLineCreatedMsg(20)!=null)
							{
								log(LogStatus.INFO, "The title has been updated of contact "+contactName2, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The title is not updated of contact "+contactName2, YesNo.No);
								sa.assertTrue(false, "The title is not updated of contact "+contactName2);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on save button", YesNo.No);
							sa.assertTrue(false, "Not able to click on save button");
						}
					}
					else
					{
						log(LogStatus.ERROR, updatedContactTitle+" value has is not passed in title field", YesNo.No);
						sa.assertTrue(false, updatedContactTitle+" value has is not passed in title field");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on edit button of contact page", YesNo.No);
					sa.assertTrue(false,  "Not able to click on edit button of contact page");
				}

			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+contactName2, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+contactName2);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj2, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj2);
		}
		
		if (lp.clickOnTab(projectName, tabObj3)) {

			log(LogStatus.INFO, "Clicked on Tab : " +tabObj3, YesNo.No);

			if (BP.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
					fundRecordName, 30)) {
				log(LogStatus.INFO, fundRecordName + " reocrd has been open", YesNo.No);
				if(fp.UpdateFundName(projectName, updatedFundRecordName, 30))
				{
					log(LogStatus.INFO, "Fund name have been updated to "+updatedFundRecordName, YesNo.No);
				}
				else
				{
					log(LogStatus.ERROR, "Fund name is not updated to "+updatedFundRecordName, YesNo.No);	
					sa.assertTrue(false, "Fund name is not updated to "+updatedFundRecordName);
				}
				

			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+fundRecordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+fundRecordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+ tabObj3, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+ tabObj3);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc136_EditTaskAndCall(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		TaskPageBusinessLayer taskBP = new TaskPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
	

		String task1SubjectNameNavigation = ATCE_ATSubject30;
		
		String taskSubject=ATCE_ATSubject32;
		String taskRelatedTo=ATCE_ATRelatedTo32;
		String taskNotes=ATCE_ATNote32;
		
		String dueDateDay=ATCE_ATDay32;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_032", excelLabel.Advance_Due_Date);
		
		
		String[][] basicSection = {{"Subject",taskSubject},{ "Related_To", taskRelatedTo } , { "Notes", taskNotes }};
		String[][] advanceSection = { { "Date", taskDueDate }};
		
		
        String task1SubjectNameNavigation1 = ATCE_ATSubject31;
		
		String taskSubject1=ATCE_ATSubject33;
		String taskRelatedTo1=ATCE_ATRelatedTo33;
		String taskNotes1=ATCE_ATNote33;
		
		String dueDateDay1=ATCE_ATDay33;
		String taskDueDate1 = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay1));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate1, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_033", excelLabel.Advance_Due_Date);
	
		String[][] basicSection1 = {{"Subject",taskSubject1},{ "Related_To", taskRelatedTo1 } , { "Notes", taskNotes1 }};
		String[][] advanceSection1 = { { "Due Date", taskDueDate1 }};
	

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (home.globalSearchAndNavigate(task1SubjectNameNavigation, "Tasks", false)) {

			log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectNameNavigation + " found in Tasks Object-----",YesNo.No);
			String parentID=switchOnWindow(driver);
			if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(task1SubjectNameNavigation, 20), "Edit button of popup of subject name "+task1SubjectNameNavigation))
			{
				log(LogStatus.INFO,"Clicked on edit button of subject "+task1SubjectNameNavigation,YesNo.No);
				

				if (bp.updateActivityTimelineRecordForMultipleFollowUpTasks(projectName, basicSection,advanceSection, null, null, null,false,false)) {
					log(LogStatus.PASS, "Activity timeline record has been updated, Subject name : "+taskSubject, YesNo.No);
					sa.assertTrue(true, "Activity timeline record has been updated,  Subject name : "+taskSubject);

				}
				else
				{
					log(LogStatus.ERROR, "Activity timeline record is not updated, Subject name : "+taskSubject, YesNo.No);
					sa.assertTrue(false, "Activity timeline record is not updated,  Subject name : "+taskSubject);
				}	 
				
			}
			else
			{
				log(LogStatus.ERROR,"Not able to click on edit button of subject "+task1SubjectNameNavigation,YesNo.No);
				BaseLib.sa.assertTrue(false,"Not able to click on edit button of subject "+task1SubjectNameNavigation);
				
			}
			driver.close();
			driver.switchTo().window(parentID);
			
		}
		 else {

				log(LogStatus.ERROR, "-----Task named: " + task1SubjectNameNavigation + " not found in Tasks Object-----",YesNo.Yes);
				BaseLib.sa.assertTrue(false,"-----Task named: " + task1SubjectNameNavigation + " not found in Tasks Object-----");

			}
		
		
		refresh(driver);

		if (home.globalSearchAndNavigate(task1SubjectNameNavigation1, "Tasks", false)) {

			log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectNameNavigation1 + " found in Tasks Object-----",YesNo.No);
			String parentID=switchOnWindow(driver);
			if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnPopup(task1SubjectNameNavigation1, 20), "Edit button of popup of subject name "+task1SubjectNameNavigation1))
			{
				log(LogStatus.INFO,"Clicked on edit button of subject "+task1SubjectNameNavigation1,YesNo.No);
				

				if (bp.updateActivityTimelineRecordForMultipleFollowUpTasks(projectName, basicSection1,advanceSection1, null, null, null,false,false)) {
					log(LogStatus.PASS, "Activity timeline record has been updated, Subject name : "+taskSubject1, YesNo.No);
					sa.assertTrue(true, "Activity timeline record has been updated,  Subject name : "+taskSubject1);

				}
				else
				{
					log(LogStatus.ERROR, "Activity timeline record is not updated, Subject name : "+taskSubject, YesNo.No);
					sa.assertTrue(false, "Activity timeline record is not updated,  Subject name : "+taskSubject);
				}	 
				
			}
			else
			{
				log(LogStatus.ERROR,"Not able to click on edit button of subject "+task1SubjectNameNavigation1,YesNo.No);
				BaseLib.sa.assertTrue(false,"Not able to click on edit button of subject "+task1SubjectNameNavigation1);
				
			}
			driver.close();
			driver.switchTo().window(parentID);
			
		}
		 else {

				log(LogStatus.ERROR, "-----Task named: " + task1SubjectNameNavigation1 + " not found in Tasks Object-----",YesNo.Yes);
				BaseLib.sa.assertTrue(false,"-----Task named: " + task1SubjectNameNavigation1 + " not found in Tasks Object-----");

			}
		
		

		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc137_VerifyUpdatedAccountContactAndDeallFunctionalityAndSortingOrderOnTaggedSectiOnCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord1;
	
		String contactSectionName=ATCE_ConName23;
		String contactSectionTitle=ATCE_ConTitle23;
		String contactSectionDeal=ATCE_ConDeal23;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall23;
		String contactSectionEmail=ATCE_ConEmail23;
		
		String firmTagName=ATCE_TaggedFirmsName81;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount81;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName12;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;		
		
		String contactSectionName1=ATCE_ConName22;
		String contactSectionTitle1=ATCE_ConTitle22;
		String contactSectionDeal1=ATCE_ConDeal22;
		String contactSectionMeetingAndCalls1=ATCE_ConMeetingAndCall22;
		String contactSectionEmail1=ATCE_ConEmail22;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName75,ATCE_TaggedFirmsName76,ATCE_TaggedFirmsName77,ATCE_TaggedFirmsName78,ATCE_TaggedFirmsName79,ATCE_TaggedFirmsName80,ATCE_TaggedFirmsName81};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount75,ATCE_TaggedFirmsCount76,ATCE_TaggedFirmsCount77,ATCE_TaggedFirmsCount78,ATCE_TaggedFirmsCount79,ATCE_TaggedFirmsCount80,ATCE_TaggedFirmsCount81};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		String[] dealTaggedName= {ATCE_TaggedDealName11,ATCE_TaggedDealName12};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount11,ATCE_TaggedDealCount12};
		
		
		String[] connectionUserName= {crmUser6FirstName+" "+crmUser6LastName};
		String[] connectionTitle= {ATCE_ConnectionTitle5};
		String[] connectionDeal= {ATCE_ConnectionDeal5};
		String[] connectionMeetingaAndCall= {ATCE_ConnectionMeetingAndCall5};
		String[] connectionEmail= {ATCE_ConnectionEmail5};
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType32};
		String[] date= {ATCE_ATDueDate32};
		String[] subject= {ATCE_ATSubject32};
		String[] notes= {ATCE_ATNote32};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants32)};
		String[][] tag= {ATCE_ATTags32.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.CompaniesTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
			String recordName1=ATCERecord15;
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.CompaniesTab,
						recordName1, 30)) {
					log(LogStatus.INFO, recordName1 + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
						
						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName1, contactSectionTitle1, contactSectionDeal1, contactSectionMeetingAndCalls1, contactSectionEmail1);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName1+" record on Contact section has been verified for "+recordName1, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName1+" record on Contact section is not verified for "+recordName1+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName1+" record on Contact section is not verified for "+recordName1+". "+result4);
						}
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName1, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName1+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName1+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName1+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName1, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName1, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName1+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName1+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName1, 30), "Contact Name: " + contactSectionName1,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName1, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+contactSectionName1, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+contactSectionName1+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+contactSectionName1+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName1,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName1);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName1, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName1);
						}
						
						
			
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
			

		lp.CRMlogout();	
		sa.assertAll();	
	}
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc138_VerifyUpdatedAccountContactAndDeallFunctionalityAndSortingOrderOnTaggedSectiOnAdvisorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord5;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName75,ATCE_TaggedFirmsName77,ATCE_TaggedFirmsName78,ATCE_TaggedFirmsName79,ATCE_TaggedFirmsName80,ATCE_TaggedFirmsName81,ATCE_TaggedFirmsName82};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount75,ATCE_TaggedFirmsCount77,ATCE_TaggedFirmsCount78,ATCE_TaggedFirmsCount79,ATCE_TaggedFirmsCount80,ATCE_TaggedFirmsCount81,ATCE_TaggedFirmsCount82};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		String[] dealTaggedName= {ATCE_TaggedDealName11,ATCE_TaggedDealName12};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount11,ATCE_TaggedDealCount12};
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName81;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount81;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName12;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc139_VerifyUpdatedAccountContactAndDeallFunctionalityAndSortingOrderOnTaggedSectiOnLenderRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord7;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName75,ATCE_TaggedFirmsName76,ATCE_TaggedFirmsName78,ATCE_TaggedFirmsName79,ATCE_TaggedFirmsName80,ATCE_TaggedFirmsName81,ATCE_TaggedFirmsName82};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount75,ATCE_TaggedFirmsCount76,ATCE_TaggedFirmsCount78,ATCE_TaggedFirmsCount79,ATCE_TaggedFirmsCount80,ATCE_TaggedFirmsCount81,ATCE_TaggedFirmsCount82};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		String[] dealTaggedName= {ATCE_TaggedDealName11,ATCE_TaggedDealName12};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount11,ATCE_TaggedDealCount12};
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName81;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount81;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName12;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc140_VerifyUpdatedAccountContactAndDeallFunctionalityAndSortingOrderOnTaggedSectiOnIntermediaryRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord9;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName75,ATCE_TaggedFirmsName76,ATCE_TaggedFirmsName77,ATCE_TaggedFirmsName79,ATCE_TaggedFirmsName80,ATCE_TaggedFirmsName81,ATCE_TaggedFirmsName82};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount75,ATCE_TaggedFirmsCount76,ATCE_TaggedFirmsCount77,ATCE_TaggedFirmsCount79,ATCE_TaggedFirmsCount80,ATCE_TaggedFirmsCount81,ATCE_TaggedFirmsCount82};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		String[] dealTaggedName= {ATCE_TaggedDealName11,ATCE_TaggedDealName12};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount11,ATCE_TaggedDealCount12};
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName81;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount81;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName12;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc141_VerifyUpdatedAccountContactAndDeallFunctionalityAndSortingOrderOnTaggedSectiOnInstitutionRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord3;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName76,ATCE_TaggedFirmsName77,ATCE_TaggedFirmsName78,ATCE_TaggedFirmsName79,ATCE_TaggedFirmsName80,ATCE_TaggedFirmsName81,ATCE_TaggedFirmsName82};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount76,ATCE_TaggedFirmsCount77,ATCE_TaggedFirmsCount78,ATCE_TaggedFirmsCount79,ATCE_TaggedFirmsCount80,ATCE_TaggedFirmsCount81,ATCE_TaggedFirmsCount82};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		String[] fundTaggedName= {ATCE_TaggedFundName5,ATCE_TaggedFundName6};
		String[] fundTaggedTimeReference= {ATCE_TaggedFundCount5,ATCE_TaggedFundCount6};
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName81;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount81;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName12;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null, null,true, fundTaggedName,fundTaggedTimeReference);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(true);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc142_VerifyUpdatedAccountContactAndDeallFunctionalityAndSortingOrderOnTaggedSectiOnPortfolioCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord11;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName75,ATCE_TaggedFirmsName76,ATCE_TaggedFirmsName77,ATCE_TaggedFirmsName78,ATCE_TaggedFirmsName80,ATCE_TaggedFirmsName81,ATCE_TaggedFirmsName82};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount75,ATCE_TaggedFirmsCount76,ATCE_TaggedFirmsCount77,ATCE_TaggedFirmsCount78,ATCE_TaggedFirmsCount80,ATCE_TaggedFirmsCount81,ATCE_TaggedFirmsCount82};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		String[] dealTaggedName= {ATCE_TaggedDealName11,ATCE_TaggedDealName12};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount11,ATCE_TaggedDealCount12};
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName81;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount81;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName12;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc143_VerifyUpdatedAccountContactAndDeallFunctionalityAndSortingOrderOnTaggedSectiOnPrivateEquityRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord13;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName75,ATCE_TaggedFirmsName76,ATCE_TaggedFirmsName77,ATCE_TaggedFirmsName78,ATCE_TaggedFirmsName79,ATCE_TaggedFirmsName81,ATCE_TaggedFirmsName82};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount75,ATCE_TaggedFirmsCount76,ATCE_TaggedFirmsCount77,ATCE_TaggedFirmsCount78,ATCE_TaggedFirmsCount79,ATCE_TaggedFirmsCount81,ATCE_TaggedFirmsCount82};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		String[] dealTaggedName= {ATCE_TaggedDealName11,ATCE_TaggedDealName12};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount11,ATCE_TaggedDealCount12};
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName81;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount81;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName12;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc144_VerifyUpdatedAccountContactAndDeallFunctionalityAndSortingOrderOnTaggedSectiOnContactRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Con1;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName84,ATCE_TaggedFirmsName85,ATCE_TaggedFirmsName86,ATCE_TaggedFirmsName87,ATCE_TaggedFirmsName88,ATCE_TaggedFirmsName89,ATCE_TaggedFirmsName83};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount84,ATCE_TaggedFirmsCount85,ATCE_TaggedFirmsCount86,ATCE_TaggedFirmsCount87,ATCE_TaggedFirmsCount88,ATCE_TaggedFirmsCount89,ATCE_TaggedFirmsCount83};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName47};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount47};
				
		String[] dealTaggedName= {ATCE_TaggedDealName12};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount12};
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		
		String firmTagName=ATCE_TaggedFirmsName83;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount83;
		
		String peopleTagName=ATCE_TaggedPeopleName47;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount47;
		
		String dealTagName=ATCE_TaggedDealName12;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj2)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj2, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj2);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc145_VerifyUpdatedAccountContactAndDeallFunctionalityAndSortingOrderOnTaggedSectiOnDealRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Deal1;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName90};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount90};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		String[] dealTaggedName= {ATCE_TaggedDealName13};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount11,ATCE_TaggedDealCount13};
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName90;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount90;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName13;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount13;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
		if (lp.clickOnTab(projectName, tabObj4)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
		


						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc146_VerifyUpdatedAccountContactAndDeallFunctionalityAndSortingOrderOnTaggedSectiOnFundraisingRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fundraising1;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName90};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount90};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName90;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount90;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName13;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

		if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
		

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null, null,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
											
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSectionFormFirmAndPeopleTab();
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+TabName.Fundraising.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+TabName.Fundraising.toString());
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc147_VerifyUpdatedAccountContactAndDeallFunctionalityAndSortingOrderOnTaggedSectiOnFundRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fund1;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName90};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount90};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
		
		String[] dealTaggedName= {ATCE_TaggedDealName13};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount13};		
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName90;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount90;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName13;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount13;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
		if (lp.clickOnTab(projectName, tabObj3)) {

			log(LogStatus.INFO, "Clicked on Tab : " +tabObj3, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
		

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,false, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj3, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj3);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc148_VerifyUpdatedAccountContactAndDeallFunctionalityAndSortingOrderOnTaggedSectiOnThemeRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Theme1;
	

	
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

		if (lp.clickOnTab(projectName, TabName.Themes.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : "+TabName.Themes.toString(), YesNo.No);

			String parentWindowID=bp.clickOnThemeRecord(recordName);

			if (parentWindowID!=null) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			driver.close();
			driver.switchTo().window(parentWindowID);
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+TabName.Themes.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+TabName.Themes.toString());
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc149_DeleteTheAccountContactDealFundAndFundraisingFromTheOrg(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		ContactsPageBusinessLayer cp = new ContactsPageBusinessLayer(driver);
		FundsPageBusinessLayer fp=new FundsPageBusinessLayer(driver);
		FundraisingsPageBusinessLayer fr=new FundraisingsPageBusinessLayer(driver);
		String xPath;
		WebElement ele;

		String firmRecordName=ATCERecord15;
		String dealName=ATCE_Deal5;
		String fundName=ATCE_Fund3;
		String fundraisingName=ATCE_Fundraising2;

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);
			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					firmRecordName, 30)) {
				log(LogStatus.INFO, firmRecordName + " reocrd has been open", YesNo.No);
				cp.clickOnShowMoreDropdownOnly(projectName, PageName.Object1Page, "");
				log(LogStatus.INFO, "Able to Click on Show more Icon : " + TabName.Object1Tab + " For : " +firmRecordName ,
						YesNo.No);
				ThreadSleep(500);
				ele = cp.actionDropdownElement(projectName, PageName.Object1Page,
						ShowMoreActionDropDownList.Delete, 15);
				if (ele == null) {
					ele = cp.getDeleteButton(projectName, 30);
				}

				if (click(driver, ele, "Delete More Icon", action.BOOLEAN)) {
					log(LogStatus.INFO,
							"Able to Click on Delete more Icon : " + TabName.Object1Tab + " For : " + firmRecordName,
							YesNo.No);
					ThreadSleep(1000);
					if (click(driver, cp.getDeleteButtonOnDeletePopUp(projectName, 30), "Delete Button",
							action.BOOLEAN)) {
						log(LogStatus.INFO, "Able to Click on Delete button on Delete PoPup : " + TabName.Object1Tab
								+ " For : " + firmRecordName, YesNo.No);

						ThreadSleep(10000);
						if (cp.clickOnTab(projectName, TabName.Object1Tab)) {
							log(LogStatus.INFO, "Clicked on Tab : " + TabName.Object1Tab + " For : " + firmRecordName,
									YesNo.No);
							ThreadSleep(1000);
							if (!cp.clickOnAlreadyCreatedItem(projectName, TabName.Object1Tab, firmRecordName, 10)) {
								log(LogStatus.INFO, "Item has been Deleted after delete operation  : " + firmRecordName
										+ " For : " + TabName.Object1Tab, YesNo.No);

							} else {
								sa.assertTrue(false, "Item has not been Deleted after delete operation  : " + firmRecordName
										+ " For : " + TabName.Object1Tab);
								log(LogStatus.SKIP, "Item has not been Deleted after delete operation  : " + firmRecordName
										+ " For : " + TabName.Object1Tab, YesNo.Yes);
							}

						} else {
							sa.assertTrue(false, "Not Able to Click on Tab after delete : " + TabName.Object1Tab
									+ " For : " + firmRecordName);
							log(LogStatus.SKIP, "Not Able to Click on Tab after delete : " + TabName.Object1Tab
									+ " For : " + firmRecordName, YesNo.Yes);
						}


					} else {
						log(LogStatus.ERROR, "not able to click on delete button, so not deleted : " + TabName.Object1Tab
								+ " For : " + firmRecordName, YesNo.No);
						sa.assertTrue(false, "not able to click on delete button, so not deleted : "
								+ TabName.Object1Tab + " For : " + firmRecordName);
					}
				} else {
					log(LogStatus.ERROR,
							"not Able to Click on Delete more Icon : " + TabName.Object1Tab + " For : " + firmRecordName,
							YesNo.No);
					sa.assertTrue(false,
							"not Able to Click on Delete more Icon : " + TabName.Object1Tab + " For : " + firmRecordName);
				}

			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+firmRecordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+firmRecordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}


		if (lp.clickOnTab(projectName, tabObj4)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);
			if (bp.clickOnAlreadyCreatedItem(projectName, TabName.DealTab,
					dealName, 30)) {
				log(LogStatus.INFO, dealName + " record has been open", YesNo.No);


				cp.clickOnShowMoreDropdownOnly(projectName, PageName.Object4Page, "");
				log(LogStatus.INFO, "Able to Click on Show more Icon : " + TabName.Object4Tab + " For : " + dealName,
						YesNo.No);
				ThreadSleep(500);
				ele = cp.actionDropdownElement(projectName, PageName.Object4Page,
						ShowMoreActionDropDownList.Delete, 15);
				if (ele == null) {
					ele = cp.getDeleteButton(projectName, 30);
				}

				if (click(driver, ele, "Delete More Icon", action.BOOLEAN)) {
					log(LogStatus.INFO,
							"Able to Click on Delete more Icon : " + TabName.Object4Tab + " For : " + dealName,
							YesNo.No);
					ThreadSleep(1000);
					if (click(driver, cp.getDeleteButtonOnDeletePopUp(projectName, 30), "Delete Button",
							action.BOOLEAN)) {
						log(LogStatus.INFO, "Able to Click on Delete button on Delete PoPup : " + TabName.Object4Tab
								+ " For : " + dealName, YesNo.No);

						ThreadSleep(10000);
						if (lp.clickOnTab(projectName, tabObj4)) {

							log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);
							if (!bp.clickOnAlreadyCreatedItem(projectName, TabName.DealTab,
									dealName, 30)) {
								log(LogStatus.INFO, dealName + " record has been deleted", YesNo.No);

							}
							else
							{
								log(LogStatus.ERROR, dealName + " record is not  deleted", YesNo.No);
								sa.assertTrue(false,  dealName + " record is not  deleted");
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on tab"+tabObj4, YesNo.No);
							sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
						}

					} else {
						log(LogStatus.ERROR, "not able to click on delete button, so not deleted : " + TabName.Object4Tab
								+ " For : " + dealName, YesNo.No);
						sa.assertTrue(false, "not able to click on delete button, so not deleted : "
								+ TabName.Object4Tab + " For : " + dealName);
					}
				} else {
					log(LogStatus.ERROR,
							"not Able to Click on Delete more Icon : " + TabName.Object4Tab + " For : " + dealName,
							YesNo.No);
					sa.assertTrue(false,
							"not Able to Click on Delete more Icon : " + TabName.Object4Tab + " For : " + dealName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+dealName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+dealName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj4, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
		}

		

		if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
					fundraisingName, 30)) {
				log(LogStatus.INFO, fundraisingName + " reocrd has been open", YesNo.No);
				
				if(fr.deleteFundraising(projectName, 20))
				{
					log(LogStatus.INFO, "Clicked on Delete button of fundraising", YesNo.No);
					if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

						log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

						if (!bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
								fundraisingName, 30)) {
							log(LogStatus.INFO, fundraisingName + " reocrd has been deleted", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to  Delete the fundraising", YesNo.No);
							sa.assertTrue(false,  "Not able to Delete button the fundraising");
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to open record "+fundraisingName, YesNo.No);
						sa.assertTrue(false,  "Not able to open record "+fundraisingName);
				
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Delete button of fundraising", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Delete button of fundraising");
				}
				

			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+fundraisingName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+fundraisingName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+TabName.Fundraising.toString(), YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+TabName.Fundraising.toString());
		}
		


		if (lp.clickOnTab(projectName, tabObj3)) {

			log(LogStatus.INFO, "Clicked on Tab : " +tabObj3, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
					fundName, 30)) {
				log(LogStatus.INFO, fundName + " reocrd has been open", YesNo.No);

				if(fp.deleteFund(projectName, fundName, 20))
				{
					log(LogStatus.INFO, "Clicked on fund delete button ", YesNo.No);
					if (lp.clickOnTab(projectName, tabObj3)) {

						log(LogStatus.INFO, "Clicked on Tab : " +tabObj3, YesNo.No);

						if (!bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
								fundName, 30)) {
							log(LogStatus.INFO, fundName + " has been deleted", YesNo.No);
						}

						else
						{
							log(LogStatus.INFO, fundName + " is not deleted", YesNo.No);
							sa.assertTrue(false,  fundName + " is not deleted");
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on tab "+tabObj3, YesNo.No);
						sa.assertTrue(false,  "Not able to click on tab "+tabObj3);
					}

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on fund delete button ", YesNo.No);
					sa.assertTrue(false,  "Not able to click on fund delete button ");
				}


			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+fundName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+fundName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+tabObj3, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj3);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc150_VerifyDeletedAccountContactAndDealFunctionalityOnCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord1;
	
		String[] firmsTaggedName= {ATCE_TaggedFirmsName81};
		

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
	
				
		String[] dealTaggedName= {ATCE_TaggedDealName12};
	
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.CompaniesTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			
						ArrayList<String> result=bp.verifyRecordShouldNotVisibleOnTagged(firmsTaggedName, peopleTaggedName, dealTaggedName, false,null);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "Deleted records are not available on Tagged Section", YesNo.No);	
						}
						else
						{
							log(LogStatus.ERROR, "Deleted records are available on Tagged Section. "+result, YesNo.No);	
							sa.assertTrue(false, "Deleted records are available on Tagged Section. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
			

		lp.CRMlogout();	
		sa.assertAll();	
	}
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc151_VerifyDeletedAccountContactAndDealFunctionalityOnAdvisorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord5;
	

	    String[] firmsTaggedName= {ATCE_TaggedFirmsName81};
		

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
	
				
		String[] dealTaggedName= {ATCE_TaggedDealName12};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyRecordShouldNotVisibleOnTagged(firmsTaggedName, peopleTaggedName, dealTaggedName, false,null);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "Deleted records are not available on Tagged Section", YesNo.No);	
						}
						else
						{
							log(LogStatus.ERROR, "Deleted records are available on Tagged Section. "+result, YesNo.No);	
							sa.assertTrue(false, "Deleted records are available on Tagged Section. "+result);
						}
						
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc152_VerifyDeletedAccountContactAndDealFunctionalityOnLenderRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord7;
	
		    String[] firmsTaggedName= {ATCE_TaggedFirmsName81};
			
			String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
				
			String[] dealTaggedName= {ATCE_TaggedDealName12};
		
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyRecordShouldNotVisibleOnTagged(firmsTaggedName, peopleTaggedName, dealTaggedName, false,null);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "Deleted records are not available on Tagged Section", YesNo.No);	
						}
						else
						{
							log(LogStatus.ERROR, "Deleted records are available on Tagged Section. "+result, YesNo.No);	
							sa.assertTrue(false, "Deleted records are available on Tagged Section. "+result);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc153_VerifyDeletedAccountContactAndDealFunctionalityOnIntermediaryRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord9;
	

		 String[] firmsTaggedName= {ATCE_TaggedFirmsName81};
			
			String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
				
			String[] dealTaggedName= {ATCE_TaggedDealName12};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyRecordShouldNotVisibleOnTagged(firmsTaggedName, peopleTaggedName, dealTaggedName, false,null);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "Deleted records are not available on Tagged Section", YesNo.No);	
						}
						else
						{
							log(LogStatus.ERROR, "Deleted records are available on Tagged Section. "+result, YesNo.No);	
							sa.assertTrue(false, "Deleted records are available on Tagged Section. "+result);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc154_VerifyDeletedAccountContactAndDealFunctionalityOnInstitutionRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord3;
	

		 String[] firmsTaggedName= {ATCE_TaggedFirmsName81};
			
			String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
				
			String[] fundTaggedName= {ATCE_TaggedFundName6};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyRecordShouldNotVisibleOnTagged(firmsTaggedName, peopleTaggedName, null, false,fundTaggedName);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "Deleted records are not available on Tagged Section", YesNo.No);	
						}
						else
						{
							log(LogStatus.ERROR, "Deleted records are available on Tagged Section. "+result, YesNo.No);	
							sa.assertTrue(false, "Deleted records are available on Tagged Section. "+result);
						}
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc155_VerifyDeletedAccountContactAndDealFunctionalityOnPortfolioCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord11;
	

		 String[] firmsTaggedName= {ATCE_TaggedFirmsName81};
			
			String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
				
			String[] dealTaggedName= {ATCE_TaggedDealName12};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyRecordShouldNotVisibleOnTagged(firmsTaggedName, peopleTaggedName, dealTaggedName, false,null);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "Deleted records are not available on Tagged Section", YesNo.No);	
						}
						else
						{
							log(LogStatus.ERROR, "Deleted records are available on Tagged Section. "+result, YesNo.No);	
							sa.assertTrue(false, "Deleted records are available on Tagged Section. "+result);
						}
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc156_VerifyDeletedAccountContactAndDealFunctionalityOnPrivateEquityRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord13;
	

		 String[] firmsTaggedName= {ATCE_TaggedFirmsName81};
			
			String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
				
			String[] dealTaggedName= {ATCE_TaggedDealName12};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyRecordShouldNotVisibleOnTagged(firmsTaggedName, peopleTaggedName, dealTaggedName, false,null);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "Deleted records are not available on Tagged Section", YesNo.No);	
						}
						else
						{
							log(LogStatus.ERROR, "Deleted records are available on Tagged Section. "+result, YesNo.No);	
							sa.assertTrue(false, "Deleted records are available on Tagged Section. "+result);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc157_VerifyDeletedAccountContactAndDealFunctionalityOnContactRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Con1;
	

		 String[] firmsTaggedName= {ATCE_TaggedFirmsName81};
			
			String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
				
			String[] dealTaggedName= {ATCE_TaggedDealName12};
			
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj2)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result=bp.verifyRecordShouldNotVisibleOnTagged(firmsTaggedName, peopleTaggedName, dealTaggedName, false,null);
						if(result.isEmpty())
						{
							log(LogStatus.INFO, "Deleted records are not available on Tagged Section", YesNo.No);	
						}
						else
						{
							log(LogStatus.ERROR, "Deleted records are available on Tagged Section. "+result, YesNo.No);	
							sa.assertTrue(false, "Deleted records are available on Tagged Section. "+result);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj2, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj2);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc158_VerifyDeletedAccountContactAndDealFunctionalityiOnDealRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Deal1;
	

		 String[] firmsTaggedName= {ATCE_TaggedFirmsName81};
			
			String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
				
			String[] dealTaggedName= {ATCE_TaggedDealName12};
			
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
		if (lp.clickOnTab(projectName, tabObj4)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
		


					ArrayList<String> result=bp.verifyRecordShouldNotVisibleOnTagged(firmsTaggedName, peopleTaggedName, dealTaggedName, false,null);
					if(result.isEmpty())
					{
						log(LogStatus.INFO, "Deleted records are not available on Tagged Section", YesNo.No);	
					}
					else
					{
						log(LogStatus.ERROR, "Deleted records are available on Tagged Section. "+result, YesNo.No);	
						sa.assertTrue(false, "Deleted records are available on Tagged Section. "+result);
					}
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc159_VerifyDeletedAccountContactAndDealFunctionalityOnFundraisingRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fundraising1;
	
		 String[] firmsTaggedName= {ATCE_TaggedFirmsName81};
			
			String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
				
			String[] dealTaggedName= {ATCE_TaggedDealName12};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

		if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
		
					ArrayList<String> result=bp.verifyRecordShouldNotVisibleOnTagged(firmsTaggedName, peopleTaggedName);
					if(result.isEmpty())
					{
						log(LogStatus.INFO, "Deleted records are not available on Tagged Section", YesNo.No);	
					}
					else
					{
						log(LogStatus.ERROR, "Deleted records are available on Tagged Section. "+result, YesNo.No);	
						sa.assertTrue(false, "Deleted records are available on Tagged Section. "+result);
					}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+TabName.Fundraising.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+TabName.Fundraising.toString());
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc160_VerifyDeletedAccountContactAndDealFunctionalityOnFundRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fund1;
	
		 String[] firmsTaggedName= {ATCE_TaggedFirmsName81};
			
			String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
				
			String[] dealTaggedName= {ATCE_TaggedDealName12};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
		if (lp.clickOnTab(projectName, tabObj3)) {

			log(LogStatus.INFO, "Clicked on Tab : " +tabObj3, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
		

					ArrayList<String> result=bp.verifyRecordShouldNotVisibleOnTagged(firmsTaggedName, peopleTaggedName, dealTaggedName, false,null);
					if(result.isEmpty())
					{
						log(LogStatus.INFO, "Deleted records are not available on Tagged Section", YesNo.No);	
					}
					else
					{
						log(LogStatus.ERROR, "Deleted records are available on Tagged Section. "+result, YesNo.No);	
						sa.assertTrue(false, "Deleted records are available on Tagged Section. "+result);
					}
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj3, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj3);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc161_RestoreTheDeletedRecordsFromRecycleBinAndVerify(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		WebElement ele;
		String xPath;

		String recordName=ATCERecord15;
		String recordName1=ATCE_Deal5;
		String recordName2=ATCE_Fund3;
		String recordName3=ATCE_Fundraising2;


		String[][] listViewSheetData = { {"User" , "Recycle Bin", "Restore Account", "Only I can see this list view",
			"My recycle bin", "Record Name", "contains", recordName } };
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
		String recycleTab = lp.getTabName(projectName, TabName.RecycleBinTab);
		if (lp.openAppFromAppLauchner(60, recycleTab)) {

			for (String[] row : listViewSheetData) {

				if (lp.addListView(projectName, row, 10)) {
					log(LogStatus.INFO, "list view added on " + row[1], YesNo.No);
					ele = lp.getCheckboxOfRestoreItemOnRecycleBin(projectName, recordName, 30);
					if (clickUsingJavaScript(driver, ele, "Check box against : " + recordName, action.BOOLEAN)) {
						log(LogStatus.INFO, "Click on checkbox for " + recordName, YesNo.No);

						ele = lp.getRestoreButtonOnRecycleBin(projectName, 30);
						if (clickUsingJavaScript(driver, ele, "Restore Button : " + recordName, action.BOOLEAN)) {
							ThreadSleep(10000);
							log(LogStatus.INFO, "Click on Restore Button for " + recordName, YesNo.No);
							sa.assertTrue(true, "Contact has been restore from the Recycle bin");
						} else {

							log(LogStatus.ERROR, "Not Able to Click on Restore Button for " + recordName,
									YesNo.Yes);
							sa.assertTrue(false, "Contact is not restore from the Recycle bin");
						}

					} else {

						log(LogStatus.ERROR, "Not Able to Click on checkbox for " + recordName, YesNo.Yes);
						sa.assertTrue(false, "Not Able to Click on checkbox for " + recordName);
					}
				}

				else {
					log(LogStatus.FAIL, "list view could not added on " + row[1], YesNo.Yes);
					sa.assertTrue(false, "list view could not added on " + row[1]);
				}
			}
		} else {
			log(LogStatus.ERROR, "Not Able to open the Recycle been tab", YesNo.Yes);
			sa.assertTrue(false, "Not Able to open the Recycle been tab");

		}		

		String[][] listViewSheetData1 = { {"User" , "Recycle Bin", "Restore Deal", "Only I can see this list view",
			"My recycle bin", "Record Name", "contains", recordName1 } };

		String recycleTab1 = lp.getTabName(projectName, TabName.RecycleBinTab);
		if (lp.openAppFromAppLauchner(60, recycleTab1)) {

			for (String[] row : listViewSheetData1) {

				if (lp.addListView(projectName, row, 10)) {
					log(LogStatus.INFO, "list view added on " + row[1], YesNo.No);
					ele = lp.getCheckboxOfRestoreItemOnRecycleBin(projectName, recordName1, 30);
					if (clickUsingJavaScript(driver, ele, "Check box against : " + recordName1, action.BOOLEAN)) {
						log(LogStatus.INFO, "Click on checkbox for " + recordName1, YesNo.No);

						ele = lp.getRestoreButtonOnRecycleBin(projectName, 30);
						if (clickUsingJavaScript(driver, ele, "Restore Button : " + recordName1, action.BOOLEAN)) {
							ThreadSleep(10000);
							log(LogStatus.INFO, "Click on Restore Button for " + recordName1, YesNo.No);
							sa.assertTrue(true, "Contact has been restore from the Recycle bin");
						} else {

							log(LogStatus.ERROR, "Not Able to Click on Restore Button for " + recordName1,
									YesNo.Yes);
							sa.assertTrue(false, "Contact is not restore from the Recycle bin");
						}

					} else {

						log(LogStatus.ERROR, "Not Able to Click on checkbox for " + recordName1, YesNo.Yes);
						sa.assertTrue(false, "Not Able to Click on checkbox for " + recordName1);
					}
				}

				else {
					log(LogStatus.FAIL, "list view could not added on " + row[1], YesNo.Yes);
					sa.assertTrue(false, "list view could not added on " + row[1]);
				}
			}
		} else {
			log(LogStatus.ERROR, "Not Able to open the Recycle been tab", YesNo.Yes);
			sa.assertTrue(false, "Not Able to open the Recycle been tab");

		}

		
		String[][] listViewSheetData2 = { {"User" , "Recycle Bin", "Restore Fund", "Only I can see this list view",
			"My recycle bin", "Record Name", "contains", recordName2 } };

		String recycleTab2 = lp.getTabName(projectName, TabName.RecycleBinTab);
		if (lp.openAppFromAppLauchner(60, recycleTab2)) {

			for (String[] row : listViewSheetData2) {

				if (lp.addListView(projectName, row, 10)) {
					log(LogStatus.INFO, "list view added on " + row[1], YesNo.No);
					ele = lp.getCheckboxOfRestoreItemOnRecycleBin(projectName, recordName2, 30);
					if (clickUsingJavaScript(driver, ele, "Check box against : " + recordName2, action.BOOLEAN)) {
						log(LogStatus.INFO, "Click on checkbox for " + recordName2, YesNo.No);

						ele = lp.getRestoreButtonOnRecycleBin(projectName, 30);
						if (clickUsingJavaScript(driver, ele, "Restore Button : " + recordName2, action.BOOLEAN)) {
							ThreadSleep(10000);
							log(LogStatus.INFO, "Click on Restore Button for " + recordName2, YesNo.No);
							sa.assertTrue(true, "Contact has been restore from the Recycle bin");
						} else {

							log(LogStatus.ERROR, "Not Able to Click on Restore Button for " + recordName2,
									YesNo.Yes);
							sa.assertTrue(false, "Contact is not restore from the Recycle bin");
						}

					} else {

						log(LogStatus.ERROR, "Not Able to Click on checkbox for " + recordName2, YesNo.Yes);
						sa.assertTrue(false, "Not Able to Click on checkbox for " + recordName2);
					}
				}

				else {
					log(LogStatus.FAIL, "list view could not added on " + row[1], YesNo.Yes);
					sa.assertTrue(false, "list view could not added on " + row[1]);
				}
			}
		} else {
			log(LogStatus.ERROR, "Not Able to open the Recycle been tab", YesNo.Yes);
			sa.assertTrue(false, "Not Able to open the Recycle been tab");

		}
		
		String[][] listViewSheetData3 = { {"User" , "Recycle Bin", "Restore Fundraising", "Only I can see this list view",
			"My recycle bin", "Record Name", "contains", recordName3 } };

		String recycleTab3 = lp.getTabName(projectName, TabName.RecycleBinTab);
		if (lp.openAppFromAppLauchner(60, recycleTab3)) {

			for (String[] row : listViewSheetData3) {

				if (lp.addListView(projectName, row, 10)) {
					log(LogStatus.INFO, "list view added on " + row[1], YesNo.No);
					ele = lp.getCheckboxOfRestoreItemOnRecycleBin(projectName, recordName3, 30);
					if (clickUsingJavaScript(driver, ele, "Check box against : " + recordName3, action.BOOLEAN)) {
						log(LogStatus.INFO, "Click on checkbox for " + recordName3, YesNo.No);

						ele = lp.getRestoreButtonOnRecycleBin(projectName, 30);
						if (clickUsingJavaScript(driver, ele, "Restore Button : " + recordName3, action.BOOLEAN)) {
							ThreadSleep(10000);
							log(LogStatus.INFO, "Click on Restore Button for " + recordName3, YesNo.No);
							sa.assertTrue(true, "Contact has been restore from the Recycle bin");
						} else {

							log(LogStatus.ERROR, "Not Able to Click on Restore Button for " + recordName3,
									YesNo.Yes);
							sa.assertTrue(false, "Contact is not restore from the Recycle bin");
						}

					} else {

						log(LogStatus.ERROR, "Not Able to Click on checkbox for " + recordName3, YesNo.Yes);
						sa.assertTrue(false, "Not Able to Click on checkbox for " + recordName3);
					}
				}

				else {
					log(LogStatus.FAIL, "list view could not added on " + row[1], YesNo.Yes);
					sa.assertTrue(false, "list view could not added on " + row[1]);
				}
			}
		} else {
			log(LogStatus.ERROR, "Not Able to open the Recycle been tab", YesNo.Yes);
			sa.assertTrue(false, "Not Able to open the Recycle been tab");

		}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc162_VerifyRestoredAccountContactAndDeallFunctionalityAndOnCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord1;
	
		String contactSectionName=ATCE_ConName23;
		String contactSectionTitle=ATCE_ConTitle23;
		String contactSectionDeal=ATCE_ConDeal23;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall23;
		String contactSectionEmail=ATCE_ConEmail23;
		
		String firmTagName=ATCE_TaggedFirmsName81;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount81;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName12;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;
		
		
		
		
		String contactSectionName1=ATCE_ConName22;
		String contactSectionTitle1=ATCE_ConTitle22;
		String contactSectionDeal1=ATCE_ConDeal22;
		String contactSectionMeetingAndCalls1=ATCE_ConMeetingAndCall22;
		String contactSectionEmail1=ATCE_ConEmail22;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName75,ATCE_TaggedFirmsName76,ATCE_TaggedFirmsName77,ATCE_TaggedFirmsName78,ATCE_TaggedFirmsName79,ATCE_TaggedFirmsName80,ATCE_TaggedFirmsName81};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount75,ATCE_TaggedFirmsCount76,ATCE_TaggedFirmsCount77,ATCE_TaggedFirmsCount78,ATCE_TaggedFirmsCount79,ATCE_TaggedFirmsCount80,ATCE_TaggedFirmsCount81};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		String[] dealTaggedName= {ATCE_TaggedDealName11,ATCE_TaggedDealName12};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount11,ATCE_TaggedDealCount12};
		
		
		String[] connectionUserName= {crmUser6FirstName+" "+crmUser6LastName};
		String[] connectionTitle= {ATCE_ConnectionTitle5};
		String[] connectionDeal= {ATCE_ConnectionDeal5};
		String[] connectionMeetingaAndCall= {ATCE_ConnectionMeetingAndCall5};
		String[] connectionEmail= {ATCE_ConnectionEmail5};
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String[] iconType= {ATCE_ATActivityType32};
		String[] date= {ATCE_ATDueDate32};
		String[] subject= {ATCE_ATSubject32};
		String[] notes= {ATCE_ATNote32};
		String[][] participant= {bp.getParticipantData(ATCE_ATParticipants32)};
		String[][] tag= {ATCE_ATTags32.split("<break>")};
		
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.CompaniesTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
			String recordName1=ATCERecord15;
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.CompaniesTab,
						recordName1, 30)) {
					log(LogStatus.INFO, recordName1 + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
						
						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName1, contactSectionTitle1, contactSectionDeal1, contactSectionMeetingAndCalls1, contactSectionEmail1);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName1+" record on Contact section has been verified for "+recordName1, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName1+" record on Contact section is not verified for "+recordName1+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName1+" record on Contact section is not verified for "+recordName1+". "+result4);
						}
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName1, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName1+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName1+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName1+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName1, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName1, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName1+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName1+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName1, 30), "Contact Name: " + contactSectionName1,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName1, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+contactSectionName1, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+contactSectionName1+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+contactSectionName1+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName1,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName1);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName1, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName1);
						}
						
						
			
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
			

		lp.CRMlogout();	
		sa.assertAll();	
	}
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc163_VerifyRestoredAccountContactAndDeallFunctionalityAndOnAdvisorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord5;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName75,ATCE_TaggedFirmsName77,ATCE_TaggedFirmsName78,ATCE_TaggedFirmsName79,ATCE_TaggedFirmsName80,ATCE_TaggedFirmsName81,ATCE_TaggedFirmsName82};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount75,ATCE_TaggedFirmsCount77,ATCE_TaggedFirmsCount78,ATCE_TaggedFirmsCount79,ATCE_TaggedFirmsCount80,ATCE_TaggedFirmsCount81,ATCE_TaggedFirmsCount82};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		String[] dealTaggedName= {ATCE_TaggedDealName11,ATCE_TaggedDealName12};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount11,ATCE_TaggedDealCount12};
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName81;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount81;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName12;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc164_VerifyRestoredAccountContactAndDeallFunctionalityAndOnLenderRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord7;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName75,ATCE_TaggedFirmsName76,ATCE_TaggedFirmsName78,ATCE_TaggedFirmsName79,ATCE_TaggedFirmsName80,ATCE_TaggedFirmsName81,ATCE_TaggedFirmsName82};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount75,ATCE_TaggedFirmsCount76,ATCE_TaggedFirmsCount78,ATCE_TaggedFirmsCount79,ATCE_TaggedFirmsCount80,ATCE_TaggedFirmsCount81,ATCE_TaggedFirmsCount82};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		String[] dealTaggedName= {ATCE_TaggedDealName11,ATCE_TaggedDealName12};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount11,ATCE_TaggedDealCount12};
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName81;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount81;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName12;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc165_VerifyRestoredAccountContactAndDeallFunctionalityAndOnIntermediaryRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord9;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName75,ATCE_TaggedFirmsName76,ATCE_TaggedFirmsName77,ATCE_TaggedFirmsName79,ATCE_TaggedFirmsName80,ATCE_TaggedFirmsName81,ATCE_TaggedFirmsName82};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount75,ATCE_TaggedFirmsCount76,ATCE_TaggedFirmsCount77,ATCE_TaggedFirmsCount79,ATCE_TaggedFirmsCount80,ATCE_TaggedFirmsCount81,ATCE_TaggedFirmsCount82};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		String[] dealTaggedName= {ATCE_TaggedDealName11,ATCE_TaggedDealName12};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount11,ATCE_TaggedDealCount12};
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName81;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount81;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName12;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc166_VerifyRestoredAccountContactAndDeallFunctionalityAndOnInstitutionRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord3;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName76,ATCE_TaggedFirmsName77,ATCE_TaggedFirmsName78,ATCE_TaggedFirmsName79,ATCE_TaggedFirmsName80,ATCE_TaggedFirmsName81,ATCE_TaggedFirmsName82};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount76,ATCE_TaggedFirmsCount77,ATCE_TaggedFirmsCount78,ATCE_TaggedFirmsCount79,ATCE_TaggedFirmsCount80,ATCE_TaggedFirmsCount81,ATCE_TaggedFirmsCount82};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		String[] fundTaggedName= {ATCE_TaggedFundName5,ATCE_TaggedFundName6};
		String[] fundTaggedTimeReference= {ATCE_TaggedFundCount5,ATCE_TaggedFundCount6};
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName81;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount81;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName12;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null, null,true, fundTaggedName,fundTaggedTimeReference);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(true);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc167_VerifyRestoredAccountContactAndDeallFunctionalityAndOnPortfolioCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord11;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName75,ATCE_TaggedFirmsName76,ATCE_TaggedFirmsName77,ATCE_TaggedFirmsName78,ATCE_TaggedFirmsName80,ATCE_TaggedFirmsName81,ATCE_TaggedFirmsName82};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount75,ATCE_TaggedFirmsCount76,ATCE_TaggedFirmsCount77,ATCE_TaggedFirmsCount78,ATCE_TaggedFirmsCount80,ATCE_TaggedFirmsCount81,ATCE_TaggedFirmsCount82};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		String[] dealTaggedName= {ATCE_TaggedDealName11,ATCE_TaggedDealName12};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount11,ATCE_TaggedDealCount12};
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName81;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount81;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName12;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc168_VerifyRestoredAccountContactAndDeallFunctionalityAndOnPrivateEquityRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord13;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName75,ATCE_TaggedFirmsName76,ATCE_TaggedFirmsName77,ATCE_TaggedFirmsName78,ATCE_TaggedFirmsName79,ATCE_TaggedFirmsName81,ATCE_TaggedFirmsName82};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount75,ATCE_TaggedFirmsCount76,ATCE_TaggedFirmsCount77,ATCE_TaggedFirmsCount78,ATCE_TaggedFirmsCount79,ATCE_TaggedFirmsCount81,ATCE_TaggedFirmsCount82};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		String[] dealTaggedName= {ATCE_TaggedDealName11,ATCE_TaggedDealName12};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount11,ATCE_TaggedDealCount12};
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName81;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount81;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName12;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc169_VerifyRestoredAccountContactAndDeallFunctionalityAndOnContactRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Con1;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName84,ATCE_TaggedFirmsName85,ATCE_TaggedFirmsName86,ATCE_TaggedFirmsName87,ATCE_TaggedFirmsName88,ATCE_TaggedFirmsName89,ATCE_TaggedFirmsName83};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount84,ATCE_TaggedFirmsCount85,ATCE_TaggedFirmsCount86,ATCE_TaggedFirmsCount87,ATCE_TaggedFirmsCount88,ATCE_TaggedFirmsCount89,ATCE_TaggedFirmsCount83};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName47};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount47};
				
		String[] dealTaggedName= {ATCE_TaggedDealName12};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount12};
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		
		String firmTagName=ATCE_TaggedFirmsName83;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount83;
		
		String peopleTagName=ATCE_TaggedPeopleName47;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount47;
		
		String dealTagName=ATCE_TaggedDealName12;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj2)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj2, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj2);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc170_VerifyRestoredAccountContactAndDeallFunctionalityAndOnDealRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Deal1;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName90};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount90};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		String[] dealTaggedName= {ATCE_TaggedDealName13};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount11,ATCE_TaggedDealCount13};
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName90;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount90;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName13;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount13;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
		if (lp.clickOnTab(projectName, tabObj4)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
		


						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc171_VerifyRestoredAccountContactAndDeallFunctionalityAndOnFundraisingRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fundraising1;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName90};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount90};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
				
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName90;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount90;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName13;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount12;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

		if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
		

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null, null,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
											
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSectionFormFirmAndPeopleTab();
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+TabName.Fundraising.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+TabName.Fundraising.toString());
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc172_VerifyRestoredAccountContactAndDeallFunctionalityAndOnFundRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fund1;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName90};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount90};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName46};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount46};
		
		String[] dealTaggedName= {ATCE_TaggedDealName13};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount13};		
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		String firmTagName=ATCE_TaggedFirmsName90;
		String firmTagTimeReferenceCount=ATCE_TaggedFirmsCount90;
		
		String peopleTagName=ATCE_TaggedPeopleName46;
		String peopleTagTimeReferenceCount=ATCE_TaggedPeopleCount46;
		
		String dealTagName=ATCE_TaggedDealName13;
		String dealTagTimeReferenceCount=ATCE_TaggedDealCount13;
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
		if (lp.clickOnTab(projectName, tabObj3)) {

			log(LogStatus.INFO, "Clicked on Tab : " +tabObj3, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
		

						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,false, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Firms", firmTagName, firmTagTimeReferenceCount,30), firmTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+firmTagName,YesNo.No);

								ArrayList<String> result=bp.verifyRecordsonInteractionsViewAllPopup(firmTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+firmTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+firmTagName+" record " +result, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+firmTagName+" record "+result);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+firmTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+firmTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Firms tab name");
						}
			
						
						
						if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on people Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

								ArrayList<String> result1=bp.verifyRecordsonInteractionsViewAllPopup(peopleTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result1.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+peopleTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+peopleTagName+" record " +result1, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+peopleTagName+" record "+result1);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on People tab name");
						}
						
												
						if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
							if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on deal Tagged",action.SCROLLANDBOOLEAN)) {
								log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

								ArrayList<String> result3=bp.verifyRecordsonInteractionsViewAllPopup(dealTagName, iconType1, date1, subject1, notes1, subject1,participant1, tag1);
								if(result3.isEmpty())
								{
									log(LogStatus.INFO, "All records on Interaction card have been verified for "+dealTagName+" record", YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "All records on Interaction card are not verified for "+dealTagName+" record " +result3, YesNo.No);
									sa.assertTrue(false,  "All records on Interaction card are not verified for "+dealTagName+" record "+result3);
								}
							
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
							}
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
							sa.assertTrue(false,  "Not able to click on Deals tab name");
						}
						
						
						
						ArrayList<String> result10=bp.verifyDefaultSortingOfReferencedTypeOnTaggedSection(false);
						if(result10.isEmpty())
						{
							log(LogStatus.INFO, "Default decending order of times referenced count have been verified on tagged section", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Default decending order of times referenced count are not verified on tagged section. "+result10, YesNo.No);
							sa.assertTrue(false, "Default decending order of times referenced count are not verified on tagged section. "+result10);
						}
						
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj3, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj3);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc173_VerifyRestoredAccountContactAndDeallFunctionalityAndOnThemeRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Theme1;
	

	
		
		String[] iconType1= {ATCE_ATActivityType32,ATCE_ATActivityType33};
		String[] date1= {ATCE_ATDueDate32,ATCE_ATDueDate33};
		String[] subject1= {ATCE_ATSubject32,ATCE_ATSubject33};
		String[] notes1= {ATCE_ATNote32,ATCE_ATNote33};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants32),bp.getParticipantData(ATCE_ATParticipants33)};
		String[][] tag1= {ATCE_ATTags32.split("<break>"),ATCE_ATTags33.split("<break>")};
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

		if (lp.clickOnTab(projectName, TabName.Themes.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : "+TabName.Themes.toString(), YesNo.No);

			String parentWindowID=bp.clickOnThemeRecord(recordName);

			if (parentWindowID!=null) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			driver.close();
			driver.switchTo().window(parentWindowID);
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+TabName.Themes.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+TabName.Themes.toString());
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	


	@Parameters({ "projectName" })
	@Test
	public void ATCETc174_CreateATaskAndLogACallWhenOnlyDealisConnectedWithFirm(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		
		String activityType=ATCE_ATActivityType34;
		String taskSubject=ATCE_ATSubject34;
		String taskRelatedTo=ATCE_ATRelatedTo34;
		String taskNotes=ATCE_ATNote34;
		String taskStatus=ATCE_AdvanceStatus18;
		String taskPriority=ATCE_AdvancePriority18;	
		String dueDateDay=ATCE_ATDay34;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_034", excelLabel.Advance_Due_Date);
		
		String activityType1=ATCE_ATActivityType35;
		String taskSubject1=ATCE_ATSubject35;
		String taskRelatedTo1=ATCE_ATRelatedTo35;
		String taskNotes1=ATCE_ATNote35;	
		String dueDateDay1=ATCE_ATDay35;
		String taskDueDate1 = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay1));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate1, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_035", excelLabel.Advance_Due_Date);
	
		
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority}};
		
		String[][] basicsection1 = { { "Subject", taskSubject1 }, { "Notes", taskNotes1 }, { "Related_To", taskRelatedTo1 } };
		String[][] advanceSection1 = { { "Date", taskDueDate1 }};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (bp.createActivityTimeline(projectName, true, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
			log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
			sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

		}
		else
		{
			log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
			sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
		}	 
		
		if (bp.createActivityTimeline(projectName, true, activityType1, basicsection1, advanceSection1, null, null, false, null, null,null, null,null,null)) {
			log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject1, YesNo.No);
			sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject1);

		}
		else
		{
			log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject1, YesNo.No);
			sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject1);
		}	 

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc175_VerifyTaskAndCallWithFirmDealAndFundMappingOnCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord1;	
	
		String[] firmsTaggedName= {ATCE_TaggedFirmsName91,ATCE_TaggedFirmsName92,ATCE_TaggedFirmsName93,ATCE_TaggedFirmsName94,ATCE_TaggedFirmsName95,ATCE_TaggedFirmsName96};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount91,ATCE_TaggedFirmsCount92,ATCE_TaggedFirmsCount93,ATCE_TaggedFirmsCount94,ATCE_TaggedFirmsCount95,ATCE_TaggedFirmsCount96};

		String[] peopleTaggedName= null;
		String[] peopleTaggedTimeReference=null;
				
		String[] dealTaggedName= {ATCE_TaggedDealName14};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount14};
		
		String[] iconType1= {ATCE_ATActivityType34,ATCE_ATActivityType35};
		String[] date1= {ATCE_ATDueDate34,ATCE_ATDueDate35};
		String[] subject1= {ATCE_ATSubject34,ATCE_ATSubject35};
		String[] notes1= {ATCE_ATNote34,ATCE_ATNote35};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants34),bp.getParticipantData(ATCE_ATParticipants35)};
		String[][] tag1= {ATCE_ATTags34.split("<break>"),ATCE_ATTags35.split("<break>")};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.CompaniesTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
			

		lp.CRMlogout();	
		sa.assertAll();	
	}
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc176_VerifyTaskAndCallWithFirmDealAndFundMappingOnAdvisorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord5;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName91,ATCE_TaggedFirmsName93,ATCE_TaggedFirmsName94,ATCE_TaggedFirmsName95,ATCE_TaggedFirmsName96,ATCE_TaggedFirmsName97};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount91,ATCE_TaggedFirmsCount93,ATCE_TaggedFirmsCount94,ATCE_TaggedFirmsCount95,ATCE_TaggedFirmsCount96,ATCE_TaggedFirmsCount97};

		String[] peopleTaggedName= null;
		String[] peopleTaggedTimeReference=null;
				
		String[] dealTaggedName= {ATCE_TaggedDealName14};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount14};
		
		String[] iconType1= {ATCE_ATActivityType34,ATCE_ATActivityType35};
		String[] date1= {ATCE_ATDueDate34,ATCE_ATDueDate35};
		String[] subject1= {ATCE_ATSubject34,ATCE_ATSubject35};
		String[] notes1= {ATCE_ATNote34,ATCE_ATNote35};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants34),bp.getParticipantData(ATCE_ATParticipants35)};
		String[][] tag1= {ATCE_ATTags34.split("<break>"),ATCE_ATTags35.split("<break>")};
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc177_VerifyTaskAndCallWithFirmDealAndFundMappingOnLenderRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord7;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName91,ATCE_TaggedFirmsName92,ATCE_TaggedFirmsName94,ATCE_TaggedFirmsName95,ATCE_TaggedFirmsName96,ATCE_TaggedFirmsName97};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount91,ATCE_TaggedFirmsCount92,ATCE_TaggedFirmsCount94,ATCE_TaggedFirmsCount95,ATCE_TaggedFirmsCount96,ATCE_TaggedFirmsCount97};

		String[] peopleTaggedName= null;
		String[] peopleTaggedTimeReference=null;
				
		String[] dealTaggedName= {ATCE_TaggedDealName14};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount14};
		
		String[] iconType1= {ATCE_ATActivityType34,ATCE_ATActivityType35};
		String[] date1= {ATCE_ATDueDate34,ATCE_ATDueDate35};
		String[] subject1= {ATCE_ATSubject34,ATCE_ATSubject35};
		String[] notes1= {ATCE_ATNote34,ATCE_ATNote35};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants34),bp.getParticipantData(ATCE_ATParticipants35)};
		String[][] tag1= {ATCE_ATTags34.split("<break>"),ATCE_ATTags35.split("<break>")};
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc178_VerifyTaskAndCallWithFirmDealAndFundMappingOnIntermediaryRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord9;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName91,ATCE_TaggedFirmsName92,ATCE_TaggedFirmsName93,ATCE_TaggedFirmsName95,ATCE_TaggedFirmsName96,ATCE_TaggedFirmsName97};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount91,ATCE_TaggedFirmsCount92,ATCE_TaggedFirmsCount93,ATCE_TaggedFirmsCount95,ATCE_TaggedFirmsCount96,ATCE_TaggedFirmsCount97};

		String[] peopleTaggedName= null;
		String[] peopleTaggedTimeReference=null;
				
		String[] dealTaggedName= {ATCE_TaggedDealName14};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount14};
		
		String[] iconType1= {ATCE_ATActivityType34,ATCE_ATActivityType35};
		String[] date1= {ATCE_ATDueDate34,ATCE_ATDueDate35};
		String[] subject1= {ATCE_ATSubject34,ATCE_ATSubject35};
		String[] notes1= {ATCE_ATNote34,ATCE_ATNote35};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants34),bp.getParticipantData(ATCE_ATParticipants35)};
		String[][] tag1= {ATCE_ATTags34.split("<break>"),ATCE_ATTags35.split("<break>")};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc179_VerifyTaskAndCallWithFirmDealAndFundMappingOnInstitutionRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord3;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName92,ATCE_TaggedFirmsName93,ATCE_TaggedFirmsName94,ATCE_TaggedFirmsName95,ATCE_TaggedFirmsName96,ATCE_TaggedFirmsName97};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount92,ATCE_TaggedFirmsCount93,ATCE_TaggedFirmsCount94,ATCE_TaggedFirmsCount95,ATCE_TaggedFirmsCount96,ATCE_TaggedFirmsCount97};

		String[] peopleTaggedName= null;
		String[] peopleTaggedTimeReference=null;
				
		String[] fundTaggedName= {ATCE_TaggedFundName7};
		String[] fundTaggedTimeReference= {ATCE_TaggedFundCount7};
		
		String[] iconType1= {ATCE_ATActivityType34,ATCE_ATActivityType35};
		String[] date1= {ATCE_ATDueDate34,ATCE_ATDueDate35};
		String[] subject1= {ATCE_ATSubject34,ATCE_ATSubject35};
		String[] notes1= {ATCE_ATNote34,ATCE_ATNote35};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants34),bp.getParticipantData(ATCE_ATParticipants35)};
		String[][] tag1= {ATCE_ATTags34.split("<break>"),ATCE_ATTags35.split("<break>")};
			
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, null, null ,true, fundTaggedName, fundTaggedTimeReference);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc180_VerifyTaskAndCallWithFirmDealAndFundMappingOnPortfolioCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord11;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName91,ATCE_TaggedFirmsName92,ATCE_TaggedFirmsName93,ATCE_TaggedFirmsName94,ATCE_TaggedFirmsName96,ATCE_TaggedFirmsName97};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount91,ATCE_TaggedFirmsCount92,ATCE_TaggedFirmsCount93,ATCE_TaggedFirmsCount94,ATCE_TaggedFirmsCount96,ATCE_TaggedFirmsCount97};

		String[] peopleTaggedName= null;
		String[] peopleTaggedTimeReference=null;
				
		String[] dealTaggedName= {ATCE_TaggedDealName14};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount14};
		
		String[] iconType1= {ATCE_ATActivityType34,ATCE_ATActivityType35};
		String[] date1= {ATCE_ATDueDate34,ATCE_ATDueDate35};
		String[] subject1= {ATCE_ATSubject34,ATCE_ATSubject35};
		String[] notes1= {ATCE_ATNote34,ATCE_ATNote35};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants34),bp.getParticipantData(ATCE_ATParticipants35)};
		String[][] tag1= {ATCE_ATTags34.split("<break>"),ATCE_ATTags35.split("<break>")};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc181_VerifyTaskAndCallWithFirmDealAndFundMappingOnPrivateEquityRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord13;
	
		String[] firmsTaggedName= {ATCE_TaggedFirmsName91,ATCE_TaggedFirmsName92,ATCE_TaggedFirmsName93,ATCE_TaggedFirmsName94,ATCE_TaggedFirmsName95,ATCE_TaggedFirmsName97};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount91,ATCE_TaggedFirmsCount92,ATCE_TaggedFirmsCount93,ATCE_TaggedFirmsCount94,ATCE_TaggedFirmsCount95,ATCE_TaggedFirmsCount97};

		String[] peopleTaggedName= null;
		String[] peopleTaggedTimeReference=null;
				
		String[] dealTaggedName= {ATCE_TaggedDealName14};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount14};
		
		String[] iconType1= {ATCE_ATActivityType34,ATCE_ATActivityType35};
		String[] date1= {ATCE_ATDueDate34,ATCE_ATDueDate35};
		String[] subject1= {ATCE_ATSubject34,ATCE_ATSubject35};
		String[] notes1= {ATCE_ATNote34,ATCE_ATNote35};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants34),bp.getParticipantData(ATCE_ATParticipants35)};
		String[][] tag1= {ATCE_ATTags34.split("<break>"),ATCE_ATTags35.split("<break>")};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc182_VerifyTaskAndCallWithFirmDealAndFundMappingOnDealRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Deal1;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName75,ATCE_TaggedFirmsName76,ATCE_TaggedFirmsName77,ATCE_TaggedFirmsName78,ATCE_TaggedFirmsName79,ATCE_TaggedFirmsName80};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount75,ATCE_TaggedFirmsCount76,ATCE_TaggedFirmsCount77,ATCE_TaggedFirmsCount78,ATCE_TaggedFirmsCount79,ATCE_TaggedFirmsCount80};

		String[] peopleTaggedName= null;
		String[] peopleTaggedTimeReference=null;
				
		String[] dealTaggedName= null;
		String[] dealTaggedTimeReference= null;
		
		String[] iconType1= {ATCE_ATActivityType34,ATCE_ATActivityType35};
		String[] date1= {ATCE_ATDueDate34,ATCE_ATDueDate35};
		String[] subject1= {ATCE_ATSubject34,ATCE_ATSubject35};
		String[] notes1= {ATCE_ATNote34,ATCE_ATNote35};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants34),bp.getParticipantData(ATCE_ATParticipants35)};
		String[][] tag1= {ATCE_ATTags34.split("<break>"),ATCE_ATTags35.split("<break>")};
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
		if (lp.clickOnTab(projectName, tabObj4)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
		

					
					ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
					if(result5.isEmpty())
					{
						log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
						sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
					}
					
					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
						if(result2.isEmpty())
						{
							log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
							sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	
					
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc183_VerifyTaskAndCallWithFirmDealAndFundMappingOnOnFundRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fund1;
	

		String[] firmsTaggedName= {ATCE_TaggedFirmsName75,ATCE_TaggedFirmsName76,ATCE_TaggedFirmsName77,ATCE_TaggedFirmsName78,ATCE_TaggedFirmsName79,ATCE_TaggedFirmsName80,ATCE_TaggedFirmsName82};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount75,ATCE_TaggedFirmsCount76,ATCE_TaggedFirmsCount77,ATCE_TaggedFirmsCount78,ATCE_TaggedFirmsCount79,ATCE_TaggedFirmsCount80,ATCE_TaggedFirmsCount82};

		String[] peopleTaggedName= null;
		String[] peopleTaggedTimeReference=null;
				
		String[] dealTaggedName= {ATCE_TaggedDealName14};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount14};
		
		String[] iconType1= {ATCE_ATActivityType34,ATCE_ATActivityType35};
		String[] date1= {ATCE_ATDueDate34,ATCE_ATDueDate35};
		String[] subject1= {ATCE_ATSubject34,ATCE_ATSubject35};
		String[] notes1= {ATCE_ATNote34,ATCE_ATNote35};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants34),bp.getParticipantData(ATCE_ATParticipants35)};
		String[][] tag1= {ATCE_ATTags34.split("<break>"),ATCE_ATTags35.split("<break>")};
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
		if (lp.clickOnTab(projectName, tabObj3)) {

			log(LogStatus.INFO, "Clicked on Tab : " +tabObj3, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
		
					
					ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
					if(result5.isEmpty())
					{
						log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
						sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
					}
					
					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
						if(result2.isEmpty())
						{
							log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
							sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	
					
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj3, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj3);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc184_CreateANewEvent(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		GlobalActionPageBusinessLayer gp = new GlobalActionPageBusinessLayer(driver);
		HomePageBusineesLayer home = new HomePageBusineesLayer(driver);
		
		
		String eventSubject=ATCE_ATSubject36;
		String eventContact=ATCE_ATRelatedTo36.split("<break>")[0];
		String eventRelatedTo=ATCE_ATRelatedTo36;
		String eventNotes=ATCE_ATNote36;
		
		String eventStartDay=ATCE_ATDay36;
		String eventStartDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(eventStartDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, eventStartDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_036", excelLabel.Advance_Start_Date);
		
		String eventEndDay=ATCE_EndDay1;
		String eventEndDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(eventEndDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, eventEndDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_036", excelLabel.Advance_End_Date);
		
		
		String[][] Event2 = {{PageLabel.Name.toString(),eventContact},
				{PageLabel.Start_Date.toString(),eventStartDate},
				{PageLabel.End_Date.toString(),eventEndDate},
				{PageLabel.Subject.toString(),eventSubject}};
		
		String[][] basicsection = { { "Notes", eventNotes }, { "Related_To", eventRelatedTo }};
		String task1SubjectNameNavigation=ATCE_ATSubject36;
	

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
			
		if (lp.clickAnyCellonCalender(projectName)) {
			log(LogStatus.INFO,"Able to click on Calendar/Event Link",YesNo.No);
			if(gp.enterValueForNewEvent(projectName, GlobalActionItem.New_Event, Event2, 10))
			{
				log(LogStatus.INFO,"The values are entered in Event popup",YesNo.No);
				if(clickUsingJavaScript(driver, gp.getSaveBtnOfEventPopup( totalDealsshown), "save button"))
				{
					log(LogStatus.INFO,"Clicked on save button of Event popu",YesNo.No);
					ThreadSleep(8000);
					refresh(driver);
				}
				else
				{
					log(LogStatus.ERROR,"Not able to clicked on save button of Event popu",YesNo.No);
					sa.assertTrue(false, "Not able to clicked on save button of Event popu");
				}
			}
			else
			{
				log(LogStatus.ERROR,"The values are not entered in Event popup",YesNo.No);
				sa.assertTrue(false, "The values are not entered in Event popup");
			}
			
			
		}
		else
		{
			log(LogStatus.ERROR,"Able to click on Calendar/Event Link",YesNo.No);
			sa.assertTrue(false, "Not Able to click on Calendar/Event Link");
		}
		
		if (home.globalSearchAndNavigate(task1SubjectNameNavigation, "Events", false)) {

			log(LogStatus.INFO, "-----Verified Task named: " + task1SubjectNameNavigation + " found in Tasks Object-----",YesNo.No);
			
			if(CommonLib.clickUsingJavaScript(driver, bp.getEditButtonOnEventDetailsPage( 20), "Edit button of "+task1SubjectNameNavigation))
			{
				log(LogStatus.INFO,"Clicked on edit button of subject "+task1SubjectNameNavigation,YesNo.No);
				

				if (bp.updateActivityTimelineRecordForMultipleFollowUpTasks(projectName, basicsection,null, null, null, null,false,false)) {
					log(LogStatus.PASS, "Event has been created, Subject name : "+eventSubject, YesNo.No);
					sa.assertTrue(true, "Event has been created,  Subject name : "+eventSubject);

				}
				else
				{
					log(LogStatus.ERROR, "Event is not created, Subject name : "+eventSubject, YesNo.No);
					sa.assertTrue(false, "Event is not created,  Subject name : "+eventSubject);
				}	 				
			}
			else
			{
				log(LogStatus.ERROR,"Not able to click on edit button of subject "+task1SubjectNameNavigation,YesNo.No);
				BaseLib.sa.assertTrue(false,"Not able to click on edit button of subject "+task1SubjectNameNavigation);
				
			}			
		}
		 else {

				log(LogStatus.ERROR, "-----Task named: " + task1SubjectNameNavigation + " not found in Tasks Object-----",YesNo.Yes);
				BaseLib.sa.assertTrue(false,"-----Task named: " + task1SubjectNameNavigation + " not found in Tasks Object-----");

			}
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc185_VerifyEventOnCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord1;
	
		String contactSectionName=ATCE_ConName24;
		String contactSectionTitle=ATCE_ConTitle24;
		String contactSectionDeal=ATCE_ConDeal24;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall24;
		String contactSectionEmail=ATCE_ConEmail24;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName98,ATCE_TaggedFirmsName99,ATCE_TaggedFirmsName100,ATCE_TaggedFirmsName101,ATCE_TaggedFirmsName102};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount98,ATCE_TaggedFirmsCount99,ATCE_TaggedFirmsCount100,ATCE_TaggedFirmsCount101,ATCE_TaggedFirmsCount102};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName49,ATCE_TaggedPeopleName50,ATCE_TaggedPeopleName51,ATCE_TaggedPeopleName52,ATCE_TaggedPeopleName53,ATCE_TaggedPeopleName54};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount49,ATCE_TaggedPeopleCount50,ATCE_TaggedPeopleCount51,ATCE_TaggedPeopleCount52,ATCE_TaggedPeopleCount53,ATCE_TaggedPeopleCount54};
				
		String[] dealTaggedName= {ATCE_TaggedDealName15};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount15};
	
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle6;
		String connectionDeal=ATCE_ConnectionDeal6;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall6;
		String connectionEmail=ATCE_ConnectionEmail2;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String iconType= ATCE_ATActivityType36;
		String date= ATCE_ATDueDate36;
		String subject= ATCE_ATSubject36;
		String notes= ATCE_ATNote36;
		String[] participant= bp.getParticipantData(ATCE_ATParticipants36);
		String[] tag= ATCE_ATTags36.split("<break>");
		
		String[] iconType1= {ATCE_ATActivityType36};
		String[] date1= {ATCE_ATDueDate36};
		String[] subject1= {ATCE_ATSubject36};
		String[] notes1= {ATCE_ATNote36};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants36)};
		String[][] tag1= {ATCE_ATTags36.split("<break>")};
		
		
	
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.CompaniesTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc186_VerifyEventOnAdvisorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord5;
	

		String contactSectionName=ATCE_ConName25;
		String contactSectionTitle=ATCE_ConTitle25;
		String contactSectionDeal=ATCE_ConDeal25;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall25;
		String contactSectionEmail=ATCE_ConEmail25;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName98,ATCE_TaggedFirmsName100,ATCE_TaggedFirmsName101,ATCE_TaggedFirmsName102,ATCE_TaggedFirmsName103,ATCE_TaggedFirmsName104};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount98,ATCE_TaggedFirmsCount100,ATCE_TaggedFirmsCount101,ATCE_TaggedFirmsCount102,ATCE_TaggedFirmsCount103,ATCE_TaggedFirmsCount104};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName49,ATCE_TaggedPeopleName50,ATCE_TaggedPeopleName51,ATCE_TaggedPeopleName53,ATCE_TaggedPeopleName54,ATCE_TaggedPeopleName55,ATCE_TaggedPeopleName56};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount49,ATCE_TaggedPeopleCount50,ATCE_TaggedPeopleCount51,ATCE_TaggedPeopleCount53,ATCE_TaggedPeopleCount54,ATCE_TaggedPeopleCount55,ATCE_TaggedPeopleCount56};
				
		String[] dealTaggedName= {ATCE_TaggedDealName15};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount15};
	
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle7;
		String connectionDeal=ATCE_ConnectionDeal7;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall7;
		String connectionEmail=ATCE_ConnectionEmail7;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String iconType= ATCE_ATActivityType36;
		String date= ATCE_ATDueDate36;
		String subject= ATCE_ATSubject36;
		String notes= ATCE_ATNote36;
		String[] participant= bp.getParticipantData(ATCE_ATParticipants36);
		String[] tag= ATCE_ATTags36.split("<break>");
		
		String[] iconType1= {ATCE_ATActivityType36};
		String[] date1= {ATCE_ATDueDate36};
		String[] subject1= {ATCE_ATSubject36};
		String[] notes1= {ATCE_ATNote36};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants36)};
		String[][] tag1= {ATCE_ATTags36.split("<break>")};
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc187_VerifyEventOnLenderRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord7;
	
		String contactSectionName=ATCE_ConName26;
		String contactSectionTitle=ATCE_ConTitle26;
		String contactSectionDeal=ATCE_ConDeal26;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall26;
		String contactSectionEmail=ATCE_ConEmail26;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName98,ATCE_TaggedFirmsName99,ATCE_TaggedFirmsName101,ATCE_TaggedFirmsName102,ATCE_TaggedFirmsName103,ATCE_TaggedFirmsName104};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount98,ATCE_TaggedFirmsCount99,ATCE_TaggedFirmsCount101,ATCE_TaggedFirmsCount102,ATCE_TaggedFirmsCount103,ATCE_TaggedFirmsCount104};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName49,ATCE_TaggedPeopleName51,ATCE_TaggedPeopleName52,ATCE_TaggedPeopleName53,ATCE_TaggedPeopleName54,ATCE_TaggedPeopleName55};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount49,ATCE_TaggedPeopleCount51,ATCE_TaggedPeopleCount52,ATCE_TaggedPeopleCount53,ATCE_TaggedPeopleCount54,ATCE_TaggedPeopleCount55};
					
		String[] dealTaggedName= {ATCE_TaggedDealName15};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount15};
	
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle8;
		String connectionDeal=ATCE_ConnectionDeal8;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall8;
		String connectionEmail=ATCE_ConnectionEmail8;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String iconType= ATCE_ATActivityType36;
		String date= ATCE_ATDueDate36;
		String subject= ATCE_ATSubject36;
		String notes= ATCE_ATNote36;
		String[] participant= bp.getParticipantData(ATCE_ATParticipants36);
		String[] tag= ATCE_ATTags36.split("<break>");
		
		String[] iconType1= {ATCE_ATActivityType36};
		String[] date1= {ATCE_ATDueDate36};
		String[] subject1= {ATCE_ATSubject36};
		String[] notes1= {ATCE_ATNote36};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants36)};
		String[][] tag1= {ATCE_ATTags36.split("<break>")};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc188_VerifyEventOnIntermediaryRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord9;
	
		String contactSectionName=ATCE_ConName27;
		String contactSectionTitle=ATCE_ConTitle27;
		String contactSectionDeal=ATCE_ConDeal27;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall27;
		String contactSectionEmail=ATCE_ConEmail27;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName98,ATCE_TaggedFirmsName99,ATCE_TaggedFirmsName100,ATCE_TaggedFirmsName102,ATCE_TaggedFirmsName103,ATCE_TaggedFirmsName104};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount98,ATCE_TaggedFirmsCount99,ATCE_TaggedFirmsCount100,ATCE_TaggedFirmsCount102,ATCE_TaggedFirmsCount103,ATCE_TaggedFirmsCount104};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName49,ATCE_TaggedPeopleName50,ATCE_TaggedPeopleName52,ATCE_TaggedPeopleName53,ATCE_TaggedPeopleName54};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount49,ATCE_TaggedPeopleCount50,ATCE_TaggedPeopleCount52,ATCE_TaggedPeopleCount53,ATCE_TaggedPeopleCount54};
				
		String[] dealTaggedName= {ATCE_TaggedDealName15};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount15};
	
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle8;
		String connectionDeal=ATCE_ConnectionDeal8;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall8;
		String connectionEmail=ATCE_ConnectionEmail8;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String iconType= ATCE_ATActivityType36;
		String date= ATCE_ATDueDate36;
		String subject= ATCE_ATSubject36;
		String notes= ATCE_ATNote36;
		String[] participant= bp.getParticipantData(ATCE_ATParticipants36);
		String[] tag= ATCE_ATTags36.split("<break>");
		
		String[] iconType1= {ATCE_ATActivityType36};
		String[] date1= {ATCE_ATDueDate36};
		String[] subject1= {ATCE_ATSubject36};
		String[] notes1= {ATCE_ATNote36};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants36)};
		String[][] tag1= {ATCE_ATTags36.split("<break>")};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			

						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc189_VerifyEventOnInstitutionRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord3;
	
		String contactSectionName=ATCE_ConName28;
		String contactSectionTitle=ATCE_ConTitle28;
		String contactSectionDeal=ATCE_ConDeal28;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall28;
		String contactSectionEmail=ATCE_ConEmail28;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName99,ATCE_TaggedFirmsName100,ATCE_TaggedFirmsName101,ATCE_TaggedFirmsName102,ATCE_TaggedFirmsName103,ATCE_TaggedFirmsName104};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount99,ATCE_TaggedFirmsCount100,ATCE_TaggedFirmsCount101,ATCE_TaggedFirmsCount102,ATCE_TaggedFirmsCount103,ATCE_TaggedFirmsCount104};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName50,ATCE_TaggedPeopleName51,ATCE_TaggedPeopleName52,ATCE_TaggedPeopleName53,ATCE_TaggedPeopleName54,ATCE_TaggedPeopleName55};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount50,ATCE_TaggedPeopleCount51,ATCE_TaggedPeopleCount52,ATCE_TaggedPeopleCount53,ATCE_TaggedPeopleCount54,ATCE_TaggedPeopleCount55};
				
		String[] fundTaggedName= {ATCE_TaggedFundName8};
		String[] fundTaggedTimeReference= {ATCE_TaggedFundCount8};
	
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle8;
		String connectionDeal=ATCE_ConnectionDeal8;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall8;
		String connectionEmail=ATCE_ConnectionEmail8;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String iconType= ATCE_ATActivityType36;
		String date= ATCE_ATDueDate36;
		String subject= ATCE_ATSubject36;
		String notes= ATCE_ATNote36;
		String[] participant= bp.getParticipantData(ATCE_ATParticipants36);
		String[] tag= ATCE_ATTags36.split("<break>");
		
		String[] iconType1= {ATCE_ATActivityType36};
		String[] date1= {ATCE_ATDueDate36};
		String[] subject1= {ATCE_ATSubject36};
		String[] notes1= {ATCE_ATNote36};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants36)};
		String[][] tag1= {ATCE_ATTags36.split("<break>")};
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
						
						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference,null,null,true,fundTaggedName, fundTaggedTimeReference);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc190_VerifyEventOnPortfolioCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord11;
	
		String contactSectionName=ATCE_ConName29;
		String contactSectionTitle=ATCE_ConTitle29;
		String contactSectionDeal=ATCE_ConDeal29;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall29;
		String contactSectionEmail=ATCE_ConEmail29;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName98,ATCE_TaggedFirmsName99,ATCE_TaggedFirmsName100,ATCE_TaggedFirmsName101,ATCE_TaggedFirmsName103,ATCE_TaggedFirmsName104};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount99,ATCE_TaggedFirmsCount99,ATCE_TaggedFirmsCount100,ATCE_TaggedFirmsCount101,ATCE_TaggedFirmsCount103,ATCE_TaggedFirmsCount104};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName49,ATCE_TaggedPeopleName50,ATCE_TaggedPeopleName51,ATCE_TaggedPeopleName52,ATCE_TaggedPeopleName54,ATCE_TaggedPeopleName55};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount49,ATCE_TaggedPeopleCount50,ATCE_TaggedPeopleCount51,ATCE_TaggedPeopleCount52,ATCE_TaggedPeopleCount54,ATCE_TaggedPeopleCount55};
				
		String[] dealTaggedName= {ATCE_TaggedDealName15};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount15};
	
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle7;
		String connectionDeal=ATCE_ConnectionDeal7;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall7;
		String connectionEmail=ATCE_ConnectionEmail7;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String iconType= ATCE_ATActivityType36;
		String date= ATCE_ATDueDate36;
		String subject= ATCE_ATSubject36;
		String notes= ATCE_ATNote36;
		String[] participant= bp.getParticipantData(ATCE_ATParticipants36);
		String[] tag= ATCE_ATTags36.split("<break>");
		
		String[] iconType1= {ATCE_ATActivityType36};
		String[] date1= {ATCE_ATDueDate36};
		String[] subject1= {ATCE_ATSubject36};
		String[] notes1= {ATCE_ATNote36};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants36)};
		String[][] tag1= {ATCE_ATTags36.split("<break>")};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			
						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc191_VerifyEventOnPrivateEquityRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCERecord13;
		String contactSectionName=ATCE_ConName30;
		String contactSectionTitle=ATCE_ConTitle30;
		String contactSectionDeal=ATCE_ConDeal30;
		String contactSectionMeetingAndCalls=ATCE_ConMeetingAndCall30;
		String contactSectionEmail=ATCE_ConEmail30;

		String[] firmsTaggedName= {ATCE_TaggedFirmsName98,ATCE_TaggedFirmsName99,ATCE_TaggedFirmsName100,ATCE_TaggedFirmsName101,ATCE_TaggedFirmsName102,ATCE_TaggedFirmsName104};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount99,ATCE_TaggedFirmsCount99,ATCE_TaggedFirmsCount100,ATCE_TaggedFirmsCount101,ATCE_TaggedFirmsCount102,ATCE_TaggedFirmsCount104};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName49,ATCE_TaggedPeopleName50,ATCE_TaggedPeopleName51,ATCE_TaggedPeopleName52,ATCE_TaggedPeopleName53,ATCE_TaggedPeopleName55};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount49,ATCE_TaggedPeopleCount50,ATCE_TaggedPeopleCount51,ATCE_TaggedPeopleCount52,ATCE_TaggedPeopleCount53,ATCE_TaggedPeopleCount55};
				
				
		String[] dealTaggedName= {ATCE_TaggedDealName15};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount15};
	
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle7;
		String connectionDeal=ATCE_ConnectionDeal7;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall7;
		String connectionEmail=ATCE_ConnectionEmail7;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String iconType= ATCE_ATActivityType36;
		String date= ATCE_ATDueDate36;
		String subject= ATCE_ATSubject36;
		String notes= ATCE_ATNote36;
		String[] participant= bp.getParticipantData(ATCE_ATParticipants36);
		String[] tag= ATCE_ATTags36.split("<break>");
		
		String[] iconType1= {ATCE_ATActivityType36};
		String[] date1= {ATCE_ATDueDate36};
		String[] subject1= {ATCE_ATSubject36};
		String[] notes1= {ATCE_ATNote36};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants36)};
		String[][] tag1= {ATCE_ATTags36.split("<break>")};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
			if (lp.clickOnTab(projectName, tabObj1)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			
						ArrayList<String> result4=bp.verifyRecordOnContactSectionAcuity(contactSectionName, contactSectionTitle, contactSectionDeal, contactSectionMeetingAndCalls, contactSectionEmail);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, contactSectionName+" record on Contact section has been verified for "+recordName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4, YesNo.No);
							sa.assertTrue(false, contactSectionName+" record on Contact section is not verified for "+recordName+". "+result4);
						}
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(contactSectionName, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+contactSectionName+" record on contact section",YesNo.No);
							
							ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result6.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+contactSectionName+" record on contact section");
						}
						
						
						ArrayList<String> result7=bp.verifyRecordOnConnectionsPopUpOfContactInAcuity(contactSectionName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);
						if(result7.isEmpty())
						{
							log(LogStatus.INFO, "The records on Connection popup have been verified for "+contactSectionName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records on Connection popup are not verified for "+contactSectionName+". "+result7 , YesNo.No);
							sa.assertTrue(false, "The records on Connection popup are not verified for "+contactSectionName+". "+result7);
						}
						
						if (CommonLib.clickUsingJavaScript(driver, bp.contactNameUserIconButton(contactSectionName, 30), "Contact Name: " + contactSectionName,
								action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on connection icon of contact : " + contactSectionName, YesNo.No);
							String parentID=switchOnWindow(driver);
							if(CommonLib.clickUsingJavaScript(driver, bp.getMeetingAndCallCount(userName1, 20),"Count of "+userName1+" on contact section" , action.SCROLLANDBOOLEAN))
							{
								log(LogStatus.INFO, "clicked on count of "+userName1,YesNo.No);
								ArrayList<String> result6=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType, date, subject, notes, participant, tag);
								if(result6.isEmpty())
								{
									log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+recordName, YesNo.No);
								}
								else
								{
									log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+recordName+". "+result6, YesNo.No);
									sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+recordName+". "+result6);
								}
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on count of "+contactSectionName,YesNo.No);
								sa.assertTrue(false,  "Not able to click on count of "+contactSectionName);
							}		
							driver.close();
							driver.switchTo().window(parentID);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on connection icon of contact : " + contactSectionName, YesNo.No);
							sa.assertTrue(false, "Not able to click on connection icon of contact : " + contactSectionName);
						}
												
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName,iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
		
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj1, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	


	@Parameters({ "projectName" })
	@Test
	public void ATCETc192_VerifyEventOnContactRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Con1;
		
		String[] firmsTaggedName= {ATCE_TaggedFirmsName105,ATCE_TaggedFirmsName106,ATCE_TaggedFirmsName107,ATCE_TaggedFirmsName108,ATCE_TaggedFirmsName109,ATCE_TaggedFirmsName110};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount105,ATCE_TaggedFirmsCount106,ATCE_TaggedFirmsCount107,ATCE_TaggedFirmsCount108,ATCE_TaggedFirmsCount109,ATCE_TaggedFirmsCount110};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName52,ATCE_TaggedPeopleName53,ATCE_TaggedPeopleName54,ATCE_TaggedPeopleName56,ATCE_TaggedPeopleName57,ATCE_TaggedPeopleName58};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount52,ATCE_TaggedPeopleCount53,ATCE_TaggedPeopleCount54,ATCE_TaggedPeopleCount56,ATCE_TaggedPeopleCount57,ATCE_TaggedPeopleCount58};
				
				
		String[] dealTaggedName= {ATCE_TaggedDealName16};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount16};
	
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		String connectionTitle=ATCE_ConnectionTitle6;
		String connectionDeal=ATCE_ConnectionDeal6;
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall6;
		String connectionEmail=ATCE_ConnectionEmail6;
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		
		String iconType= ATCE_ATActivityType36;
		String date= ATCE_ATDueDate36;
		String subject= ATCE_ATSubject36;
		String notes= ATCE_ATNote36;
		String[] participant= bp.getParticipantData(ATCE_ATParticipants36);
		String[] tag= ATCE_ATTags36.split("<break>");
		
		String[] iconType1= {ATCE_ATActivityType36};
		String[] date1= {ATCE_ATDueDate36};
		String[] subject1= {ATCE_ATSubject36};
		String[] notes1= {ATCE_ATNote36};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants36)};
		String[][] tag1= {ATCE_ATTags36.split("<break>")};
			
			
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj2)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
			
						ArrayList<String> result6=bp.verifyRecordOnConnectionsSectionInAcuity(recordName, connectionUserName, connectionTitle, connectionDeal, connectionMeetingaAndCall, connectionEmail);

						if(result6.isEmpty())
						{
							log(LogStatus.INFO, "The records have been verified on Connection section in Acuity user : "+connectionUserName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records are not verified on Connection section in Acuity. user : "+connectionUserName+" "+result6, YesNo.No);
							sa.assertTrue(false,  "The records are not verified on Connection section in Acuity.  user : "+connectionUserName+" "+result6);
						}
						
					
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}
						
						
						if(click(driver, bp.getMeetingAndCallCount(userName1, 20), "Meeting and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "Clicked on the count of meeting and call of "+userName1+" record on contact section",YesNo.No);
							
							ArrayList<String> result7=bp.verifyRecordOnMeetingsAndCallPopUpSectionInAcuity(iconType,date , subject, notes, participant, tag);
							if(result7.isEmpty())
							{
								log(LogStatus.INFO, "The records on meeting & calls popup have been verified for "+userName1, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records on meeting & calls popup are not verified for "+userName1+". "+result7, YesNo.No);
								sa.assertTrue(false, "The records on meeting & calls popup are not verified for "+userName1+". "+result7);
							}
						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+userName1+" record on contact section",	YesNo.No);		
							sa.assertTrue(false,  "Not able to click on the count of meeting and call of "+userName1+" record on contact section");
						}
						
						
						
								
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1,date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj2, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj2);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc193_VerifyEventOnDealRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Deal1;
		
		String[] firmsTaggedName= {ATCE_TaggedFirmsName111,ATCE_TaggedFirmsName112,ATCE_TaggedFirmsName113,ATCE_TaggedFirmsName114,ATCE_TaggedFirmsName115,ATCE_TaggedFirmsName116};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount111,ATCE_TaggedFirmsCount112,ATCE_TaggedFirmsCount113,ATCE_TaggedFirmsCount114,ATCE_TaggedFirmsCount115,ATCE_TaggedFirmsCount116};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName49,ATCE_TaggedPeopleName50,ATCE_TaggedPeopleName51,ATCE_TaggedPeopleName59,ATCE_TaggedPeopleName60,ATCE_TaggedPeopleName61,ATCE_TaggedPeopleName62};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount49,ATCE_TaggedPeopleCount50,ATCE_TaggedPeopleCount51,ATCE_TaggedPeopleCount59,ATCE_TaggedPeopleCount60,ATCE_TaggedPeopleCount61,ATCE_TaggedPeopleCount62};
				
		String[] dealTaggedName= null;
		String[] dealTaggedTimeReference= null;
		
		String[] iconType1= {ATCE_ATActivityType36};
		String[] date1= {ATCE_ATDueDate36};
		String[] subject1= {ATCE_ATSubject36};
		String[] notes1= {ATCE_ATNote36};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants36)};
		String[][] tag1= {ATCE_ATTags36.split("<break>")};
			
			
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

			if (lp.clickOnTab(projectName, tabObj4)) {

				log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

				if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
						recordName, 30)) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
						
						ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
							sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
						}	
								
						
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1, date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
					
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
		
	@Parameters({ "projectName" })
	@Test
	public void ATCETc194_VerifyEventFundraisingRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fundraising1;
		String[] firmsTaggedName= {ATCE_TaggedFirmsName117,ATCE_TaggedFirmsName118,ATCE_TaggedFirmsName119,ATCE_TaggedFirmsName120,ATCE_TaggedFirmsName121,ATCE_TaggedFirmsName122,ATCE_TaggedFirmsName123};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount117,ATCE_TaggedFirmsCount118,ATCE_TaggedFirmsCount119,ATCE_TaggedFirmsCount120,ATCE_TaggedFirmsCount121,ATCE_TaggedFirmsCount122,ATCE_TaggedFirmsCount123};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName59,ATCE_TaggedPeopleName60,ATCE_TaggedPeopleName61,ATCE_TaggedPeopleName62,ATCE_TaggedPeopleName63,ATCE_TaggedPeopleName64,ATCE_TaggedPeopleName65};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount59,ATCE_TaggedPeopleCount60,ATCE_TaggedPeopleCount61,ATCE_TaggedPeopleCount62,ATCE_TaggedPeopleCount63,ATCE_TaggedPeopleCount64,ATCE_TaggedPeopleCount65};
				
		String[] dealTaggedName= null;
		String[] dealTaggedTimeReference= null;
		
		String[] iconType1= {ATCE_ATActivityType36};
		String[] date1= {ATCE_ATDueDate36};
		String[] subject1= {ATCE_ATSubject36};
		String[] notes1= {ATCE_ATNote36};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants36)};
		String[][] tag1= {ATCE_ATTags36.split("<break>")};
			
			
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					
					ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
					if(result5.isEmpty())
					{
						log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
						sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
					}	
							
					
					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1, date1, subject1, notes1, subject1, participant1, tag1);
						if(result2.isEmpty())
						{
							log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
							sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	
					
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+TabName.Fundraising.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+TabName.Fundraising.toString());
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc195_VerifyEventOnFundRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fund1;
		String[] firmsTaggedName= {ATCE_TaggedFirmsName111,ATCE_TaggedFirmsName112,ATCE_TaggedFirmsName113,ATCE_TaggedFirmsName114,ATCE_TaggedFirmsName115,ATCE_TaggedFirmsName116};
		String[] firmsTaggedTimeReference= {ATCE_TaggedFirmsCount111,ATCE_TaggedFirmsCount112,ATCE_TaggedFirmsCount113,ATCE_TaggedFirmsCount114,ATCE_TaggedFirmsCount115,ATCE_TaggedFirmsCount116};

		String[] peopleTaggedName= {ATCE_TaggedPeopleName59,ATCE_TaggedPeopleName60,ATCE_TaggedPeopleName61,ATCE_TaggedPeopleName62,ATCE_TaggedPeopleName63,ATCE_TaggedPeopleName64,ATCE_TaggedPeopleName65};
		String[] peopleTaggedTimeReference= {ATCE_TaggedPeopleCount59,ATCE_TaggedPeopleCount60,ATCE_TaggedPeopleCount61,ATCE_TaggedPeopleCount62,ATCE_TaggedPeopleCount63,ATCE_TaggedPeopleCount64,ATCE_TaggedPeopleCount65};
				
				
		String[] dealTaggedName= {ATCE_TaggedDealName15};
		String[] dealTaggedTimeReference= {ATCE_TaggedDealCount15};
	
		String[] iconType1= {ATCE_ATActivityType36};
		String[] date1= {ATCE_ATDueDate36};
		String[] subject1= {ATCE_ATSubject36};
		String[] notes1= {ATCE_ATNote36};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants36)};
		String[][] tag1= {ATCE_ATTags36.split("<break>")};
			
			
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
		if (lp.clickOnTab(projectName, tabObj3)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj3, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					ArrayList<String> result5=bp.verifyRecordAndReferencedTypeOnTagged(firmsTaggedName, firmsTaggedTimeReference, peopleTaggedName, peopleTaggedTimeReference, dealTaggedName, dealTaggedTimeReference,isInstitutionRecord, null,null);
					if(result5.isEmpty())
					{
						log(LogStatus.INFO, "The record name and Time reference have been verifed", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR,  "The record name and Time reference are not verifed. "+result5, YesNo.No);
						sa.assertTrue(false,  "The record name and Time reference are not verifed."+result5);
					}	
							
					
					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1, date1, subject1, notes1, subject1, participant1, tag1);
						if(result2.isEmpty())
						{
							log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
							sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
						}
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	
					
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj3, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj3);
			}

		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc196_VerifyEventOnThemeRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Theme1;
		String[] iconType1= {ATCE_ATActivityType36};
		String[] date1= {ATCE_ATDueDate36};
		String[] subject1= {ATCE_ATSubject36};
		String[] notes1= {ATCE_ATNote36};
		String[][] participant1= {bp.getParticipantData(ATCE_ATParticipants36)};
		String[][] tag1= {ATCE_ATTags36.split("<break>")};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	

			if (lp.clickOnTab(projectName, TabName.Themes.toString())) {

				log(LogStatus.INFO, "Clicked on Tab : "+TabName.Themes.toString(), YesNo.No);

				String parentWindowID=bp.clickOnThemeRecord(recordName);

				if (parentWindowID!=null) {
					log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

					if (bp.clicktabOnPage(TabName.Acuity.toString())) {
						log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
						
				
						if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
						{
							log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
							ArrayList<String> result2=bp.verifyRecordsonInteractionsViewAllPopup(recordName, iconType1, date1, subject1, notes1, subject1, participant1, tag1);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The records have been verified on interaction popup in Acuity", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The records are not verified on interaction popup in Acuity : "+result2, YesNo.No);
								sa.assertTrue(false,  "The records are not verified on interaction popup in Acuity :  "+result2);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
							sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
						}	
						
						
						
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
				driver.close();
				driver.switchTo().window(parentWindowID);
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab : "+TabName.Themes.toString(), YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab : "+TabName.Themes.toString());
			}
		lp.CRMlogout();	
		sa.assertAll();	
	}


	@Parameters({ "projectName" })
	@Test
	public void ATCETc197_VerifyUIOfFilterSectionOnCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);

		String recordName=ATERecord3;
		String contactName=ATE_ContactName22;


		String[] filterType= {"All Types","Emails","Meetings","Calls","Tasks"};
		String[] recordIconType= {"email","event","call","task"};

		String[] filterType1= {"All Types","Meetings","Calls"};
		String[] recordIconType1= {"event","call"};

		String userName1=crmUser6FirstName+" "+crmUser6LastName;

		String companyTagName=ATE_TaggedCompanyName35;
		String companyTagTimeReferenceCount=ATE_TaggedCompanyTimeReference35;

		String peopleTagName=ATE_TaggedPeopleName21;
		String peopleTagTimeReferenceCount=ATE_TaggedPeopleTimeReference21;

		String dealTagName=ATE_TaggedDealName18;
		String dealTagTimeReferenceCount=ATE_TaggedDealTimeReference18;


		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);
			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);	

					if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Firms", companyTagName, companyTagTimeReferenceCount,30), companyTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+companyTagName,YesNo.No);

							ArrayList<String> result=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result);
							}				
							/*					xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+companyTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+companyTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Firms tab name");
					}


					if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

							ArrayList<String> result1=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result1.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+peopleTagName+" from people tag", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1);
							}
							
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on People tab name");
					}
					
					if(isInstitutionRecord==false)
					{
					if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

							ArrayList<String> result2=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2);
							}	

						
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Deals tab name");
					}				
					}
					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result3=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
						if(result3.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on View All button"+result3, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3);
						}	

					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	

					if(click(driver, bp.getMeetingAndCallCount(contactName, 20), contactName+" meetings and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on the count of meeting and call of "+contactName, YesNo.No);

						ArrayList<String> result4=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+contactName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+contactName+". "+result4, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+contactName+". "+result4);
						}
					
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactName, YesNo.No);
						sa.assertTrue(false, "Not able to click on the count of meeting and call of "+contactName);
					}

					if(clickUsingJavaScript(driver, bp.getConnectionIconOfContact(contactName, 20), "Connection icon of "+contactName))
					{
						log(LogStatus.INFO, "Clicked on the connection icon of "+contactName, YesNo.No);
						String parentId=switchOnWindow(driver);

						if(click(driver, bp.getMeetingAndCallCount(userName1, 20), userName1+" meetings and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "clicked on the count of meeting and call of "+userName1, YesNo.No);

							ArrayList<String> result5=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
							if(result5.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+userName1, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5);
							}
							

							driver.close();
							driver.switchTo().window(parentId);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+userName1, YesNo.No);
							sa.assertTrue(false, "Not able to click on the count of meeting and call of "+userName1);
						}	
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the connection icon of "+contactName, YesNo.No);
						sa.assertTrue(false, "Not able to click on the connection icon of "+contactName);
					}

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc198_VerifyUIOfFilterSectionOnAdvisorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);

		String recordName=ATERecord3;
		String contactName=ATE_ContactName22;


		String[] filterType= {"All Types","Emails","Meetings","Calls","Tasks"};
		String[] recordIconType= {"email","event","call","task"};

		String[] filterType1= {"All Types","Meetings","Calls"};
		String[] recordIconType1= {"event","call"};

		String userName1=crmUser6FirstName+" "+crmUser6LastName;

		String companyTagName=ATE_TaggedCompanyName35;
		String companyTagTimeReferenceCount=ATE_TaggedCompanyTimeReference35;

		String peopleTagName=ATE_TaggedPeopleName21;
		String peopleTagTimeReferenceCount=ATE_TaggedPeopleTimeReference21;

		String dealTagName=ATE_TaggedDealName18;
		String dealTagTimeReferenceCount=ATE_TaggedDealTimeReference18;


		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);
			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);	

					if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Firms", companyTagName, companyTagTimeReferenceCount,30), companyTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+companyTagName,YesNo.No);

							ArrayList<String> result=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result);
							}				
							/*					xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+companyTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+companyTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Firms tab name");
					}


					if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

							ArrayList<String> result1=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result1.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+peopleTagName+" from people tag", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1);
							}
							/*				
							xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on People tab name");
					}
					
					if(isInstitutionRecord==false)
					{
					if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

							ArrayList<String> result2=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2);
							}	

							/*					xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Deals tab name");
					}				
					}
					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result3=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
						if(result3.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on View All button"+result3, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3);
						}	
						/*
						xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
						ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
						if(clickUsingJavaScript(driver, ele, "close button"))
						{
							log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
							sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
						}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	

					if(click(driver, bp.getMeetingAndCallCount(contactName, 20), contactName+" meetings and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on the count of meeting and call of "+contactName, YesNo.No);

						ArrayList<String> result4=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+contactName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+contactName+". "+result4, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+contactName+". "+result4);
						}
						/*					xPath="//h2[contains(text(),'Meetings and Calls with')]/../button//lightning-icon";
						ele=FindElement(driver, xPath, "Meetings and Calls with popup close", action.SCROLLANDBOOLEAN, 20);
						if(clickUsingJavaScript(driver, ele, "close button"))
						{
							log(LogStatus.INFO, "clicked on close button of all Meetings and Calls with popup", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on close button of all Meetings and Calls with popup", YesNo.No);
							sa.assertTrue(false,  "Not able to click on close button of all Meetings and Calls with popup");
						}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactName, YesNo.No);
						sa.assertTrue(false, "Not able to click on the count of meeting and call of "+contactName);
					}

					if(clickUsingJavaScript(driver, bp.getConnectionIconOfContact(contactName, 20), "Connection icon of "+contactName))
					{
						log(LogStatus.INFO, "Clicked on the connection icon of "+contactName, YesNo.No);
						String parentId=switchOnWindow(driver);

						if(click(driver, bp.getMeetingAndCallCount(userName1, 20), userName1+" meetings and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "clicked on the count of meeting and call of "+userName1, YesNo.No);

							ArrayList<String> result5=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
							if(result5.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+userName1, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5);
							}
							/*		xPath="//h2[contains(text(),'Meetings and Calls with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "Meetings and Calls with popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Meetings and Calls with popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Meetings and Calls with popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Meetings and Calls with popup");
							}
							 */

							driver.close();
							driver.switchTo().window(parentId);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+userName1, YesNo.No);
							sa.assertTrue(false, "Not able to click on the count of meeting and call of "+userName1);
						}	
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the connection icon of "+contactName, YesNo.No);
						sa.assertTrue(false, "Not able to click on the connection icon of "+contactName);
					}

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc199_VerifyUIOfFilterSectionOnLendorRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);

		String recordName=ATERecord3;
		String contactName=ATE_ContactName22;


		String[] filterType= {"All Types","Emails","Meetings","Calls","Tasks"};
		String[] recordIconType= {"email","event","call","task"};

		String[] filterType1= {"All Types","Meetings","Calls"};
		String[] recordIconType1= {"event","call"};

		String userName1=crmUser6FirstName+" "+crmUser6LastName;

		String companyTagName=ATE_TaggedCompanyName35;
		String companyTagTimeReferenceCount=ATE_TaggedCompanyTimeReference35;

		String peopleTagName=ATE_TaggedPeopleName21;
		String peopleTagTimeReferenceCount=ATE_TaggedPeopleTimeReference21;

		String dealTagName=ATE_TaggedDealName18;
		String dealTagTimeReferenceCount=ATE_TaggedDealTimeReference18;


		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);
			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);	

					if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Firms", companyTagName, companyTagTimeReferenceCount,30), companyTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+companyTagName,YesNo.No);

							ArrayList<String> result=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result);
							}				
							/*					xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+companyTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+companyTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Firms tab name");
					}


					if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

							ArrayList<String> result1=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result1.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+peopleTagName+" from people tag", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1);
							}
							/*				
							xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on People tab name");
					}
					
					if(isInstitutionRecord==false)
					{
					if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

							ArrayList<String> result2=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2);
							}	

							/*					xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Deals tab name");
					}				
					}
					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result3=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
						if(result3.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on View All button"+result3, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3);
						}	
						/*
						xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
						ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
						if(clickUsingJavaScript(driver, ele, "close button"))
						{
							log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
							sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
						}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	

					if(click(driver, bp.getMeetingAndCallCount(contactName, 20), contactName+" meetings and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on the count of meeting and call of "+contactName, YesNo.No);

						ArrayList<String> result4=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+contactName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+contactName+". "+result4, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+contactName+". "+result4);
						}
						/*					xPath="//h2[contains(text(),'Meetings and Calls with')]/../button//lightning-icon";
						ele=FindElement(driver, xPath, "Meetings and Calls with popup close", action.SCROLLANDBOOLEAN, 20);
						if(clickUsingJavaScript(driver, ele, "close button"))
						{
							log(LogStatus.INFO, "clicked on close button of all Meetings and Calls with popup", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on close button of all Meetings and Calls with popup", YesNo.No);
							sa.assertTrue(false,  "Not able to click on close button of all Meetings and Calls with popup");
						}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactName, YesNo.No);
						sa.assertTrue(false, "Not able to click on the count of meeting and call of "+contactName);
					}

					if(clickUsingJavaScript(driver, bp.getConnectionIconOfContact(contactName, 20), "Connection icon of "+contactName))
					{
						log(LogStatus.INFO, "Clicked on the connection icon of "+contactName, YesNo.No);
						String parentId=switchOnWindow(driver);

						if(click(driver, bp.getMeetingAndCallCount(userName1, 20), userName1+" meetings and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "clicked on the count of meeting and call of "+userName1, YesNo.No);

							ArrayList<String> result5=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
							if(result5.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+userName1, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5);
							}
							/*		xPath="//h2[contains(text(),'Meetings and Calls with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "Meetings and Calls with popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Meetings and Calls with popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Meetings and Calls with popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Meetings and Calls with popup");
							}
							 */

							driver.close();
							driver.switchTo().window(parentId);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+userName1, YesNo.No);
							sa.assertTrue(false, "Not able to click on the count of meeting and call of "+userName1);
						}	
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the connection icon of "+contactName, YesNo.No);
						sa.assertTrue(false, "Not able to click on the connection icon of "+contactName);
					}

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}


	@Parameters({ "projectName" })
	@Test
	public void ATCETc200_VerifyUIOfFilterSectionOnIntermediaryRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);

		String recordName=ATERecord3;
		String contactName=ATE_ContactName22;


		String[] filterType= {"All Types","Emails","Meetings","Calls","Tasks"};
		String[] recordIconType= {"email","event","call","task"};

		String[] filterType1= {"All Types","Meetings","Calls"};
		String[] recordIconType1= {"event","call"};

		String userName1=crmUser6FirstName+" "+crmUser6LastName;

		String companyTagName=ATE_TaggedCompanyName35;
		String companyTagTimeReferenceCount=ATE_TaggedCompanyTimeReference35;

		String peopleTagName=ATE_TaggedPeopleName21;
		String peopleTagTimeReferenceCount=ATE_TaggedPeopleTimeReference21;

		String dealTagName=ATE_TaggedDealName18;
		String dealTagTimeReferenceCount=ATE_TaggedDealTimeReference18;


		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);
			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);	

					if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Firms", companyTagName, companyTagTimeReferenceCount,30), companyTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+companyTagName,YesNo.No);

							ArrayList<String> result=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result);
							}				
							/*					xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+companyTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+companyTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Firms tab name");
					}


					if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

							ArrayList<String> result1=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result1.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+peopleTagName+" from people tag", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1);
							}
							/*				
							xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on People tab name");
					}
					
					if(isInstitutionRecord==false)
					{
					if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

							ArrayList<String> result2=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2);
							}	

							/*					xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Deals tab name");
					}				
					}
					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result3=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
						if(result3.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on View All button"+result3, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3);
						}	
						/*
						xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
						ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
						if(clickUsingJavaScript(driver, ele, "close button"))
						{
							log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
							sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
						}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	

					if(click(driver, bp.getMeetingAndCallCount(contactName, 20), contactName+" meetings and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on the count of meeting and call of "+contactName, YesNo.No);

						ArrayList<String> result4=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+contactName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+contactName+". "+result4, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+contactName+". "+result4);
						}
						/*					xPath="//h2[contains(text(),'Meetings and Calls with')]/../button//lightning-icon";
						ele=FindElement(driver, xPath, "Meetings and Calls with popup close", action.SCROLLANDBOOLEAN, 20);
						if(clickUsingJavaScript(driver, ele, "close button"))
						{
							log(LogStatus.INFO, "clicked on close button of all Meetings and Calls with popup", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on close button of all Meetings and Calls with popup", YesNo.No);
							sa.assertTrue(false,  "Not able to click on close button of all Meetings and Calls with popup");
						}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactName, YesNo.No);
						sa.assertTrue(false, "Not able to click on the count of meeting and call of "+contactName);
					}

					if(clickUsingJavaScript(driver, bp.getConnectionIconOfContact(contactName, 20), "Connection icon of "+contactName))
					{
						log(LogStatus.INFO, "Clicked on the connection icon of "+contactName, YesNo.No);
						String parentId=switchOnWindow(driver);

						if(click(driver, bp.getMeetingAndCallCount(userName1, 20), userName1+" meetings and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "clicked on the count of meeting and call of "+userName1, YesNo.No);

							ArrayList<String> result5=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
							if(result5.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+userName1, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5);
							}
							/*		xPath="//h2[contains(text(),'Meetings and Calls with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "Meetings and Calls with popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Meetings and Calls with popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Meetings and Calls with popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Meetings and Calls with popup");
							}
							 */

							driver.close();
							driver.switchTo().window(parentId);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+userName1, YesNo.No);
							sa.assertTrue(false, "Not able to click on the count of meeting and call of "+userName1);
						}	
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the connection icon of "+contactName, YesNo.No);
						sa.assertTrue(false, "Not able to click on the connection icon of "+contactName);
					}

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc201_VerifyUIOfFilterSectionOnInstitutionRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);

		String recordName=ATERecord3;
		String contactName=ATE_ContactName22;


		String[] filterType= {"All Types","Emails","Meetings","Calls","Tasks"};
		String[] recordIconType= {"email","event","call","task"};

		String[] filterType1= {"All Types","Meetings","Calls"};
		String[] recordIconType1= {"event","call"};

		String userName1=crmUser6FirstName+" "+crmUser6LastName;

		String companyTagName=ATE_TaggedCompanyName35;
		String companyTagTimeReferenceCount=ATE_TaggedCompanyTimeReference35;

		String peopleTagName=ATE_TaggedPeopleName21;
		String peopleTagTimeReferenceCount=ATE_TaggedPeopleTimeReference21;

		String dealTagName=ATE_TaggedDealName18;
		String dealTagTimeReferenceCount=ATE_TaggedDealTimeReference18;


		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);
			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);	

					if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Firms", companyTagName, companyTagTimeReferenceCount,30), companyTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+companyTagName,YesNo.No);

							ArrayList<String> result=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result);
							}				
							/*					xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+companyTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+companyTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Firms tab name");
					}


					if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

							ArrayList<String> result1=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result1.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+peopleTagName+" from people tag", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1);
							}
							/*				
							xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on People tab name");
					}
					
					if(isInstitutionRecord==false)
					{
					if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

							ArrayList<String> result2=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2);
							}	

							/*					xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Deals tab name");
					}				
					}
					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result3=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
						if(result3.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on View All button"+result3, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3);
						}	
						/*
						xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
						ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
						if(clickUsingJavaScript(driver, ele, "close button"))
						{
							log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
							sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
						}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	

					if(click(driver, bp.getMeetingAndCallCount(contactName, 20), contactName+" meetings and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on the count of meeting and call of "+contactName, YesNo.No);

						ArrayList<String> result4=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+contactName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+contactName+". "+result4, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+contactName+". "+result4);
						}
						/*					xPath="//h2[contains(text(),'Meetings and Calls with')]/../button//lightning-icon";
						ele=FindElement(driver, xPath, "Meetings and Calls with popup close", action.SCROLLANDBOOLEAN, 20);
						if(clickUsingJavaScript(driver, ele, "close button"))
						{
							log(LogStatus.INFO, "clicked on close button of all Meetings and Calls with popup", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on close button of all Meetings and Calls with popup", YesNo.No);
							sa.assertTrue(false,  "Not able to click on close button of all Meetings and Calls with popup");
						}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactName, YesNo.No);
						sa.assertTrue(false, "Not able to click on the count of meeting and call of "+contactName);
					}

					if(clickUsingJavaScript(driver, bp.getConnectionIconOfContact(contactName, 20), "Connection icon of "+contactName))
					{
						log(LogStatus.INFO, "Clicked on the connection icon of "+contactName, YesNo.No);
						String parentId=switchOnWindow(driver);

						if(click(driver, bp.getMeetingAndCallCount(userName1, 20), userName1+" meetings and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "clicked on the count of meeting and call of "+userName1, YesNo.No);

							ArrayList<String> result5=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
							if(result5.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+userName1, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5);
							}
							/*		xPath="//h2[contains(text(),'Meetings and Calls with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "Meetings and Calls with popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Meetings and Calls with popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Meetings and Calls with popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Meetings and Calls with popup");
							}
							 */

							driver.close();
							driver.switchTo().window(parentId);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+userName1, YesNo.No);
							sa.assertTrue(false, "Not able to click on the count of meeting and call of "+userName1);
						}	
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the connection icon of "+contactName, YesNo.No);
						sa.assertTrue(false, "Not able to click on the connection icon of "+contactName);
					}

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc202_VerifyUIOfFilterSectionOnPortfolioCompanyRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);

		String recordName=ATERecord3;
		String contactName=ATE_ContactName22;


		String[] filterType= {"All Types","Emails","Meetings","Calls","Tasks"};
		String[] recordIconType= {"email","event","call","task"};

		String[] filterType1= {"All Types","Meetings","Calls"};
		String[] recordIconType1= {"event","call"};

		String userName1=crmUser6FirstName+" "+crmUser6LastName;

		String companyTagName=ATE_TaggedCompanyName35;
		String companyTagTimeReferenceCount=ATE_TaggedCompanyTimeReference35;

		String peopleTagName=ATE_TaggedPeopleName21;
		String peopleTagTimeReferenceCount=ATE_TaggedPeopleTimeReference21;

		String dealTagName=ATE_TaggedDealName18;
		String dealTagTimeReferenceCount=ATE_TaggedDealTimeReference18;


		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);
			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);	

					if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Firms", companyTagName, companyTagTimeReferenceCount,30), companyTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+companyTagName,YesNo.No);

							ArrayList<String> result=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result);
							}				
							/*					xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+companyTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+companyTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Firms tab name");
					}


					if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

							ArrayList<String> result1=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result1.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+peopleTagName+" from people tag", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1);
							}
							/*				
							xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on People tab name");
					}
					
					if(isInstitutionRecord==false)
					{
					if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

							ArrayList<String> result2=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2);
							}	

							/*					xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Deals tab name");
					}				
					}
					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result3=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
						if(result3.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on View All button"+result3, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3);
						}	
						/*
						xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
						ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
						if(clickUsingJavaScript(driver, ele, "close button"))
						{
							log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
							sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
						}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	

					if(click(driver, bp.getMeetingAndCallCount(contactName, 20), contactName+" meetings and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on the count of meeting and call of "+contactName, YesNo.No);

						ArrayList<String> result4=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+contactName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+contactName+". "+result4, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+contactName+". "+result4);
						}
						/*					xPath="//h2[contains(text(),'Meetings and Calls with')]/../button//lightning-icon";
						ele=FindElement(driver, xPath, "Meetings and Calls with popup close", action.SCROLLANDBOOLEAN, 20);
						if(clickUsingJavaScript(driver, ele, "close button"))
						{
							log(LogStatus.INFO, "clicked on close button of all Meetings and Calls with popup", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on close button of all Meetings and Calls with popup", YesNo.No);
							sa.assertTrue(false,  "Not able to click on close button of all Meetings and Calls with popup");
						}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactName, YesNo.No);
						sa.assertTrue(false, "Not able to click on the count of meeting and call of "+contactName);
					}

					if(clickUsingJavaScript(driver, bp.getConnectionIconOfContact(contactName, 20), "Connection icon of "+contactName))
					{
						log(LogStatus.INFO, "Clicked on the connection icon of "+contactName, YesNo.No);
						String parentId=switchOnWindow(driver);

						if(click(driver, bp.getMeetingAndCallCount(userName1, 20), userName1+" meetings and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "clicked on the count of meeting and call of "+userName1, YesNo.No);

							ArrayList<String> result5=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
							if(result5.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+userName1, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5);
							}
							/*		xPath="//h2[contains(text(),'Meetings and Calls with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "Meetings and Calls with popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Meetings and Calls with popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Meetings and Calls with popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Meetings and Calls with popup");
							}
							 */

							driver.close();
							driver.switchTo().window(parentId);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+userName1, YesNo.No);
							sa.assertTrue(false, "Not able to click on the count of meeting and call of "+userName1);
						}	
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the connection icon of "+contactName, YesNo.No);
						sa.assertTrue(false, "Not able to click on the connection icon of "+contactName);
					}

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc203_VerifyUIOfFilterSectionOnPrivateEquityRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);

		String recordName=ATERecord3;
		String contactName=ATE_ContactName22;


		String[] filterType= {"All Types","Emails","Meetings","Calls","Tasks"};
		String[] recordIconType= {"email","event","call","task"};

		String[] filterType1= {"All Types","Meetings","Calls"};
		String[] recordIconType1= {"event","call"};

		String userName1=crmUser6FirstName+" "+crmUser6LastName;

		String companyTagName=ATE_TaggedCompanyName35;
		String companyTagTimeReferenceCount=ATE_TaggedCompanyTimeReference35;

		String peopleTagName=ATE_TaggedPeopleName21;
		String peopleTagTimeReferenceCount=ATE_TaggedPeopleTimeReference21;

		String dealTagName=ATE_TaggedDealName18;
		String dealTagTimeReferenceCount=ATE_TaggedDealTimeReference18;


		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj1)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj1, YesNo.No);
			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.InstituitonsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);	

					if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Firms", companyTagName, companyTagTimeReferenceCount,30), companyTagName+" on firm Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+companyTagName,YesNo.No);

							ArrayList<String> result=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result);
							}				
							/*					xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+companyTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+companyTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Firms tab name");
					}


					if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

							ArrayList<String> result1=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result1.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+peopleTagName+" from people tag", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1);
							}
							/*				
							xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on People tab name");
					}
					
					if(isInstitutionRecord==false)
					{
					if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

							ArrayList<String> result2=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2);
							}	

							/*					xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Deals tab name");
					}				
					}
					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result3=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
						if(result3.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on View All button"+result3, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3);
						}	
						/*
						xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
						ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
						if(clickUsingJavaScript(driver, ele, "close button"))
						{
							log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
							sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
						}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	

					if(click(driver, bp.getMeetingAndCallCount(contactName, 20), contactName+" meetings and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on the count of meeting and call of "+contactName, YesNo.No);

						ArrayList<String> result4=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
						if(result4.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+contactName, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+contactName+". "+result4, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+contactName+". "+result4);
						}
						/*					xPath="//h2[contains(text(),'Meetings and Calls with')]/../button//lightning-icon";
						ele=FindElement(driver, xPath, "Meetings and Calls with popup close", action.SCROLLANDBOOLEAN, 20);
						if(clickUsingJavaScript(driver, ele, "close button"))
						{
							log(LogStatus.INFO, "clicked on close button of all Meetings and Calls with popup", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on close button of all Meetings and Calls with popup", YesNo.No);
							sa.assertTrue(false,  "Not able to click on close button of all Meetings and Calls with popup");
						}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+contactName, YesNo.No);
						sa.assertTrue(false, "Not able to click on the count of meeting and call of "+contactName);
					}

					if(clickUsingJavaScript(driver, bp.getConnectionIconOfContact(contactName, 20), "Connection icon of "+contactName))
					{
						log(LogStatus.INFO, "Clicked on the connection icon of "+contactName, YesNo.No);
						String parentId=switchOnWindow(driver);

						if(click(driver, bp.getMeetingAndCallCount(userName1, 20), userName1+" meetings and call count", action.SCROLLANDBOOLEAN))
						{
							log(LogStatus.INFO, "clicked on the count of meeting and call of "+userName1, YesNo.No);

							ArrayList<String> result5=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
							if(result5.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+userName1, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5);
							}
							/*		xPath="//h2[contains(text(),'Meetings and Calls with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "Meetings and Calls with popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Meetings and Calls with popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Meetings and Calls with popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Meetings and Calls with popup");
							}
							 */

							driver.close();
							driver.switchTo().window(parentId);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+userName1, YesNo.No);
							sa.assertTrue(false, "Not able to click on the count of meeting and call of "+userName1);
						}	
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the connection icon of "+contactName, YesNo.No);
						sa.assertTrue(false, "Not able to click on the connection icon of "+contactName);
					}

				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}


	@Parameters({ "projectName" })
	@Test
	public void ATCETc204_VerifyUIOfFilterSectionOnContactRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);

		String recordName=ATE_Contact1;

		String xPath;
		WebElement ele;

		String[] filterType= {"All Types","Emails","Meetings","Calls","Tasks"};
		String[] recordIconType= {"email","event","call","task"};

		String[] filterType1= {"All Types","Meetings","Calls"};
		String[] recordIconType1= {"event","call"};

		String userName1=crmUser6FirstName+" "+crmUser6LastName;

		String companyTagName=ATE_TaggedCompanyName30;
		String companyTagTimeReferenceCount=ATE_TaggedCompanyTimeReference30;

		String peopleTagName=ATE_TaggedPeopleName17;
		String peopleTagTimeReferenceCount=ATE_TaggedPeopleTimeReference17;

		String dealTagName=ATE_TaggedDealName19;
		String dealTagTimeReferenceCount=ATE_TaggedDealTimeReference19;


		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);
			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);	

					if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Firms", companyTagName, companyTagTimeReferenceCount,30), companyTagName+" on Firm Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+companyTagName,YesNo.No);

							ArrayList<String> result=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result);
							}				
							/*		xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+companyTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+companyTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Firms tab name");
					}


					if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

							ArrayList<String> result1=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result1.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+peopleTagName+" from people tag", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1);
							}
							/*				
							xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on People tab name");
					}
					
					if(isInstitutionRecord==false)
					{
					if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

							ArrayList<String> result2=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2);
							}	
							/*			
							xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Deals tab name");
					}				
					}

					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result3=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
						if(result3.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on View All button"+result3, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3);
						}	
						/*
						xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
						ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
						if(clickUsingJavaScript(driver, ele, "close button"))
						{
							log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
							sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
						}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	

					if(click(driver, bp.getMeetingAndCallCount(userName1, 20), userName1+" meetings and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on the count of meeting and call of "+userName1, YesNo.No);

						ArrayList<String> result5=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+userName1, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5);
						}
						/*			xPath="//h2[contains(text(),'Meetings and Calls with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "Meetings and Calls with popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Meetings and Calls with popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Meetings and Calls with popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Meetings and Calls with popup");
							}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+userName1, YesNo.No);
						sa.assertTrue(false, "Not able to click on the count of meeting and call of "+userName1);
					}					
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc205_VerifyUIOfFilterSectionOnDealRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);

		String recordName=ATE_Contact1;

		String xPath;
		WebElement ele;

		String[] filterType= {"All Types","Emails","Meetings","Calls","Tasks"};
		String[] recordIconType= {"email","event","call","task"};

		String[] filterType1= {"All Types","Meetings","Calls"};
		String[] recordIconType1= {"event","call"};

		String userName1=crmUser6FirstName+" "+crmUser6LastName;

		String companyTagName=ATE_TaggedCompanyName30;
		String companyTagTimeReferenceCount=ATE_TaggedCompanyTimeReference30;

		String peopleTagName=ATE_TaggedPeopleName17;
		String peopleTagTimeReferenceCount=ATE_TaggedPeopleTimeReference17;

		String dealTagName=ATE_TaggedDealName19;
		String dealTagTimeReferenceCount=ATE_TaggedDealTimeReference19;


		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);
			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);	

					if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Firms", companyTagName, companyTagTimeReferenceCount,30), companyTagName+" on Firm Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+companyTagName,YesNo.No);

							ArrayList<String> result=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result);
							}				
							/*		xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+companyTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+companyTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Firms tab name");
					}


					if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

							ArrayList<String> result1=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result1.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+peopleTagName+" from people tag", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1);
							}
							/*				
							xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on People tab name");
					}
					
					if(isInstitutionRecord==false)
					{
					if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

							ArrayList<String> result2=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2);
							}	
							/*			
							xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Deals tab name");
					}				
					}

					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result3=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
						if(result3.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on View All button"+result3, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3);
						}	
						/*
						xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
						ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
						if(clickUsingJavaScript(driver, ele, "close button"))
						{
							log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
							sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
						}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	

					if(click(driver, bp.getMeetingAndCallCount(userName1, 20), userName1+" meetings and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on the count of meeting and call of "+userName1, YesNo.No);

						ArrayList<String> result5=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+userName1, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5);
						}
						/*			xPath="//h2[contains(text(),'Meetings and Calls with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "Meetings and Calls with popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Meetings and Calls with popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Meetings and Calls with popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Meetings and Calls with popup");
							}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+userName1, YesNo.No);
						sa.assertTrue(false, "Not able to click on the count of meeting and call of "+userName1);
					}					
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc206_VerifyUIOfFilterSectionOnFundraisingRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);

		String recordName=ATE_Contact1;

		String xPath;
		WebElement ele;

		String[] filterType= {"All Types","Emails","Meetings","Calls","Tasks"};
		String[] recordIconType= {"email","event","call","task"};

		String[] filterType1= {"All Types","Meetings","Calls"};
		String[] recordIconType1= {"event","call"};

		String userName1=crmUser6FirstName+" "+crmUser6LastName;

		String companyTagName=ATE_TaggedCompanyName30;
		String companyTagTimeReferenceCount=ATE_TaggedCompanyTimeReference30;

		String peopleTagName=ATE_TaggedPeopleName17;
		String peopleTagTimeReferenceCount=ATE_TaggedPeopleTimeReference17;

		String dealTagName=ATE_TaggedDealName19;
		String dealTagTimeReferenceCount=ATE_TaggedDealTimeReference19;


		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);
			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);	

					if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Firms", companyTagName, companyTagTimeReferenceCount,30), companyTagName+" on Firm Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+companyTagName,YesNo.No);

							ArrayList<String> result=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result);
							}				
							/*		xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+companyTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+companyTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Firms tab name");
					}


					if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

							ArrayList<String> result1=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result1.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+peopleTagName+" from people tag", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1);
							}
							/*				
							xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on People tab name");
					}
					
					if(isInstitutionRecord==false)
					{
					if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

							ArrayList<String> result2=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2);
							}	
							/*			
							xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Deals tab name");
					}				
					}

					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result3=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
						if(result3.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on View All button"+result3, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3);
						}	
						/*
						xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
						ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
						if(clickUsingJavaScript(driver, ele, "close button"))
						{
							log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
							sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
						}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	

					if(click(driver, bp.getMeetingAndCallCount(userName1, 20), userName1+" meetings and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on the count of meeting and call of "+userName1, YesNo.No);

						ArrayList<String> result5=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+userName1, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5);
						}
						/*			xPath="//h2[contains(text(),'Meetings and Calls with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "Meetings and Calls with popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Meetings and Calls with popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Meetings and Calls with popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Meetings and Calls with popup");
							}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+userName1, YesNo.No);
						sa.assertTrue(false, "Not able to click on the count of meeting and call of "+userName1);
					}					
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	@Parameters({ "projectName" })
	@Test
	public void ATCETc207_VerifyUIOfFilterSectionOnFundRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);

		String recordName=ATE_Contact1;

		String xPath;
		WebElement ele;

		String[] filterType= {"All Types","Emails","Meetings","Calls","Tasks"};
		String[] recordIconType= {"email","event","call","task"};

		String[] filterType1= {"All Types","Meetings","Calls"};
		String[] recordIconType1= {"event","call"};

		String userName1=crmUser6FirstName+" "+crmUser6LastName;

		String companyTagName=ATE_TaggedCompanyName30;
		String companyTagTimeReferenceCount=ATE_TaggedCompanyTimeReference30;

		String peopleTagName=ATE_TaggedPeopleName17;
		String peopleTagTimeReferenceCount=ATE_TaggedPeopleTimeReference17;

		String dealTagName=ATE_TaggedDealName19;
		String dealTagTimeReferenceCount=ATE_TaggedDealTimeReference19;


		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);
			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);	

					if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Firms", companyTagName, companyTagTimeReferenceCount,30), companyTagName+" on Firm Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+companyTagName,YesNo.No);

							ArrayList<String> result=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result);
							}				
							/*		xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+companyTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+companyTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Firms tab name");
					}


					if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

							ArrayList<String> result1=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result1.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+peopleTagName+" from people tag", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1);
							}
							/*				
							xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on People tab name");
					}
					
					if(isInstitutionRecord==false)
					{
					if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

							ArrayList<String> result2=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2);
							}	
							/*			
							xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Deals tab name");
					}				
					}

					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result3=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
						if(result3.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on View All button"+result3, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3);
						}	
						/*
						xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
						ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
						if(clickUsingJavaScript(driver, ele, "close button"))
						{
							log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
							sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
						}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	

					if(click(driver, bp.getMeetingAndCallCount(userName1, 20), userName1+" meetings and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on the count of meeting and call of "+userName1, YesNo.No);

						ArrayList<String> result5=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+userName1, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5);
						}
						/*			xPath="//h2[contains(text(),'Meetings and Calls with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "Meetings and Calls with popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Meetings and Calls with popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Meetings and Calls with popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Meetings and Calls with popup");
							}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+userName1, YesNo.No);
						sa.assertTrue(false, "Not able to click on the count of meeting and call of "+userName1);
					}					
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc208_VerifyUIOfFilterSectionOnPrivateEquityRecordType(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);

		String recordName=ATE_Contact1;

		String xPath;
		WebElement ele;

		String[] filterType= {"All Types","Emails","Meetings","Calls","Tasks"};
		String[] recordIconType= {"email","event","call","task"};

		String[] filterType1= {"All Types","Meetings","Calls"};
		String[] recordIconType1= {"event","call"};

		String userName1=crmUser6FirstName+" "+crmUser6LastName;

		String companyTagName=ATE_TaggedCompanyName30;
		String companyTagTimeReferenceCount=ATE_TaggedCompanyTimeReference30;

		String peopleTagName=ATE_TaggedPeopleName17;
		String peopleTagTimeReferenceCount=ATE_TaggedPeopleTimeReference17;

		String dealTagName=ATE_TaggedDealName19;
		String dealTagTimeReferenceCount=ATE_TaggedDealTimeReference19;


		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, tabObj2)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj2, YesNo.No);
			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.ContactTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);	

					if (click(driver, bp.getTaggedRecordName("Firms", 30), "Firms tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Firms tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Firms", companyTagName, companyTagTimeReferenceCount,30), companyTagName+" on Firm Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+companyTagName,YesNo.No);

							ArrayList<String> result=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+companyTagName+" from people tag. "+result);
							}				
							/*		xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+companyTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+companyTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Firms tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Firms tab name");
					}


					if (click(driver, bp.getTaggedRecordName("People", 30), "People tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on People tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("People", peopleTagName, peopleTagTimeReferenceCount,30), peopleTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+peopleTagName,YesNo.No);

							ArrayList<String> result1=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result1.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+peopleTagName+" from people tag", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+peopleTagName+" from people tag. "+result1);
							}
							/*				
							xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+peopleTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+peopleTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on People tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on People tab name");
					}
					
					if(isInstitutionRecord==false)
					{
					if (click(driver, bp.getTaggedRecordName("Deals", 30), "Deals tab", action.SCROLLANDBOOLEAN)) {
						log(LogStatus.INFO, "Clicked on Deals tab name", YesNo.No);
						if (click(driver, bp.getTaggedRecordTimeReference("Deals", dealTagName, dealTagTimeReferenceCount,30), dealTagName+" on Company Tagged",action.SCROLLANDBOOLEAN)) {
							log(LogStatus.INFO, "Clicked on Time reference count of "+dealTagName,YesNo.No);

							ArrayList<String> result2=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
							if(result2.isEmpty())
							{
								log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2, YesNo.No);
								sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on the count of "+dealTagName+" from people tag. "+result2);
							}	
							/*			
							xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
							}
							 */
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on Time reference count of "+dealTagName,YesNo.No);
							sa.assertTrue(false,  "Not able to click on Time reference count of "+dealTagName);
						}
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Deals tab name", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Deals tab name");
					}				
					}

					if(CommonLib.clickUsingJavaScript(driver, bp.getViewAllBtnOnIntration(20), "View All button"))
					{
						log(LogStatus.INFO, "Clicked on View All button of Interaction section", YesNo.No);
						ArrayList<String> result3=bp.verifyFilterIconAndFilterRecordsOnInteractionsPopup(filterType,recordIconType);
						if(result3.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on View All button"+result3, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on View All button. "+result3);
						}	
						/*
						xPath="//h2[contains(text(),'All Interactions with')]/../button//lightning-icon";
						ele=FindElement(driver, xPath, "All Interaction popup close", action.SCROLLANDBOOLEAN, 20);
						if(clickUsingJavaScript(driver, ele, "close button"))
						{
							log(LogStatus.INFO, "clicked on close button of all Interaction popup", YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "Not able to click on close button of all Interaction popup", YesNo.No);
							sa.assertTrue(false,  "Not able to click on close button of all Interaction popup");
						}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on View All button of Interaction section", YesNo.No);
						sa.assertTrue(false,  "Not able to click on View All button of Interaction section" );
					}	

					if(click(driver, bp.getMeetingAndCallCount(userName1, 20), userName1+" meetings and call count", action.SCROLLANDBOOLEAN))
					{
						log(LogStatus.INFO, "clicked on the count of meeting and call of "+userName1, YesNo.No);

						ArrayList<String> result5=bp.verifyFilterIconAndFilterRecordsOnMeetingAndCallPopup(filterType1,recordIconType1);
						if(result5.isEmpty())
						{
							log(LogStatus.INFO, "The filter icon, filter value, and records after selecting filter have been verified after clicking on meeting and call count of "+userName1, YesNo.No);
						}
						else
						{
							log(LogStatus.ERROR, "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5, YesNo.No);
							sa.assertTrue(false,  "The filter icon, filter value, and records after selecting filter not working properly after clicking on meeting and call count of "+userName1+". "+result5);
						}
						/*			xPath="//h2[contains(text(),'Meetings and Calls with')]/../button//lightning-icon";
							ele=FindElement(driver, xPath, "Meetings and Calls with popup close", action.SCROLLANDBOOLEAN, 20);
							if(clickUsingJavaScript(driver, ele, "close button"))
							{
								log(LogStatus.INFO, "clicked on close button of all Meetings and Calls with popup", YesNo.No);
							}
							else
							{
								log(LogStatus.ERROR, "Not able to click on close button of all Meetings and Calls with popup", YesNo.No);
								sa.assertTrue(false,  "Not able to click on close button of all Meetings and Calls with popup");
							}
						 */
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on the count of meeting and call of "+userName1, YesNo.No);
						sa.assertTrue(false, "Not able to click on the count of meeting and call of "+userName1);
					}					
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab"+tabObj1, YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+tabObj1);
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc209_CreateAccountAndContact(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		InstitutionsPageBusinessLayer ip = new InstitutionsPageBusinessLayer(driver);
		ContactsPageBusinessLayer cp = new ContactsPageBusinessLayer(driver);
		DealPageBusinessLayer dp = new DealPageBusinessLayer(driver);
		FundsPageBusinessLayer fd = new FundsPageBusinessLayer(driver);

		String[] accountName = ATCERecord16.split("<break>");
		String[] recordType = ATCERecordType1.split("<break>");

		String[] contactFirstName = {ATCE_ContactFirstName9,ATCE_ContactFirstName10};
		String[] contactLastName = {ATCE_ContactLastName9,ATCE_ContactLastName10};
		String[] contactLegalName = {ATCE_ContactLegalName8,ATCE_ContactLegalName9};
		String[] contactEmail = {ATCE_ContactEmail8,ATCE_ContactEmail9};
		String[] contactTitle = {ATCE_ContactTitle9,ATCE_ContactTitle10};

		String dealName=ATCE_Deal6;
		String dealStage=ATCE_DealStage3;
		

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
		if (accountName.length == recordType.length) {
			for (int i = 0; i < accountName.length; i++) {
				if (lp.clickOnTab(projectName, tabObj1)) {

					log(LogStatus.INFO, "Click on Tab : " + tabObj1, YesNo.No);
					ThreadSleep(3000);
					if (ip.createEntityOrAccount(environment, mode, accountName[i], recordType[i], null, null, 30)) {
						log(LogStatus.INFO,
								"successfully Created Firm : " + accountName[i] + " of record type : " + recordType[i],
								YesNo.No);
						sa.assertTrue(true,
								"successfully Created Firm : " + accountName[i] + " of record type : " + recordType[i]);


					} else {
						sa.assertTrue(false,
								"Not Able to Create Firm : " + accountName[i] + " of record type : " + recordType[i]);
						log(LogStatus.SKIP,
								"Not Able to Create Firm : " + accountName[i] + " of record type :" + recordType[i],
								YesNo.Yes);
					}

				} else {
					log(LogStatus.FAIL, "Not able to click on " + tabObj1 + " Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on " + tabObj1 + " Tab");
				}

			}
		} else {
			log(LogStatus.FAIL,
					"The count of Legal name and Record Type are not equal. Either Legal Name or Record type value are not proper",
					YesNo.No);
			sa.assertTrue(false,
					"The count of Legal name and Record Type are not equal. Either Legal Name or Record type value are not proper");
		}

		for (int i = 0; i < contactLastName.length; i++) {
			if (lp.clickOnTab(projectName, tabObj2)) {

				log(LogStatus.INFO, "Click on Tab : " + tabObj2, YesNo.No);
				ThreadSleep(3000);

				if (cp.createContact(projectName, contactFirstName[i], contactLastName[i], contactLegalName[i],
						contactEmail[i], "", null, null, CreationPage.ContactPage, contactTitle[i], null)) {
					log(LogStatus.INFO,
							"successfully Created Contact : " + contactFirstName[i] + " " + contactLastName[i],
							YesNo.No);
					sa.assertTrue(true,
							"successfully Created Contact : " + contactFirstName[i] + " " + contactLastName[i]);


				} else {
					log(LogStatus.FAIL,
							"Not able to create the Contact : " + contactFirstName[i] + " " + contactLastName[i],
							YesNo.No);
					sa.assertTrue(false,
							"Not able to create the Contact : " + contactFirstName[i] + " " + contactLastName[i]);
				}

			} else {
				log(LogStatus.FAIL, "Not able to click on " + tabObj2 + " Tab", YesNo.No);
				sa.assertTrue(false, "Not able to click on " + tabObj2 + " Tab");
			}
		}
		
		if (lp.clickOnTab(projectName, tabObj4)) {

			log(LogStatus.INFO, "Click on Tab : " + tabObj4, YesNo.No);
			ThreadSleep(3000);

			if (dp.createDeal(projectName, dealName, null, dealStage)) {
				log(LogStatus.INFO, dealName + " deal has been created", YesNo.No);
				sa.assertTrue(true, dealName + " deal has been created");

			} else {
				log(LogStatus.ERROR, dealName + " deal is not created", YesNo.No);
				sa.assertTrue(false, dealName + " deal is not created");
			}
		}
		else {
			log(LogStatus.ERROR, "Not able to click on " + tabObj4 + " Tab", YesNo.No);
			sa.assertTrue(false, "Not able to click on " + tabObj4 + " Tab");
		}


		
		lp.CRMlogout();
		sa.assertAll();
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc210_CreateDealTeam(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		InstitutionsPageBusinessLayer ip = new InstitutionsPageBusinessLayer(driver);
		ContactsPageBusinessLayer cp = new ContactsPageBusinessLayer(driver);
		DealTeamPageBusinessLayer dt=new DealTeamPageBusinessLayer(driver);
		FundsPageBusinessLayer fd = new FundsPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
			
		String[] dealTeamName = {ATCE_DTDealName1,ATCE_DTDealName2};
		String[] dealTeamContact = {ATCE_DTContact1,ATCE_DTContact2};
		String[] dealTeamMember = {ATCE_DTMember1,ATCE_DTMember2};
		String[] dealTeamRole = {ATCE_DTRole1,ATCE_DTRole2};
		
		
		String userName1=crmUser6FirstName+" "+crmUser6LastName;
		String userName2=crmUser8FirstName+" "+crmUser8LastName;
		
		
		String [][][] dealTeamInfo= {{{"Deal",ATCE_DTDealName1},{PageLabel.Deal_Contact.toString(),ATCE_DTContact1},{PageLabel.Team_Member.toString(),userName1},{PageLabel.Role.toString(),ATCE_DTRole1}},
				{{"Deal",ATCE_DTDealName2},{PageLabel.Deal_Contact.toString(),ATCE_DTContact2},{PageLabel.Team_Member.toString(),userName2},{PageLabel.Role.toString(),ATCE_DTRole2}}};		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
		
			for(String[][] details:dealTeamInfo)
			{
				if(bp.openAppFromAppLauchner(20, "Deal Team"))
				{
					log(LogStatus.INFO, "Deal Team has been open", YesNo.No);
					
					if(dt.createDealTeam(projectName, ATCE_DTDealName1,details, null,action.SCROLLANDBOOLEAN, 20))
					{
						log(LogStatus.INFO, "Deal Team has been Created", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "Deal Team is not Created", YesNo.No);
						sa.assertTrue(false, "Deal Team is not Created");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not Able to open Deal Team", YesNo.No);
					sa.assertTrue(false,  "Not Able to open Deal Team");
				}
			}
		
	
		
		lp.CRMlogout();
		sa.assertAll();
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc211_CreateATask(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		
		String activityType=ATCE_ATActivityType37;
		String taskSubject=ATCE_ATSubject37;
		String taskRelatedTo=ATCE_ATRelatedTo37;
		String taskNotes=ATCE_ATNote37;
		String taskStatus=ATCE_AdvanceStatus19;
		String taskPriority=ATCE_AdvancePriority19;	
		String dueDateDay=ATCE_ATDay37;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_037", excelLabel.Advance_Due_Date);
			
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority}};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (bp.createActivityTimeline(projectName, true, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
			log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
			sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

		}
		else
		{
			log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
			sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
		}	 
		
		
		lp.CRMlogout();	
		sa.assertAll();	
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc212_VerifyTaskOnDealTeamSection(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Deal6;
	    
		String[] contectName= {ATCE_ConName31};
		String[] meetingAndCallCount= {ATCE_ConMeetingAndCall31};
		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
		if (lp.clickOnTab(projectName, tabObj4)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					
					ArrayList<String>result=bp.verifyMeetingAndCallOnExternalTabOfDealTeam(contectName, meetingAndCallCount);
					if(result.isEmpty())
					{
						log(LogStatus.INFO, "The Meeting and call count have been verified on Deal Team Section", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Meeting and call count are not verified on Deal Team Section", YesNo.No);
						sa.assertTrue(false, "The Meeting and call count are not verified on Deal Team Section");
					}


					
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc213_CreateACall(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		
		String activityType=ATCE_ATActivityType38;
		String taskSubject=ATCE_ATSubject38;
		String taskRelatedTo=ATCE_ATRelatedTo38;
		String taskNotes=ATCE_ATNote38;
		
		String dueDateDay=ATCE_ATDay38;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_038", excelLabel.Advance_Due_Date);
			
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Date", taskDueDate }};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (bp.createActivityTimeline(projectName, true, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
			log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
			sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

		}
		else
		{
			log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
			sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
		}	 
		
		
		lp.CRMlogout();	
		sa.assertAll();	
	}

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc214_VerifyCallOnDealTeamConnectionPageAndMeetingAndCallPage(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Deal6;
	    
		String[] contectName= {ATCE_ConName32};
		String[] meetingAndCallCount= {ATCE_ConMeetingAndCall32};
		
		String contact=ATCE_ConName31;
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall9;
		

		
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
		if (lp.clickOnTab(projectName, tabObj4)) {

			log(LogStatus.INFO, "Clicked on Tab : " + tabObj4, YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.DealTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
					
					ArrayList<String>result=bp.verifyMeetingAndCallOnExternalTabOfDealTeam(contectName, meetingAndCallCount);
					if(result.isEmpty())
					{
						log(LogStatus.INFO, "The Meeting and call count have been verified on Deal Team Section", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Meeting and call count are not verified on Deal Team Section", YesNo.No);
						sa.assertTrue(false, "The Meeting and call count are not verified on Deal Team Section");
					}	
					
					ArrayList<String> result1=bp.verifyMeetingAndCallOnConnectionPageOfDealTeam(contact, connectionUserName, connectionMeetingaAndCall);
					if(result1.isEmpty())
					{
						log(LogStatus.INFO, "The Meeting and call count have been verified on connection page", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Meeting and call countare not verified on connection page", YesNo.No);
						sa.assertTrue(false, "The Meeting and call count are not verified on Deal Team Section");
					}
					
					
					}
					else
					{
						log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
						sa.assertTrue(false,  "Not able to click on Acuity tab");
					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
					sa.assertTrue(false,  "Not able to open record "+recordName);
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to click on tab "+tabObj4, YesNo.No);
				sa.assertTrue(false,  "Not able to click on tab "+tabObj4);
			}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc215_CreateAccountContactAndFundraising(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		InstitutionsPageBusinessLayer ip = new InstitutionsPageBusinessLayer(driver);
		ContactsPageBusinessLayer cp = new ContactsPageBusinessLayer(driver);
		FundRaisingPageBusinessLayer fp=new FundRaisingPageBusinessLayer(driver);
		String[] accountName = ATCERecord17.split("<break>");
		String[] recordType = ATCERecordType2.split("<break>");

		String[] contactFirstName = {ATCE_ContactFirstName11,ATCE_ContactFirstName12};
		String[] contactLastName = {ATCE_ContactLastName11,ATCE_ContactLastName12};
		String[] contactLegalName = {ATCE_ContactLegalName10,ATCE_ContactLegalName11};
		String[] contactEmail = {ATCE_ContactEmail10,ATCE_ContactEmail11};
		String[] contactTitle = {ATCE_ContactTitle11,ATCE_ContactTitle12};


		String fundraisingName=ATCE_Fundraising3;
		String flegalName=ATCE_FLegalName1;
		String fFundName=ATCE_FFundName1;
		String fStage=ATCE_FStageName1;

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
		if (accountName.length == recordType.length) {
			for (int i = 0; i < accountName.length; i++) {
				if (lp.clickOnTab(projectName, tabObj1)) {

					log(LogStatus.INFO, "Click on Tab : " + tabObj1, YesNo.No);
					ThreadSleep(3000);
					if (ip.createEntityOrAccount(environment, mode, accountName[i], recordType[i], null, null, 30)) {
						log(LogStatus.INFO,
								"successfully Created Firm : " + accountName[i] + " of record type : " + recordType[i],
								YesNo.No);
						sa.assertTrue(true,
								"successfully Created Firm : " + accountName[i] + " of record type : " + recordType[i]);


					} else {
						sa.assertTrue(false,
								"Not Able to Create Firm : " + accountName[i] + " of record type : " + recordType[i]);
						log(LogStatus.SKIP,
								"Not Able to Create Firm : " + accountName[i] + " of record type :" + recordType[i],
								YesNo.Yes);
					}

				} else {
					log(LogStatus.FAIL, "Not able to click on " + tabObj1 + " Tab", YesNo.No);
					sa.assertTrue(false, "Not able to click on " + tabObj1 + " Tab");
				}

			}
		} else {
			log(LogStatus.FAIL,
					"The count of Legal name and Record Type are not equal. Either Legal Name or Record type value are not proper",
					YesNo.No);
			sa.assertTrue(false,
					"The count of Legal name and Record Type are not equal. Either Legal Name or Record type value are not proper");
		}

		for (int i = 0; i < contactLastName.length; i++) {
			if (lp.clickOnTab(projectName, tabObj2)) {

				log(LogStatus.INFO, "Click on Tab : " + tabObj2, YesNo.No);
				ThreadSleep(3000);

				if (cp.createContact(projectName, contactFirstName[i], contactLastName[i], contactLegalName[i],
						contactEmail[i], "", null, null, CreationPage.ContactPage, contactTitle[i], null)) {
					log(LogStatus.INFO,
							"successfully Created Contact : " + contactFirstName[i] + " " + contactLastName[i],
							YesNo.No);
					sa.assertTrue(true,
							"successfully Created Contact : " + contactFirstName[i] + " " + contactLastName[i]);


				} else {
					log(LogStatus.FAIL,
							"Not able to create the Contact : " + contactFirstName[i] + " " + contactLastName[i],
							YesNo.No);
					sa.assertTrue(false,
							"Not able to create the Contact : " + contactFirstName[i] + " " + contactLastName[i]);
				}

			} else {
				log(LogStatus.FAIL, "Not able to click on " + tabObj2 + " Tab", YesNo.No);
				sa.assertTrue(false, "Not able to click on " + tabObj2 + " Tab");
			}
		}
		

		
		if (lp.clickOnTab(environment, mode, TabName.FundraisingsTab)) {
			
			if(fp.createFundRaising(environment, mode, fundraisingName, fFundName,flegalName, null, fStage, null, null,null, null, null))
			{
				log(LogStatus.INFO,"Fundraising has been created",YesNo.No);
				
			}
			else
			{
				log(LogStatus.ERROR,"Fundraising is not created",YesNo.No);
				sa.assertTrue(false, "Fundraising is not created");
			}
		
		}
		else
		{
			log(LogStatus.FAIL, "Not able to click on fundraising tab Tab", YesNo.No);
			sa.assertTrue(false, "Not able to click on fundraising Tab");
		}

			
		
		lp.CRMlogout();
		sa.assertAll();
	}
	
	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc216_FundraisingraisingContact(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		InstitutionsPageBusinessLayer ip = new InstitutionsPageBusinessLayer(driver);
		ContactsPageBusinessLayer cp = new ContactsPageBusinessLayer(driver);
		FundRaisingPageBusinessLayer fp=new FundRaisingPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);

		String recordName=ATCE_FName1;

		ArrayList<String> labelName=new ArrayList<String>();
		ArrayList<String> value=new ArrayList<String>();
		ArrayList<String> inputType=new ArrayList<String>();
		ArrayList<String> labelName1=new ArrayList<String>();
		ArrayList<String> value1=new ArrayList<String>();
		ArrayList<String> inputType1=new ArrayList<String>();

		labelName.add("Fundraising");
		labelName.add("Contact");
		labelName.add("Role");

		value.add(ATCE_FName1);
		value.add(ATCE_FContact1);
		value.add(ATCE_FRole1);

		inputType.add("SearchDropDown");
		inputType.add("SearchDropDown");
		inputType.add("DropDown");

		labelName1.add("Fundraising");
		labelName1.add("Contact");
		labelName1.add("Role");

		value1.add(ATCE_FName2);
		value1.add(ATCE_FContact2);
		value1.add(ATCE_FRole2);

		inputType1.add("SearchDropDown");
		inputType1.add("SearchDropDown");
		inputType1.add("DropDown");

		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(environment, mode, TabName.FundraisingsTab)) {

			log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if(fp.CreateNewFundraisingContactFromTab(projectName, labelName, value, inputType))
					{
						log(LogStatus.INFO, "Fundraising contact has been Created", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "Fundraising contact is not Created", YesNo.No);
						sa.assertTrue(false,  "Fundraising contact is not Created");
					}


				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+TabName.Fundraising.toString(), YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+TabName.Fundraising.toString());
		}


		if (lp.clickOnTab(environment, mode, TabName.FundraisingsTab)) {


			log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					if(fp.CreateNewFundraisingContactFromTab(projectName, labelName1, value1, inputType1))
					{
						log(LogStatus.INFO, "Fundraising contact has been Created", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "Fundraising contact is not Created", YesNo.No);
						sa.assertTrue(false,  "Fundraising contact is not Created");
					}


				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+TabName.Fundraising.toString(), YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+TabName.Fundraising.toString());
		}


		lp.CRMlogout();
		sa.assertAll();
	}

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc217_CreateATask(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		
		String activityType=ATCE_ATActivityType39;
		String taskSubject=ATCE_ATSubject39;
		String taskRelatedTo=ATCE_ATRelatedTo39;
		String taskNotes=ATCE_ATNote39;
		String taskStatus=ATCE_AdvanceStatus20;
		String taskPriority=ATCE_AdvancePriority20;	
		String dueDateDay=ATCE_ATDay39;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_039", excelLabel.Advance_Due_Date);
			
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Due Date", taskDueDate }, {"Status", taskStatus}, {"Priority", taskPriority}};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (bp.createActivityTimeline(projectName, true, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
			log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
			sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

		}
		else
		{
			log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
			sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
		}	 
		
		
		lp.CRMlogout();	
		sa.assertAll();	
	}
	

	@Parameters({ "projectName" })
	@Test
	public void ATCETc218_VerifyTaskOnFundraisingSection(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fundraising3;

		String[] contectName= {ATCE_ConName33};
		String[] meetingAndCallCount= {ATCE_ConMeetingAndCall33};


		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);

					ArrayList<String>result=bp.verifyMeetingAndCallOnFundraisingContactTeam(contectName, meetingAndCallCount);
					if(result.isEmpty())
					{
						log(LogStatus.INFO, "The Meeting and call count have been verified on fundraising contact Section", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Meeting and call count are not verified on fundraising contact Section", YesNo.No);
						sa.assertTrue(false, "The Meeting and call count are not verified on fundraising contact Section");

					}
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+TabName.Fundraising.toString(), YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+TabName.Fundraising.toString());
		}

		lp.CRMlogout();	
		sa.assertAll();	
	}	

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc219_CreateACall(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		
		String activityType=ATCE_ATActivityType40;
		String taskSubject=ATCE_ATSubject40;
		String taskRelatedTo=ATCE_ATRelatedTo40;
		String taskNotes=ATCE_ATNote40;
		
		String dueDateDay=ATCE_ATDay40;
		String taskDueDate = CommonLib.getFutureDateAccToTimeZone("GMT+5:30", "MM/dd/yyyy", Integer.parseInt(dueDateDay));
		ExcelUtils.writeData(AcuityDataSheetFilePath, taskDueDate, "Activity Timeline", excelLabel.Variable_Name,
				"ATCE_040", excelLabel.Advance_Due_Date);
			
		String[][] basicsection = { { "Subject", taskSubject }, { "Notes", taskNotes }, { "Related_To", taskRelatedTo } };
		String[][] advanceSection = { { "Date", taskDueDate }};
		
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);

		if (bp.createActivityTimeline(projectName, true, activityType, basicsection, advanceSection, null, null, false, null, null,null, null,null,null)) {
			log(LogStatus.PASS, "Activity timeline record has been created, Subject name : "+taskSubject, YesNo.No);
			sa.assertTrue(true, "Activity timeline record has been created,  Subject name : "+taskSubject);

		}
		else
		{
			log(LogStatus.ERROR, "Activity timeline record is not created, Subject name : "+taskSubject, YesNo.No);
			sa.assertTrue(false, "Activity timeline record is not created,  Subject name : "+taskSubject);
		}	 
		
		
		lp.CRMlogout();	
		sa.assertAll();	
	}

	
	@Parameters({ "projectName" })
	@Test
	public void ATCETc220_VerifyCallOnFundraisingConnectionPageAndMeetingAndCallPage(String projectName) {

		LoginPageBusinessLayer lp = new LoginPageBusinessLayer(driver);
		BasePageBusinessLayer bp = new BasePageBusinessLayer(driver);
		String recordName=ATCE_Fundraising3;
	    
		String[] contectName= {ATCE_ConName34};
		String[] meetingAndCallCount= {ATCE_ConMeetingAndCall34};
		
		String contact=ATCE_ConName34;
		
		String connectionUserName=crmUser6FirstName+" "+crmUser6LastName;
		
		String connectionMeetingaAndCall=ATCE_ConnectionMeetingAndCall9;
	
		lp.CRMLogin(crmUser6EmailID, adminPassword, appName);
	
		if (lp.clickOnTab(projectName, TabName.Fundraising.toString())) {

			log(LogStatus.INFO, "Clicked on Tab : " + TabName.Fundraising.toString(), YesNo.No);

			if (bp.clickOnAlreadyCreated_Lighting(environment, mode, TabName.FundraisingsTab,
					recordName, 30)) {
				log(LogStatus.INFO, recordName + " reocrd has been open", YesNo.No);

				if (bp.clicktabOnPage(TabName.Acuity.toString())) {
					log(LogStatus.INFO, "clicked on Acuity tab", YesNo.No);
				
					ArrayList<String>result=bp.verifyMeetingAndCallOnFundraisingContactTeam(contectName, meetingAndCallCount);
					if(result.isEmpty())
					{
						log(LogStatus.INFO, "The Meeting and call count have been verified on Deal Team Section", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Meeting and call count are not verified on Deal Team Section", YesNo.No);
						sa.assertTrue(false, "The Meeting and call count are not verified on Deal Team Section");
					}	
					
					ArrayList<String> result1=bp.verifyMeetingAndCallOnConnectionPageOfFundraisingContact(contact, connectionUserName, connectionMeetingaAndCall);
					if(result1.isEmpty())
					{
						log(LogStatus.INFO, "The Meeting and call count have been verified on connection page", YesNo.No);
					}
					else
					{
						log(LogStatus.ERROR, "The Meeting and call countare not verified on connection page", YesNo.No);
						sa.assertTrue(false, "The Meeting and call count are not verified on Deal Team Section");
					}
					
					
				}
				else
				{
					log(LogStatus.ERROR, "Not able to click on Acuity tab", YesNo.No);
					sa.assertTrue(false,  "Not able to click on Acuity tab");
				}
			}
			else
			{
				log(LogStatus.ERROR, "Not able to open record "+recordName, YesNo.No);
				sa.assertTrue(false,  "Not able to open record "+recordName);
			}
		}
		else
		{
			log(LogStatus.ERROR, "Not able to click on tab "+TabName.Fundraising.toString(), YesNo.No);
			sa.assertTrue(false,  "Not able to click on tab "+TabName.Fundraising.toString());
		}
			
		lp.CRMlogout();	
		sa.assertAll();	
	}	


}


